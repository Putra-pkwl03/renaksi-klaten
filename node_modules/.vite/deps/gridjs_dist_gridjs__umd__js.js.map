{
  "version": 3,
  "sources": ["../../gridjs/src/types.ts", "../../gridjs/node_modules/preact/dist/preact.module.js", "../../gridjs/src/util/id.ts", "../../gridjs/src/base.ts", "../../gridjs/src/view/htmlElement.tsx", "../../gridjs/src/util/html.ts", "../../gridjs/src/pipeline/processor.ts", "../../gridjs/src/cell.ts", "../../gridjs/src/row.ts", "../../gridjs/src/tabular.ts", "../../gridjs/src/util/array.ts", "../../gridjs/src/util/eventEmitter.ts", "../../gridjs/src/util/deepEqual.ts", "../../gridjs/src/pipeline/filter/globalSearch.ts", "../../gridjs/src/operator/search.ts", "../../gridjs/src/util/className.ts", "../../gridjs/src/pipeline/filter/serverGlobalSearch.ts", "../../gridjs/node_modules/preact/hooks/dist/hooks.module.js", "../../gridjs/src/hooks/useConfig.ts", "../../gridjs/src/i18n/en_US.ts", "../../gridjs/src/i18n/language.ts", "../../gridjs/src/view/plugin/search/actions.ts", "../../gridjs/src/hooks/useStore.ts", "../../gridjs/src/hooks/useSelector.ts", "../../gridjs/src/view/plugin/search/search.tsx", "../../gridjs/src/util/debounce.ts", "../../gridjs/src/pipeline/limit/pagination.ts", "../../gridjs/src/pipeline/limit/serverPagination.ts", "../../gridjs/src/view/plugin/pagination.tsx", "../../gridjs/src/util/width.ts", "../../gridjs/src/view/table/shadow.tsx", "../../gridjs/src/util/string.ts", "../../gridjs/src/plugin.ts", "../../gridjs/src/util/log.ts", "../../gridjs/src/header.ts", "../../gridjs/src/storage/storage.ts", "../../gridjs/src/storage/memory.ts", "../../gridjs/src/storage/server.ts", "../../gridjs/src/storage/storageUtils.ts", "../../gridjs/src/pipeline/pipeline.ts", "../../gridjs/src/pipeline/extractor/storage.ts", "../../gridjs/src/pipeline/transformer/arrayToTabular.ts", "../../gridjs/src/pipeline/initiator/server.ts", "../../gridjs/src/pipeline/transformer/storageResponseToArray.ts", "../../gridjs/src/pipeline/pipelineUtils.ts", "../../gridjs/src/state/store.ts", "../../gridjs/src/config.ts", "../../gridjs/src/view/table/td.tsx", "../../gridjs/src/view/table/tr.tsx", "../../gridjs/src/view/table/messageRow.tsx", "../../gridjs/src/view/table/tbody.tsx", "../../gridjs/src/pipeline/sort/native.ts", "../../gridjs/src/view/plugin/sort/actions.ts", "../../gridjs/src/pipeline/sort/server.ts", "../../gridjs/src/view/plugin/sort/sort.tsx", "../../gridjs/src/util/throttle.ts", "../../gridjs/src/view/plugin/resize/resize.tsx", "../../gridjs/src/view/table/th.tsx", "../../gridjs/src/view/table/thead.tsx", "../../gridjs/src/util/table.ts", "../../gridjs/src/view/actions.ts", "../../gridjs/src/view/table/table.tsx", "../../gridjs/src/view/headerContainer.tsx", "../../gridjs/src/view/footerContainer.tsx", "../../gridjs/src/view/container.tsx", "../../gridjs/src/grid.ts"],
  "sourcesContent": ["import { ComponentChild } from 'preact';\nimport Row from './row';\nimport { SortConfig } from './view/plugin/sort/sort';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { Plugin } from './plugin';\n\nexport type OneDArray<T> = T[];\nexport type TwoDArray<T> = T[][];\n\n/**\n * Table cell types\n */\nexport type TCell = number | string | boolean | ComponentChild | HTMLElement;\n// Array of Arrays\nexport type TDataArrayRow = OneDArray<TCell>;\nexport type TDataArray = OneDArray<TDataArrayRow>;\n// Array of Objects\nexport type TDataObjectRow = { [key: string]: TCell };\nexport type TDataObject = OneDArray<TDataObjectRow>;\n// (Array of Arrays) and (Array of Objects)\nexport type TData = TDataArray | TDataObject;\n\n// Table header cell type\nexport interface TColumn {\n  id?: string;\n  // default data for all columns\n  data?: ((row: TDataArrayRow | TDataObjectRow) => TCell) | TCell;\n  // column label\n  name?: string | ComponentChild;\n  plugin?: Plugin<any>;\n  // column width\n  width?: string;\n  minWidth?: string;\n  sort?: SortConfig;\n  columns?: OneDArray<TColumn>;\n  resizable?: boolean;\n  hidden?: boolean;\n  formatter?: (cell: TCell, row: Row, column: TColumn) => ComponentChild;\n  // HTML attributes to be added to all cells and header of this column\n  attributes?:\n    | ((\n        // this is null when `attributes` is called for a th\n        cell: TCell | null,\n        row: Row | null,\n        column: TColumn,\n      ) => JSXInternal.HTMLAttributes<HTMLTableCellElement>)\n    | JSXInternal.HTMLAttributes<HTMLTableCellElement>;\n}\n\n// Comparator function for the sorting plugin\nexport type Comparator<T> = (a: T, b: T) => number;\n\nexport interface TColumnSort {\n  index: number;\n  // 1 ascending, -1 descending\n  direction?: 1 | -1;\n}\n\n// container status\nexport enum Status {\n  Init,\n  Loading,\n  Loaded,\n  Rendered,\n  Error,\n}\n\nexport type CSSDeclaration = {\n  [key: string]: string | number;\n};\n", "var n,l,u,i,t,o,r,f={},e=[],c=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function s(n,l){for(var u in l)n[u]=l[u];return n}function a(n){var l=n.parentNode;l&&l.removeChild(n)}function h(l,u,i){var t,o,r,f={};for(r in u)\"key\"==r?t=u[r]:\"ref\"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),\"function\"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return v(l,f,t,o,null)}function v(n,i,t,o,r){var f={type:n,props:i,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==r?++u:r};return null==r&&null!=l.vnode&&l.vnode(f),f}function y(){return{current:null}}function p(n){return n.children}function d(n,l){this.props=n,this.context=l}function _(n,l){if(null==l)return n.__?_(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return\"function\"==typeof n.type?_(n):null}function k(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return k(n)}}function b(n){(!n.__d&&(n.__d=!0)&&t.push(n)&&!g.__r++||o!==l.debounceRendering)&&((o=l.debounceRendering)||setTimeout)(g)}function g(){for(var n;g.__r=t.length;)n=t.sort(function(n,l){return n.__v.__b-l.__v.__b}),t=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=s({},t)).__v=t.__v+1,j(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?_(t):o,t.__h),z(u,t),t.__e!=o&&k(t)))})}function w(n,l,u,i,t,o,r,c,s,a){var h,y,d,k,b,g,w,x=i&&i.__k||e,C=x.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(k=u.__k[h]=null==(k=l[h])||\"boolean\"==typeof k?null:\"string\"==typeof k||\"number\"==typeof k||\"bigint\"==typeof k?v(null,k,null,null,k):Array.isArray(k)?v(p,{children:k},null,null,null):k.__b>0?v(k.type,k.props,k.key,k.ref?k.ref:null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(d=x[h])||d&&k.key==d.key&&k.type===d.type)x[h]=void 0;else for(y=0;y<C;y++){if((d=x[y])&&k.key==d.key&&k.type===d.type){x[y]=void 0;break}d=null}j(n,k,d=d||f,t,o,r,c,s,a),b=k.__e,(y=k.ref)&&d.ref!=y&&(w||(w=[]),d.ref&&w.push(d.ref,null,k),w.push(y,k.__c||b,k)),null!=b?(null==g&&(g=b),\"function\"==typeof k.type&&k.__k===d.__k?k.__d=s=m(k,s,n):s=A(n,k,d,x,b,s),\"function\"==typeof u.type&&(u.__d=s)):s&&d.__e==s&&s.parentNode!=n&&(s=_(d))}for(u.__e=g,h=C;h--;)null!=x[h]&&N(x[h],x[h]);if(w)for(h=0;h<w.length;h++)M(w[h],w[++h],w[++h])}function m(n,l,u){for(var i,t=n.__k,o=0;t&&o<t.length;o++)(i=t[o])&&(i.__=n,l=\"function\"==typeof i.type?m(i,l,u):A(u,i,i,t,i.__e,l));return l}function x(n,l){return l=l||[],null==n||\"boolean\"==typeof n||(Array.isArray(n)?n.some(function(n){x(n,l)}):l.push(n)),l}function A(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else{for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=1)if(f==t)break n;n.insertBefore(t,o),r=o}return void 0!==r?r:t.nextSibling}function C(n,l,u,i,t){var o;for(o in u)\"children\"===o||\"key\"===o||o in l||H(n,o,null,u[o],i);for(o in l)t&&\"function\"!=typeof l[o]||\"children\"===o||\"key\"===o||\"value\"===o||\"checked\"===o||u[o]===l[o]||H(n,o,l[o],u[o],i)}function $(n,l,u){\"-\"===l[0]?n.setProperty(l,u):n[l]=null==u?\"\":\"number\"!=typeof u||c.test(l)?u:u+\"px\"}function H(n,l,u,i,t){var o;n:if(\"style\"===l)if(\"string\"==typeof u)n.style.cssText=u;else{if(\"string\"==typeof i&&(n.style.cssText=i=\"\"),i)for(l in i)u&&l in u||$(n.style,l,\"\");if(u)for(l in u)i&&u[l]===i[l]||$(n.style,l,u[l])}else if(\"o\"===l[0]&&\"n\"===l[1])o=l!==(l=l.replace(/Capture$/,\"\")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?T:I,o):n.removeEventListener(l,o?T:I,o);else if(\"dangerouslySetInnerHTML\"!==l){if(t)l=l.replace(/xlink(H|:h)/,\"h\").replace(/sName$/,\"s\");else if(\"href\"!==l&&\"list\"!==l&&\"form\"!==l&&\"tabIndex\"!==l&&\"download\"!==l&&l in n)try{n[l]=null==u?\"\":u;break n}catch(n){}\"function\"==typeof u||(null==u||!1===u&&-1==l.indexOf(\"-\")?n.removeAttribute(l):n.setAttribute(l,u))}}function I(n){this.l[n.type+!1](l.event?l.event(n):n)}function T(n){this.l[n.type+!0](l.event?l.event(n):n)}function j(n,u,i,t,o,r,f,e,c){var a,h,v,y,_,k,b,g,m,x,A,C,$,H,I,T=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(a=l.__b)&&a(u);try{n:if(\"function\"==typeof T){if(g=u.props,m=(a=T.contextType)&&t[a.__c],x=a?m?m.props.value:a.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:(\"prototype\"in T&&T.prototype.render?u.__c=h=new T(g,x):(u.__c=h=new d(g,x),h.constructor=T,h.render=O),m&&m.sub(h),h.props=g,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[],h._sb=[]),null==h.__s&&(h.__s=h.state),null!=T.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=s({},h.__s)),s(h.__s,T.getDerivedStateFromProps(g,h.__s))),y=h.props,_=h.state,v)null==T.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else{if(null==T.getDerivedStateFromProps&&g!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(g,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(g,h.__s,x)||u.__v===i.__v){for(h.props=g,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u)}),A=0;A<h._sb.length;A++)h.__h.push(h._sb[A]);h._sb=[],h.__h.length&&f.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(g,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,_,k)})}if(h.context=x,h.props=g,h.__v=u,h.__P=n,C=l.__r,$=0,\"prototype\"in T&&T.prototype.render){for(h.state=h.__s,h.__d=!1,C&&C(u),a=h.render(h.props,h.state,h.context),H=0;H<h._sb.length;H++)h.__h.push(h._sb[H]);h._sb=[]}else do{h.__d=!1,C&&C(u),a=h.render(h.props,h.state,h.context),h.state=h.__s}while(h.__d&&++$<25);h.state=h.__s,null!=h.getChildContext&&(t=s(s({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,_)),I=null!=a&&a.type===p&&null==a.key?a.props.children:a,w(n,Array.isArray(I)?I:[I],u,i,t,o,r,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L(i.__e,u,i,t,o,r,f,c);(a=l.diffed)&&a(u)}catch(n){u.__v=null,(c||null!=r)&&(u.__e=e,u.__h=!!c,r[r.indexOf(e)]=null),l.__e(n,u,i)}}function z(n,u){l.__c&&l.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u)})}catch(n){l.__e(n,u.__v)}})}function L(l,u,i,t,o,r,e,c){var s,h,v,y=i.props,p=u.props,d=u.type,k=0;if(\"svg\"===d&&(o=!0),null!=r)for(;k<r.length;k++)if((s=r[k])&&\"setAttribute\"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,r[k]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=o?document.createElementNS(\"http://www.w3.org/2000/svg\",d):document.createElement(d,p.is&&p),r=null,c=!1}if(null===d)y===p||c&&l.data===p||(l.data=p);else{if(r=r&&n.call(l.childNodes),h=(y=i.props||f).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=r)for(y={},k=0;k<l.attributes.length;k++)y[l.attributes[k].name]=l.attributes[k].value;(v||h)&&(v&&(h&&v.__html==h.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||\"\"))}if(C(l,p,y,o,c),v)u.__k=[];else if(k=u.props.children,w(l,Array.isArray(k)?k:[k],u,i,t,o&&\"foreignObject\"!==d,r,e,r?r[0]:i.__k&&_(i,0),c),null!=r)for(k=r.length;k--;)null!=r[k]&&a(r[k]);c||(\"value\"in p&&void 0!==(k=p.value)&&(k!==l.value||\"progress\"===d&&!k||\"option\"===d&&k!==y.value)&&H(l,\"value\",k,y.value,!1),\"checked\"in p&&void 0!==(k=p.checked)&&k!==l.checked&&H(l,\"checked\",k,y.checked,!1))}return l}function M(n,u,i){try{\"function\"==typeof n?n(u):n.current=u}catch(n){l.__e(n,i)}}function N(n,u,i){var t,o;if(l.unmount&&l.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount()}catch(n){l.__e(n,u)}t.base=t.__P=null,n.__c=void 0}if(t=n.__k)for(o=0;o<t.length;o++)t[o]&&N(t[o],u,i||\"function\"!=typeof n.type);i||null==n.__e||a(n.__e),n.__=n.__e=n.__d=void 0}function O(n,l,u){return this.constructor(n,u)}function P(u,i,t){var o,r,e;l.__&&l.__(u,i),r=(o=\"function\"==typeof t)?null:t&&t.__k||i.__k,e=[],j(i,u=(!o&&t||i).__k=h(p,null,[u]),r||f,f,void 0!==i.ownerSVGElement,!o&&t?[t]:r?null:i.firstChild?n.call(i.childNodes):null,e,!o&&t?t:r?r.__e:i.firstChild,o),z(e,u)}function S(n,l){P(n,l,S)}function q(l,u,i){var t,o,r,f=s({},l.props);for(r in u)\"key\"==r?t=u[r]:\"ref\"==r?o=u[r]:f[r]=u[r];return arguments.length>2&&(f.children=arguments.length>3?n.call(arguments,2):i),v(l.type,f,t||l.key,o||l.ref,null)}function B(n,l){var u={__c:l=\"__cC\"+r++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(b)},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n)}}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n=e.slice,l={__e:function(n,l,u,i){for(var t,o,r;l=l.__;)if((t=l.__c)&&!t.__)try{if((o=t.constructor)&&null!=o.getDerivedStateFromError&&(t.setState(o.getDerivedStateFromError(n)),r=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),r=t.__d),r)return t.__E=t}catch(l){n=l}throw n}},u=0,i=function(n){return null!=n&&void 0===n.constructor},d.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=s({},this.state),\"function\"==typeof n&&(n=n(s({},u),this.props)),n&&s(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),b(this))},d.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),b(this))},d.prototype.render=p,t=[],g.__r=0,r=0;export{d as Component,p as Fragment,q as cloneElement,B as createContext,h as createElement,y as createRef,h,S as hydrate,i as isValidElement,l as options,P as render,x as toChildArray};\n//# sourceMappingURL=preact.module.js.map\n", "export type ID = string;\n\nexport function generateUUID(): ID {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n", "import { generateUUID, ID } from './util/id';\n\nclass Base {\n  private readonly _id: ID;\n\n  constructor(id?: ID) {\n    this._id = id || generateUUID();\n  }\n\n  get id(): ID {\n    return this._id;\n  }\n}\n\nexport default Base;\n", "import { h } from 'preact';\n\nexport interface HTMLContentProps {\n  content: string;\n  parentElement?: string;\n}\n\nexport function HTMLElement(props: HTMLContentProps) {\n  return h(props.parentElement || 'span', {\n    dangerouslySetInnerHTML: { __html: props.content },\n  });\n}\n", "import { h, VNode } from 'preact';\nimport { HTMLElement } from '../view/htmlElement';\n\nexport function decode(content: string): string {\n  const value = new DOMParser().parseFromString(content, 'text/html');\n  return value.documentElement.textContent;\n}\n\nexport function html(content: string, parentElement?: string): VNode {\n  return h(HTMLElement, { content: content, parentElement: parentElement });\n}\n", "// The order of enum items define the processing order of the processor type\n// e.g. Extractor = 0 will be processed before Transformer = 1\nimport { generateUUID, ID } from '../util/id';\nimport { EventEmitter } from '../util/eventEmitter';\nimport { deepEqual } from '../util/deepEqual';\n\nexport enum ProcessorType {\n  Initiator,\n  ServerFilter,\n  ServerSort,\n  ServerLimit,\n  Extractor,\n  Transformer,\n  Filter,\n  Sort,\n  Limit,\n}\n\ninterface PipelineProcessorEvents {\n  propsUpdated: <T, P>(processor: PipelineProcessor<T, P>) => void;\n  beforeProcess: (...args) => void;\n  afterProcess: (...args) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PipelineProcessorProps {}\n\nexport abstract class PipelineProcessor<\n  T,\n  P extends Partial<PipelineProcessorProps>,\n> extends EventEmitter<PipelineProcessorEvents> {\n  public readonly id: ID;\n  private _props: P;\n\n  abstract get type(): ProcessorType;\n  protected abstract _process(...args): T | Promise<T>;\n  protected validateProps?(...args): void;\n\n  constructor(props?: Partial<P>) {\n    super();\n\n    this._props = {} as P;\n    this.id = generateUUID();\n\n    if (props) this.setProps(props);\n  }\n\n  /**\n   * process is used to call beforeProcess and afterProcess callbacks\n   * This function is just a wrapper that calls _process()\n   *\n   * @param args\n   */\n  process(...args): T | Promise<T> {\n    if (this.validateProps instanceof Function) {\n      this.validateProps(...args);\n    }\n\n    this.emit('beforeProcess', ...args);\n    const result = this._process(...args);\n    this.emit('afterProcess', ...args);\n    return result;\n  }\n\n  setProps(props: Partial<P>): this {\n    const updatedProps = {\n      ...this._props,\n      ...props,\n    };\n\n    if (!deepEqual(updatedProps, this._props)) {\n      this._props = updatedProps;\n      this.emit('propsUpdated', this);\n    }\n\n    return this;\n  }\n\n  get props(): P {\n    return this._props;\n  }\n}\n", "import Base from './base';\nimport { TCell } from './types';\nimport { html } from './util/html';\nimport { ComponentChild } from 'preact';\n\nclass Cell extends Base {\n  // because a Cell is a subset of TCell type\n  public data: number | string | boolean | ComponentChild;\n\n  constructor(data: TCell) {\n    super();\n\n    this.update(data);\n  }\n\n  private cast(data: TCell): number | string | boolean | ComponentChild {\n    if (data instanceof HTMLElement) {\n      return html(data.outerHTML);\n    }\n\n    return data;\n  }\n\n  /**\n   * Updates the Cell's data\n   *\n   * @param data\n   */\n  public update(data: TCell): Cell {\n    this.data = this.cast(data);\n    return this;\n  }\n}\n\nexport default Cell;\n", "import Cell from './cell';\nimport Base from './base';\nimport { TCell } from './types';\n\nclass Row extends Base {\n  private _cells: Cell[];\n\n  constructor(cells?: Cell[]) {\n    super();\n\n    this.cells = cells || [];\n  }\n\n  public cell(index: number): Cell {\n    return this._cells[index];\n  }\n\n  public get cells(): Cell[] {\n    return this._cells;\n  }\n\n  public set cells(cells: Cell[]) {\n    this._cells = cells;\n  }\n\n  public toArray(): TCell[] {\n    return this.cells.map((cell) => cell.data);\n  }\n\n  /**\n   * Creates a new Row from an array of Cell(s)\n   * This method generates a new ID for the Row and all nested elements\n   *\n   * @param cells\n   * @returns Row\n   */\n  static fromCells(cells: Cell[]): Row {\n    return new Row(cells.map((cell) => new Cell(cell.data)));\n  }\n\n  get length(): number {\n    return this.cells.length;\n  }\n}\n\nexport default Row;\n", "import Base from './base';\nimport Row from './row';\nimport Cell from './cell';\nimport { OneDArray, TCell, TwoDArray } from './types';\nimport { oneDtoTwoD } from './util/array';\n\nclass Tabular extends Base {\n  private _rows: Row[];\n  private _length: number;\n\n  constructor(rows?: Row[] | Row) {\n    super();\n\n    if (rows instanceof Array) {\n      this.rows = rows;\n    } else if (rows instanceof Row) {\n      this.rows = [rows];\n    } else {\n      this.rows = [];\n    }\n  }\n\n  get rows(): Row[] {\n    return this._rows;\n  }\n\n  set rows(rows: Row[]) {\n    this._rows = rows;\n  }\n\n  get length(): number {\n    return this._length || this.rows.length;\n  }\n\n  // we want to sent the length when storage is ServerStorage\n  set length(len: number) {\n    this._length = len;\n  }\n\n  public toArray(): TCell[][] {\n    return this.rows.map((row) => row.toArray());\n  }\n\n  /**\n   * Creates a new Tabular from an array of Row(s)\n   * This method generates a new ID for the Tabular and all nested elements\n   *\n   * @param rows\n   * @returns Tabular\n   */\n  static fromRows(rows: Row[]): Tabular {\n    return new Tabular(rows.map((row) => Row.fromCells(row.cells)));\n  }\n\n  /**\n   * Creates a new Tabular from a 2D array\n   * This method generates a new ID for the Tabular and all nested elements\n   *\n   * @param data\n   * @returns Tabular\n   */\n  static fromArray<T extends TCell>(\n    data: OneDArray<T> | TwoDArray<T>,\n  ): Tabular {\n    data = oneDtoTwoD(data);\n\n    return new Tabular(\n      data.map((row) => new Row(row.map((cell) => new Cell(cell)))),\n    );\n  }\n}\n\nexport default Tabular;\n", "import { OneDArray, TwoDArray } from '../types';\n\nexport function oneDtoTwoD<T>(data: OneDArray<T> | TwoDArray<T>): TwoDArray<T> {\n  if (data[0] && !(data[0] instanceof Array)) {\n    return [data] as TwoDArray<T>;\n  }\n\n  return data as TwoDArray<T>;\n}\n\nexport function flatten<T>(arrays: TwoDArray<T>): OneDArray<T> {\n  return arrays.reduce((prev, x) => prev.concat(x), []);\n}\n", "type EventArgs<T> = [T] extends [(...args: infer U) => any]\n  ? U\n  : [T] extends [void]\n  ? []\n  : [T];\n\n/**\n * Example:\n *\n * export interface BaseEvents<P, S> {\n *   SET_STATE: (component: BaseComponent<P, S>, state: S) => void;\n * }\n */\n\nexport interface EventEmitter<EventTypes> {\n  addListener<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes>;\n\n  on<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes>;\n\n  off<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes>;\n\n  emit<EventName extends keyof EventTypes>(\n    event: EventName,\n    ...args: EventArgs<EventTypes[EventName]>\n  ): boolean;\n}\n\nexport class EventEmitter<EventTypes> {\n  private callbacks: { [event: string]: ((...args) => void)[] };\n\n  // because we are using EventEmitter as a mixin and the\n  // constructor won't be called by the applyMixins function\n  // see src/base.ts and src/util/applyMixin.ts\n  private init(event?: string): void {\n    if (!this.callbacks) {\n      this.callbacks = {};\n    }\n\n    if (event && !this.callbacks[event]) {\n      this.callbacks[event] = [];\n    }\n  }\n\n  listeners(): { [event: string]: ((...args) => void)[] } {\n    return this.callbacks;\n  }\n\n  on<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes> {\n    this.init(event as string);\n    this.callbacks[event as string].push(listener);\n    return this;\n  }\n\n  off<EventName extends keyof EventTypes>(\n    event: EventName,\n    listener: (...args: EventArgs<EventTypes[EventName]>) => void,\n  ): EventEmitter<EventTypes> {\n    const eventName = event as string;\n\n    this.init();\n\n    if (!this.callbacks[eventName] || this.callbacks[eventName].length === 0) {\n      // there is no callbacks with this key\n      return this;\n    }\n\n    this.callbacks[eventName] = this.callbacks[eventName].filter(\n      (value) => value != listener,\n    );\n\n    return this;\n  }\n\n  emit<EventName extends keyof EventTypes>(\n    event: EventName,\n    ...args: EventArgs<EventTypes[EventName]>\n  ): boolean {\n    const eventName = event as string;\n\n    this.init(eventName);\n\n    if (this.callbacks[eventName].length > 0) {\n      this.callbacks[eventName].forEach((value) => value(...args));\n      return true;\n    }\n\n    return false;\n  }\n}\n", "/**\n * Returns true if both objects are equal\n * @param a left object\n * @param b right object\n * @returns\n */\nexport function deepEqual<A, B>(obj1: A, obj2: B) {\n  // If objects are not the same type, return false\n  if (typeof obj1 !== typeof obj2) {\n    return false;\n  }\n  // If objects are both null or undefined, return true\n  if (obj1 === null && obj2 === null) {\n    return true;\n  }\n  // If objects are both primitive types, compare them directly\n  if (typeof obj1 !== 'object') {\n    // eslint-disable-next-line\n    // @ts-ignore\n    return obj1 === obj2;\n  }\n  // If objects are arrays, compare their elements recursively\n  if (Array.isArray(obj1) && Array.isArray(obj2)) {\n    if (obj1.length !== obj2.length) {\n      return false;\n    }\n    for (let i = 0; i < obj1.length; i++) {\n      if (!deepEqual(obj1[i], obj2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // If objects are VNodes, compare their props only\n  if (\n    // eslint-disable-next-line no-prototype-builtins\n    obj1.hasOwnProperty('constructor') &&\n    // eslint-disable-next-line no-prototype-builtins\n    obj2.hasOwnProperty('constructor') &&\n    // eslint-disable-next-line no-prototype-builtins\n    obj1.hasOwnProperty('props') &&\n    // eslint-disable-next-line no-prototype-builtins\n    obj2.hasOwnProperty('props') &&\n    // eslint-disable-next-line no-prototype-builtins\n    obj1.hasOwnProperty('key') &&\n    // eslint-disable-next-line no-prototype-builtins\n    obj2.hasOwnProperty('key') &&\n    // eslint-disable-next-line no-prototype-builtins\n    obj1.hasOwnProperty('ref') &&\n    // eslint-disable-next-line no-prototype-builtins\n    obj2.hasOwnProperty('ref') &&\n    // eslint-disable-next-line no-prototype-builtins\n    obj1.hasOwnProperty('type') &&\n    // eslint-disable-next-line no-prototype-builtins\n    obj2.hasOwnProperty('type')\n  ) {\n    return deepEqual(obj1['props'], obj2['props']);\n  }\n  // If objects are both objects, compare their properties recursively\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!obj2.hasOwnProperty(key) || !deepEqual(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n", "import search from '../../operator/search';\nimport Tabular from '../../tabular';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { OneDArray, TCell, TColumn } from '../../types';\n\ninterface GlobalSearchFilterProps extends PipelineProcessorProps {\n  keyword: string;\n  columns: OneDArray<TColumn>;\n  ignoreHiddenColumns: boolean;\n  selector?: (cell: TCell, rowIndex: number, cellIndex: number) => string;\n}\n\nclass GlobalSearchFilter extends PipelineProcessor<\n  Tabular,\n  GlobalSearchFilterProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Filter;\n  }\n\n  _process(data: Tabular): Tabular {\n    if (this.props.keyword) {\n      return search(\n        String(this.props.keyword).trim(),\n        this.props.columns,\n        this.props.ignoreHiddenColumns,\n        data,\n        this.props.selector,\n      );\n    }\n\n    return data;\n  }\n}\n\nexport default GlobalSearchFilter;\n", "import Tabular from '../tabular';\nimport { VNode } from 'preact';\nimport { HTMLContentProps } from '../view/htmlElement';\nimport { OneDArray, TCell, TColumn } from '../types';\n\nexport default function (\n  keyword: string,\n  columns: OneDArray<TColumn>,\n  ignoreHiddenColumns: boolean,\n  tabular: Tabular,\n  selector?: (cell: TCell, rowIndex: number, cellIndex: number) => string,\n): Tabular {\n  // escape special regex chars\n  keyword = keyword.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n\n  return new Tabular(\n    tabular.rows.filter((row, rowIndex) =>\n      row.cells.some((cell, cellIndex) => {\n        if (!cell) {\n          return false;\n        }\n\n        if (ignoreHiddenColumns) {\n          if (\n            columns &&\n            columns[cellIndex] &&\n            typeof columns[cellIndex] === 'object'\n          ) {\n            const typedColumn = columns[cellIndex] as TColumn;\n            if (typedColumn.hidden) {\n              return false;\n            }\n          }\n        }\n\n        let data = '';\n\n        if (typeof selector === 'function') {\n          data = selector(cell.data, rowIndex, cellIndex);\n        } else if (typeof cell.data === 'object') {\n          // HTMLContent element\n          const element = cell.data as VNode<HTMLContentProps>;\n          if (element && element.props && element.props.content) {\n            // TODO: we should only search in the content of the element. props.content is the entire HTML element\n            data = element.props.content;\n          }\n        } else {\n          // primitive types\n          data = String(cell.data);\n        }\n\n        return new RegExp(keyword, 'gi').test(data);\n      }),\n    ),\n  );\n}\n", "import { JSXInternal } from 'preact/src/jsx';\n\nexport function className(...args: string[]): string {\n  const prefix = 'gridjs';\n\n  return `${prefix}${args.reduce(\n    (prev: string, cur: string) => `${prev}-${cur}`,\n    '',\n  )}`;\n}\n\nexport function classJoin(\n  ...classNames: (undefined | string | JSXInternal.SignalLike<string>)[]\n): string {\n  return classNames\n    .map((x) => (x ? x.toString() : ''))\n    .filter((x) => x)\n    .reduce((className, prev) => `${className || ''} ${prev}`, '')\n    .trim();\n}\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\n\ninterface ServerGlobalSearchFilterProps extends PipelineProcessorProps {\n  keyword?: string;\n  url?: (prevUrl: string, keyword: string) => string;\n  body?: (prevBody: BodyInit, keyword: string) => BodyInit;\n}\n\nclass ServerGlobalSearchFilter extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerGlobalSearchFilterProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.ServerFilter;\n  }\n\n  _process(options?: ServerStorageOptions): ServerStorageOptions {\n    if (!this.props.keyword) return options;\n\n    const updates = {};\n\n    if (this.props.url) {\n      updates['url'] = this.props.url(options.url, this.props.keyword);\n    }\n\n    if (this.props.body) {\n      updates['body'] = this.props.body(options.body, this.props.keyword);\n    }\n\n    return {\n      ...options,\n      ...updates,\n    };\n  }\n}\n\nexport default ServerGlobalSearchFilter;\n", "import{options as n}from\"preact\";var t,r,u,i,o=0,f=[],c=[],e=n.__b,a=n.__r,v=n.diffed,l=n.__c,m=n.unmount;function d(t,u){n.__h&&n.__h(r,t,o||u),o=0;var i=r.__H||(r.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c}),i.__[t]}function p(n){return o=1,y(B,n)}function y(n,u,i){var o=d(t++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}))}],o.__c=r,!r.u)){r.u=!0;var f=r.shouldComponentUpdate;r.shouldComponentUpdate=function(n,t,r){if(!o.__c.__H)return!0;var u=o.__c.__H.__.filter(function(n){return n.__c});if(u.every(function(n){return!n.__N}))return!f||f.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0)}}),!(!i&&o.__c.props===n)&&(!f||f.call(this,n,t,r))}}return o.__N||o.__}function h(u,i){var o=d(t++,3);!n.__s&&z(o.__H,i)&&(o.__=u,o.i=i,r.__H.__h.push(o))}function s(u,i){var o=d(t++,4);!n.__s&&z(o.__H,i)&&(o.__=u,o.i=i,r.__h.push(o))}function _(n){return o=5,F(function(){return{current:n}},[])}function A(n,t,r){o=6,s(function(){return\"function\"==typeof n?(n(t()),function(){return n(null)}):n?(n.current=t(),function(){return n.current=null}):void 0},null==r?r:r.concat(n))}function F(n,r){var u=d(t++,7);return z(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__}function T(n,t){return o=8,F(function(){return n},t)}function q(n){var u=r.context[n.__c],i=d(t++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r)),u.props.value):n.__}function x(t,r){n.useDebugValue&&n.useDebugValue(r?r(t):t)}function P(n){var u=d(t++,10),i=p();return u.__=n,r.componentDidCatch||(r.componentDidCatch=function(n,t){u.__&&u.__(n,t),i[1](n)}),[i[0],function(){i[1](void 0)}]}function V(){var n=d(t++,11);if(!n.__){for(var u=r.__v;null!==u&&!u.__m&&null!==u.__;)u=u.__;var i=u.__m||(u.__m=[0,0]);n.__=\"P\"+i[0]+\"-\"+i[1]++}return n.__}function b(){for(var t;t=f.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(k),t.__H.__h.forEach(w),t.__H.__h=[]}catch(r){t.__H.__h=[],n.__e(r,t.__v)}}n.__b=function(n){r=null,e&&e(n)},n.__r=function(n){a&&a(n),t=0;var i=(r=n.__c).__H;i&&(u===r?(i.__h=[],r.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c,n.__N=n.i=void 0})):(i.__h.forEach(k),i.__h.forEach(w),i.__h=[])),u=r},n.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f.push(o)&&i===n.requestAnimationFrame||((i=n.requestAnimationFrame)||j)(b)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c&&(n.__=n.__V),n.i=void 0,n.__V=c})),u=r=null},n.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k),t.__h=t.__h.filter(function(n){return!n.__||w(n)})}catch(u){r.some(function(n){n.__h&&(n.__h=[])}),r=[],n.__e(u,t.__v)}}),l&&l(t,r)},n.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k(n)}catch(n){r=n}}),u.__H=void 0,r&&n.__e(r,u.__v))};var g=\"function\"==typeof requestAnimationFrame;function j(n){var t,r=function(){clearTimeout(u),g&&cancelAnimationFrame(t),setTimeout(n)},u=setTimeout(r,100);g&&(t=requestAnimationFrame(r))}function k(n){var t=r,u=n.__c;\"function\"==typeof u&&(n.__c=void 0,u()),r=t}function w(n){var t=r;n.__c=n.__(),r=t}function z(n,t){return!n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function B(n,t){return\"function\"==typeof t?t(n):t}export{T as useCallback,q as useContext,x as useDebugValue,h as useEffect,P as useErrorBoundary,V as useId,A as useImperativeHandle,s as useLayoutEffect,F as useMemo,y as useReducer,_ as useRef,p as useState};\n//# sourceMappingURL=hooks.module.js.map\n", "import { useContext } from 'preact/hooks';\nimport { Config, ConfigContext } from '../config';\n\nexport function useConfig(): Config {\n  return useContext(ConfigContext);\n}\n", "export default {\n  search: {\n    placeholder: 'Type a keyword...',\n  },\n  sort: {\n    sortAsc: 'Sort column ascending',\n    sortDesc: 'Sort column descending',\n  },\n  pagination: {\n    previous: 'Previous',\n    next: 'Next',\n    navigate: (page, pages) => `Page ${page} of ${pages}`,\n    page: (page) => `Page ${page}`,\n    showing: 'Showing',\n    of: 'of',\n    to: 'to',\n    results: 'results',\n  },\n  loading: 'Loading...',\n  noRecordsFound: 'No matching records found',\n  error: 'An error happened while fetching the data',\n};\n", "import { useConfig } from '../hooks/useConfig';\nimport enUS from './en_US';\ntype MessageFormat = (...args) => string;\ntype Message = string | MessageFormat;\nexport type Language = { [key: string]: Message | Language };\n\nexport class Translator {\n  private readonly _language: Language;\n  private readonly _defaultLanguage: Language;\n\n  constructor(language?: Language) {\n    this._language = language;\n    this._defaultLanguage = enUS;\n  }\n\n  /**\n   * Tries to split the message with \".\" and find\n   * the key in the given language\n   *\n   * @param message\n   * @param lang\n   */\n  getString(message: string, lang: Language): MessageFormat {\n    if (!lang || !message) return null;\n\n    const splitted = message.split('.');\n    const key = splitted[0];\n\n    if (lang[key]) {\n      const val = lang[key];\n\n      if (typeof val === 'string') {\n        return (): string => val;\n      } else if (typeof val === 'function') {\n        return val;\n      } else {\n        return this.getString(splitted.slice(1).join('.'), val);\n      }\n    }\n\n    return null;\n  }\n\n  translate(message: string, ...args): string {\n    const translated = this.getString(message, this._language);\n    let messageFormat;\n\n    if (translated) {\n      messageFormat = translated;\n    } else {\n      messageFormat = this.getString(message, this._defaultLanguage);\n    }\n\n    if (messageFormat) {\n      return messageFormat(...args);\n    }\n\n    return message;\n  }\n}\n\nexport function useTranslator() {\n  const config = useConfig();\n\n  return function (message: string, ...args): string {\n    return config.translator.translate(message, ...args);\n  };\n}\n", "export const SearchKeyword = (payload) => (state) => {\n  return {\n    ...state,\n    search: {\n      keyword: payload,\n    },\n  };\n};\n", "import { useConfig } from './useConfig';\n\nexport function useStore() {\n  const config = useConfig();\n  return config.store;\n}\n", "import { useEffect, useState } from 'preact/hooks';\nimport { useStore } from './useStore';\n\nexport default function useSelector<T>(selector: (state) => T) {\n  const store = useStore();\n  const [current, setCurrent] = useState(selector(store.getState()));\n\n  useEffect(() => {\n    const unsubscribe = store.subscribe(() => {\n      const updated = selector(store.getState());\n\n      if (current !== updated) {\n        setCurrent(updated);\n      }\n    });\n\n    return unsubscribe;\n  }, []);\n\n  return current;\n}\n", "import { h, JSX } from 'preact';\nimport GlobalSearchFilter from '../../../pipeline/filter/globalSearch';\nimport { classJoin, className } from '../../../util/className';\nimport ServerGlobalSearchFilter from '../../../pipeline/filter/serverGlobalSearch';\nimport { TCell } from '../../../types';\nimport { useConfig } from '../../../hooks/useConfig';\nimport { useCallback, useEffect, useState } from 'preact/hooks';\nimport { useTranslator } from '../../../i18n/language';\nimport * as actions from './actions';\nimport { useStore } from '../../../hooks/useStore';\nimport useSelector from '../../../hooks/useSelector';\nimport { debounce } from '../../../util/debounce';\n\nexport interface SearchConfig {\n  keyword?: string;\n  ignoreHiddenColumns?: boolean;\n  debounceTimeout?: number;\n  selector?: (cell: TCell, rowIndex: number, cellIndex: number) => string;\n  server?: {\n    url?: (prevUrl: string, keyword: string) => string;\n    body?: (prevBody: BodyInit, keyword: string) => BodyInit;\n  };\n}\n\nexport function Search() {\n  const [processor, setProcessor] = useState<\n    GlobalSearchFilter | ServerGlobalSearchFilter\n  >(undefined);\n  const config = useConfig();\n  const props = config.search as SearchConfig;\n  const _ = useTranslator();\n  const { dispatch } = useStore();\n  const state = useSelector((state) => state.search);\n\n  useEffect(() => {\n    if (!processor) return;\n\n    processor.setProps({\n      keyword: state?.keyword,\n    });\n  }, [state, processor]);\n\n  useEffect(() => {\n    if (props.server) {\n      setProcessor(\n        new ServerGlobalSearchFilter({\n          keyword: props.keyword,\n          url: props.server.url,\n          body: props.server.body,\n        }),\n      );\n    } else {\n      setProcessor(\n        new GlobalSearchFilter({\n          keyword: props.keyword,\n          columns: config.header && config.header.columns,\n          ignoreHiddenColumns:\n            props.ignoreHiddenColumns ||\n            props.ignoreHiddenColumns === undefined,\n          selector: props.selector,\n        }),\n      );\n    }\n\n    // initial search\n    if (props.keyword) dispatch(actions.SearchKeyword(props.keyword));\n  }, [props]);\n\n  useEffect(() => {\n    if (!processor) return undefined;\n\n    config.pipeline.register<object, object>(processor);\n\n    return () => config.pipeline.unregister<object, object>(processor);\n  }, [config, processor]);\n\n  const debouncedOnInput = useCallback(\n    debounce(\n      (event: JSX.TargetedEvent<HTMLInputElement>) => {\n        if (event.target instanceof HTMLInputElement) {\n          dispatch(actions.SearchKeyword(event.target.value));\n        }\n      },\n      processor instanceof ServerGlobalSearchFilter\n        ? props.debounceTimeout || 250\n        : 0,\n    ),\n    [props, processor],\n  );\n\n  return (\n    <div className={className(classJoin('search', config.className?.search))}>\n      <input\n        type=\"search\"\n        placeholder={_('search.placeholder')}\n        aria-label={_('search.placeholder')}\n        onInput={debouncedOnInput}\n        className={classJoin(className('input'), className('search', 'input'))}\n        defaultValue={state?.keyword || ''}\n      />\n    </div>\n  );\n}\n", "export const debounce = <F extends (...args: any[]) => any>(\n  func: F,\n  waitFor: number,\n) => {\n  let timeout;\n\n  return (...args: Parameters<F>): Promise<ReturnType<F>> =>\n    new Promise((resolve) => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n\n      timeout = setTimeout(() => resolve(func(...args)), waitFor);\n    });\n};\n", "import Tabular from '../../tabular';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\n\ninterface PaginationLimitProps extends PipelineProcessorProps {\n  page: number;\n  limit: number;\n}\n\nclass PaginationLimit extends PipelineProcessor<Tabular, PaginationLimitProps> {\n  protected validateProps(): void {\n    if (isNaN(Number(this.props.limit)) || isNaN(Number(this.props.page))) {\n      throw Error('Invalid parameters passed');\n    }\n  }\n\n  get type(): ProcessorType {\n    return ProcessorType.Limit;\n  }\n\n  protected _process(data: Tabular): Tabular {\n    const page = this.props.page;\n    const start = page * this.props.limit;\n    const end = (page + 1) * this.props.limit;\n\n    return new Tabular(data.rows.slice(start, end));\n  }\n}\n\nexport default PaginationLimit;\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\n\ninterface ServerPaginationLimitProps extends PipelineProcessorProps {\n  page: number;\n  limit: number;\n  url?: (prevUrl: string, page: number, limit: number) => string;\n  body?: (prevBody: BodyInit, page: number, limit: number) => BodyInit;\n}\n\nclass ServerPaginationLimit extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerPaginationLimitProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.ServerLimit;\n  }\n\n  _process(options?: ServerStorageOptions): ServerStorageOptions {\n    const updates = {};\n\n    if (this.props.url) {\n      updates['url'] = this.props.url(\n        options.url,\n        this.props.page,\n        this.props.limit,\n      );\n    }\n\n    if (this.props.body) {\n      updates['body'] = this.props.body(\n        options.body,\n        this.props.page,\n        this.props.limit,\n      );\n    }\n\n    return {\n      ...options,\n      ...updates,\n    };\n  }\n}\n\nexport default ServerPaginationLimit;\n", "import { h, Fragment } from 'preact';\nimport PaginationLimit from '../../pipeline/limit/pagination';\nimport { classJoin, className } from '../../util/className';\nimport ServerPaginationLimit from '../../pipeline/limit/serverPagination';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useTranslator } from '../../i18n/language';\n\nexport interface PaginationConfig {\n  limit?: number;\n  page?: number;\n  summary?: boolean;\n  nextButton?: boolean;\n  prevButton?: boolean;\n  buttonsCount?: number;\n  resetPageOnUpdate?: boolean;\n  server?: {\n    url?: (prevUrl: string, page: number, limit: number) => string;\n    body?: (prevBody: BodyInit, page: number, limit: number) => BodyInit;\n  };\n}\n\nexport function Pagination() {\n  const config = useConfig();\n  const {\n    server,\n    summary = true,\n    nextButton = true,\n    prevButton = true,\n    buttonsCount = 3,\n    limit = 10,\n    page = 0,\n    resetPageOnUpdate = true,\n  } = config.pagination as PaginationConfig;\n\n  const processor = useRef<PaginationLimit | ServerPaginationLimit>(null);\n  const [currentPage, setCurrentPage] = useState(page);\n  const [total, setTotal] = useState(0);\n  const _ = useTranslator();\n\n  useEffect(() => {\n    if (server) {\n      processor.current = new ServerPaginationLimit({\n        limit: limit,\n        page: currentPage,\n        url: server.url,\n        body: server.body,\n      });\n\n      config.pipeline.register(processor.current);\n    } else {\n      processor.current = new PaginationLimit({\n        limit: limit,\n        page: currentPage,\n      });\n\n      config.pipeline.register(processor.current);\n    }\n\n    if (processor.current instanceof ServerPaginationLimit) {\n      config.pipeline.on('afterProcess', (tabular) => setTotal(tabular.length));\n    } else if (processor.current instanceof PaginationLimit) {\n      // Pagination (all Limit processors) is the last step in the pipeline\n      // and we assume that at this stage, we have the rows that we care about.\n      // Let's grab the rows before processing Pagination and set total number of rows\n      processor.current.on('beforeProcess', (tabular) =>\n        setTotal(tabular.length),\n      );\n    }\n\n    config.pipeline.on('updated', onUpdate);\n\n    // we need to make sure that the state is set\n    // to the default props when an error happens\n    config.pipeline.on('error', () => {\n      setTotal(0);\n      setCurrentPage(0);\n    });\n\n    return () => {\n      config.pipeline.unregister<object, object>(processor.current);\n      config.pipeline.off('updated', onUpdate);\n    };\n  }, []);\n\n  const onUpdate = (updatedProcessor) => {\n    // this is to ensure that the current page is set to 0\n    // when a processor is updated for some reason\n    if (resetPageOnUpdate && updatedProcessor !== processor.current) {\n      setCurrentPage(0);\n\n      if (processor.current.props.page !== 0) {\n        processor.current.setProps({\n          page: 0,\n        });\n      }\n    }\n  };\n\n  const pages = () => Math.ceil(total / limit);\n\n  const setPage = (page: number) => {\n    if (page >= pages() || page < 0 || page === currentPage) {\n      return null;\n    }\n\n    setCurrentPage(page);\n\n    processor.current.setProps({\n      page: page,\n    });\n  };\n\n  const renderPages = () => {\n    if (buttonsCount <= 0) {\n      return null;\n    }\n\n    // how many pagination buttons to render?\n    const maxCount: number = Math.min(pages(), buttonsCount);\n\n    let pagePivot = Math.min(currentPage, Math.floor(maxCount / 2));\n    if (currentPage + Math.floor(maxCount / 2) >= pages()) {\n      pagePivot = maxCount - (pages() - currentPage);\n    }\n\n    return (\n      <Fragment>\n        {pages() > maxCount && currentPage - pagePivot > 0 && (\n          <Fragment>\n            <button\n              tabIndex={0}\n              role=\"button\"\n              onClick={() => setPage(0)}\n              title={_('pagination.firstPage')}\n              aria-label={_('pagination.firstPage')}\n              className={config.className.paginationButton}\n            >\n              {_('1')}\n            </button>\n            <button\n              tabIndex={-1}\n              className={classJoin(\n                className('spread'),\n                config.className.paginationButton,\n              )}\n            >\n              ...\n            </button>\n          </Fragment>\n        )}\n\n        {Array.from(Array(maxCount).keys())\n          .map((i) => currentPage + (i - pagePivot))\n          .map((i) => (\n            <button\n              tabIndex={0}\n              role=\"button\"\n              onClick={() => setPage(i)}\n              className={classJoin(\n                currentPage === i\n                  ? classJoin(\n                      className('currentPage'),\n                      config.className.paginationButtonCurrent,\n                    )\n                  : null,\n                config.className.paginationButton,\n              )}\n              title={_('pagination.page', i + 1)}\n              aria-label={_('pagination.page', i + 1)}\n            >\n              {_(`${i + 1}`)}\n            </button>\n          ))}\n\n        {pages() > maxCount && pages() > currentPage + pagePivot + 1 && (\n          <Fragment>\n            <button\n              tabIndex={-1}\n              className={classJoin(\n                className('spread'),\n                config.className.paginationButton,\n              )}\n            >\n              ...\n            </button>\n            <button\n              tabIndex={0}\n              role=\"button\"\n              onClick={() => setPage(pages() - 1)}\n              title={_('pagination.page', pages())}\n              aria-label={_('pagination.page', pages())}\n              className={config.className.paginationButton}\n            >\n              {_(`${pages()}`)}\n            </button>\n          </Fragment>\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderSummary = () => {\n    return (\n      <Fragment>\n        {summary && total > 0 && (\n          <div\n            role=\"status\"\n            aria-live=\"polite\"\n            className={classJoin(\n              className('summary'),\n              config.className.paginationSummary,\n            )}\n            title={_('pagination.navigate', currentPage + 1, pages())}\n          >\n            {_('pagination.showing')} <b>{_(`${currentPage * limit + 1}`)}</b>{' '}\n            {_('pagination.to')}{' '}\n            <b>{_(`${Math.min((currentPage + 1) * limit, total)}`)}</b>{' '}\n            {_('pagination.of')} <b>{_(`${total}`)}</b>{' '}\n            {_('pagination.results')}\n          </div>\n        )}\n      </Fragment>\n    );\n  };\n\n  return (\n    <div\n      className={classJoin(\n        className('pagination'),\n        config.className.pagination,\n      )}\n    >\n      {renderSummary()}\n\n      <div className={className('pages')}>\n        {prevButton && (\n          <button\n            tabIndex={0}\n            role=\"button\"\n            disabled={currentPage === 0}\n            onClick={() => setPage(currentPage - 1)}\n            title={_('pagination.previous')}\n            aria-label={_('pagination.previous')}\n            className={classJoin(\n              config.className.paginationButton,\n              config.className.paginationButtonPrev,\n            )}\n          >\n            {_('pagination.previous')}\n          </button>\n        )}\n\n        {renderPages()}\n\n        {nextButton && (\n          <button\n            tabIndex={0}\n            role=\"button\"\n            disabled={pages() === currentPage + 1 || pages() === 0}\n            onClick={() => setPage(currentPage + 1)}\n            title={_('pagination.next')}\n            aria-label={_('pagination.next')}\n            className={classJoin(\n              config.className.paginationButton,\n              config.className.paginationButtonNext,\n            )}\n          >\n            {_('pagination.next')}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n", "export function width(width: string | number, containerWidth?: number): number {\n  if (typeof width == 'string') {\n    if (width.indexOf('%') > -1) {\n      return (containerWidth / 100) * parseInt(width, 10);\n    } else {\n      return parseInt(width, 10);\n    }\n  }\n\n  return width;\n}\n\nexport function px(width: number): string {\n  if (!width) return '';\n  return `${Math.floor(width)}px`;\n}\n", "import { h } from 'preact';\nimport { className } from '../../util/className';\n\n/**\n * ShadowTable renders a hidden table and is used to calculate the column's width\n * when autoWidth option is enabled\n */\nexport function ShadowTable(props: { tableRef: HTMLTableElement }) {\n  const shadowTable = props.tableRef.cloneNode(true) as HTMLTableElement;\n\n  shadowTable.style.position = 'absolute';\n  shadowTable.style.width = '100%';\n  shadowTable.style.zIndex = '-2147483640';\n  shadowTable.style.visibility = 'hidden';\n\n  return (\n    <div\n      ref={(nodeElement) => {\n        nodeElement && nodeElement.appendChild(shadowTable);\n      }}\n    />\n  );\n}\n\nexport function getShadowTableWidths(tempRef: HTMLDivElement): {\n  [columnId: string]: { minWidth: number; width: number };\n} {\n  const tableElement: HTMLTableElement = tempRef.querySelector(\n    'table',\n  ) as HTMLTableElement;\n\n  if (!tableElement) {\n    return {};\n  }\n\n  const tableClassName = tableElement.className;\n  const tableStyle = tableElement.style.cssText;\n  tableElement.className = `${tableClassName} ${className('shadowTable')}`;\n\n  tableElement.style.tableLayout = 'auto';\n  tableElement.style.width = 'auto';\n  tableElement.style.padding = '0';\n  tableElement.style.margin = '0';\n  tableElement.style.border = 'none';\n  tableElement.style.outline = 'none';\n\n  let obj = Array.from(\n    tableElement.parentNode.querySelectorAll<HTMLElement>('thead th'),\n  ).reduce((prev, current) => {\n    current.style.width = `${current.clientWidth}px`;\n\n    return {\n      [current.getAttribute('data-column-id')]: {\n        minWidth: current.clientWidth,\n      },\n      ...prev,\n    };\n  }, {});\n\n  tableElement.className = tableClassName;\n  tableElement.style.cssText = tableStyle;\n  tableElement.style.tableLayout = 'auto';\n\n  obj = Array.from(\n    tableElement.parentNode.querySelectorAll<HTMLElement>('thead th'),\n  ).reduce((prev, current) => {\n    prev[current.getAttribute('data-column-id')]['width'] = current.clientWidth;\n\n    return prev;\n  }, obj);\n\n  return obj;\n}\n", "export function camelCase(str: string): string {\n  if (!str) return '';\n\n  const words = str.split(' ');\n\n  // do not convert strings that are already in camelCase format\n  if (words.length === 1 && /([a-z][A-Z])+/g.test(str)) {\n    return str;\n  }\n\n  return words\n    .map(function (word, index) {\n      // if it is the first word, lowercase all the chars\n      if (index == 0) {\n        return word.toLowerCase();\n      }\n\n      // if it is not the first word only upper case the first char and lowercase the rest\n      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    })\n    .join('');\n}\n", "import { Fragment, FunctionComponent, h } from 'preact';\nimport { useConfig } from './hooks/useConfig';\nimport log from './util/log';\n\nexport enum PluginPosition {\n  Header,\n  Footer,\n  Cell,\n}\n\nexport interface Plugin<T extends FunctionComponent> {\n  id: string;\n  position: PluginPosition;\n  component: T;\n  order?: number;\n}\n\nexport class PluginManager {\n  private readonly plugins: Plugin<any>[];\n\n  constructor() {\n    this.plugins = [];\n  }\n\n  get<T extends FunctionComponent>(id: string): Plugin<T> | undefined {\n    return this.plugins.find((p) => p.id === id);\n  }\n\n  add<T extends FunctionComponent<any>>(plugin: Plugin<T>): this {\n    if (!plugin.id) {\n      log.error('Plugin ID cannot be empty');\n      return this;\n    }\n\n    if (this.get(plugin.id)) {\n      log.error(`Duplicate plugin ID: ${plugin.id}`);\n      return this;\n    }\n\n    this.plugins.push(plugin);\n    return this;\n  }\n\n  remove(id: string): this {\n    const plugin = this.get(id);\n\n    if (plugin) {\n      this.plugins.splice(this.plugins.indexOf(plugin), 1);\n    }\n\n    return this;\n  }\n\n  list<T extends FunctionComponent>(position?: PluginPosition): Plugin<T>[] {\n    let plugins: Plugin<T>[];\n\n    if (position != null || position != undefined) {\n      plugins = this.plugins.filter((p) => p.position === position);\n    } else {\n      plugins = this.plugins;\n    }\n\n    return plugins.sort((a, b) => (a.order && b.order ? a.order - b.order : 1));\n  }\n}\n\nexport function PluginRenderer(props: {\n  props?: any;\n  // to render a single plugin\n  pluginId?: string;\n  // to render all plugins in this PluginPosition\n  position?: PluginPosition;\n}) {\n  const config = useConfig();\n\n  if (props.pluginId) {\n    // render a single plugin\n    const plugin = config.plugin.get(props.pluginId);\n\n    if (!plugin) return null;\n\n    return h(\n      Fragment,\n      {},\n      h(plugin.component, {\n        plugin: plugin,\n        ...props.props,\n      }),\n    );\n  } else if (props.position !== undefined) {\n    // render using a specific plugin position\n    return h(\n      Fragment,\n      {},\n      config.plugin.list(props.position).map((p) => {\n        return h(p.component, { plugin: p, ...this.props.props });\n      }),\n    );\n  }\n\n  return null;\n}\n", "/**\n * Centralized logging lib\n *\n * This class needs some improvements but so far it has been used to have a coherent way to log\n */\nclass Logger {\n  private format(message: string, type: string): string {\n    return `[Grid.js] [${type.toUpperCase()}]: ${message}`;\n  }\n\n  error(message: string, throwException = false): void {\n    const msg = this.format(message, 'error');\n\n    if (throwException) {\n      throw Error(msg);\n    } else {\n      console.error(msg);\n    }\n  }\n\n  warn(message: string): void {\n    console.warn(this.format(message, 'warn'));\n  }\n\n  info(message: string): void {\n    console.info(this.format(message, 'info'));\n  }\n}\n\nexport default new Logger();\n", "import { OneDArray, TColumn, TwoDArray } from './types';\nimport Base from './base';\nimport { Config } from './config';\nimport { px, width } from './util/width';\nimport { getShadowTableWidths, ShadowTable } from './view/table/shadow';\nimport { ComponentChild, h, isValidElement, RefObject, render } from 'preact';\nimport { camelCase } from './util/string';\nimport { flatten } from './util/array';\nimport logger from './util/log';\nimport { PluginManager, PluginPosition } from './plugin';\nimport { GenericSortConfig } from './view/plugin/sort/sort';\n\nclass Header extends Base {\n  private _columns: OneDArray<TColumn>;\n\n  constructor() {\n    super();\n\n    this._columns = [];\n  }\n\n  get columns(): OneDArray<TColumn> {\n    return this._columns;\n  }\n\n  set columns(columns) {\n    this._columns = columns;\n  }\n\n  get visibleColumns(): OneDArray<TColumn> {\n    return this._columns.filter((c) => !c.hidden);\n  }\n\n  /**\n   * Tries to automatically adjust the width of columns based on:\n   *    - Header cell content\n   *    - Cell content of the first row\n   *    - Cell content of the last row\n   *\n   * @param config\n   */\n  adjustWidth(\n    config: Config,\n    tableRef: RefObject<HTMLTableElement>,\n    tempRef: RefObject<HTMLDivElement>,\n  ): this {\n    const container: Element = config.container;\n    const autoWidth = config.autoWidth;\n\n    if (!container) {\n      // we can't calculate the width because the container\n      // is unknown at this stage\n      return this;\n    }\n\n    // pixels\n    const containerWidth = container.clientWidth;\n\n    let widths = {};\n\n    if (tableRef.current && autoWidth) {\n      // let's create a shadow table with the first 10 rows of the data\n      // and let the browser to render the table with table-layout: auto\n      // no padding, margin or border to get the minimum space required\n      // to render columns. Once the table is rendered and widths are known,\n      // we unmount the shadow table from the DOM and set the correct width\n      render(\n        h(ShadowTable, {\n          tableRef: tableRef.current,\n        }),\n        tempRef.current,\n      );\n\n      widths = getShadowTableWidths(tempRef.current);\n    }\n\n    for (const column of flatten(Header.tabularFormat(this.columns))) {\n      // because we don't want to set the width of parent THs\n      if (column.columns && column.columns.length > 0) {\n        continue;\n      }\n\n      if (!column.width && autoWidth) {\n        // tries to find the corresponding cell\n        // from the ShadowTable and set the correct width\n\n        if (column.id in widths) {\n          // because a column can be hidden, too\n          column.width = px(widths[column.id]['width']);\n          column.minWidth = px(widths[column.id]['minWidth']);\n        }\n      } else {\n        // column width is already defined\n        // sets the column with based on the width of its container\n        column.width = px(width(column.width, containerWidth));\n      }\n    }\n\n    if (tableRef.current && autoWidth) {\n      // unmount the shadow table from temp\n      render(null, tempRef.current);\n    }\n\n    return this;\n  }\n\n  private setSort(\n    sortConfig: GenericSortConfig | boolean,\n    columns?: OneDArray<TColumn>,\n  ): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      // sorting can only be enabled for columns without any children\n      if (column.columns && column.columns.length > 0) {\n        column.sort = undefined;\n      } else if (column.sort === undefined && sortConfig) {\n        column.sort = {};\n      } else if (!column.sort) {\n        // false, null, etc.\n        column.sort = undefined;\n      } else if (typeof column.sort === 'object') {\n        column.sort = {\n          ...column.sort,\n        };\n      }\n\n      if (column.columns) {\n        this.setSort(sortConfig, column.columns);\n      }\n    }\n  }\n\n  private setResizable(resizable: boolean, columns?: OneDArray<TColumn>): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      if (column.resizable === undefined) {\n        column.resizable = resizable;\n      }\n\n      if (column.columns) {\n        this.setResizable(resizable, column.columns);\n      }\n    }\n  }\n\n  private setID(columns?: OneDArray<TColumn>): void {\n    const cols = columns || this.columns || [];\n\n    for (const column of cols) {\n      if (!column.id && typeof column.name === 'string') {\n        // let's guess the column ID if it's undefined\n        column.id = camelCase(column.name);\n      }\n\n      if (!column.id) {\n        logger.error(\n          `Could not find a valid ID for one of the columns. Make sure a valid \"id\" is set for all columns.`,\n        );\n      }\n\n      // nested columns\n      if (column.columns) {\n        this.setID(column.columns);\n      }\n    }\n  }\n\n  private populatePlugins(\n    pluginManager: PluginManager,\n    columns: OneDArray<TColumn>,\n  ): void {\n    // populate the cell columns\n    for (const column of columns) {\n      if (column.plugin !== undefined) {\n        pluginManager.add({\n          id: column.id,\n          ...column.plugin,\n          position: PluginPosition.Cell,\n        });\n      }\n    }\n  }\n\n  static fromColumns(\n    columns: OneDArray<TColumn | string | ComponentChild>,\n  ): Header {\n    const header = new Header();\n\n    for (const column of columns) {\n      if (typeof column === 'string' || isValidElement(column)) {\n        header.columns.push({\n          name: column,\n        });\n      } else if (typeof column === 'object') {\n        const typedColumn = column as TColumn;\n\n        if (typedColumn.columns) {\n          typedColumn.columns = Header.fromColumns(typedColumn.columns).columns;\n        }\n\n        // because the data for that cell is null\n        // if we are trying to render a plugin\n        if (typeof typedColumn.plugin === 'object') {\n          if (typedColumn.data === undefined) {\n            typedColumn.data = null;\n          }\n        }\n\n        // TColumn type\n        header.columns.push(column as TColumn);\n      }\n    }\n\n    return header;\n  }\n\n  static createFromConfig(config: Partial<Config>): Header | null {\n    const header = new Header();\n\n    // TODO: this part needs some refactoring\n    if (config.from) {\n      header.columns = Header.fromHTMLTable(config.from).columns;\n    } else if (config.columns) {\n      header.columns = Header.fromColumns(config.columns).columns;\n    } else if (\n      config.data &&\n      typeof config.data[0] === 'object' &&\n      !(config.data[0] instanceof Array)\n    ) {\n      // if data[0] is an object but not an Array\n      // used for when a JSON payload is provided\n      header.columns = Object.keys(config.data[0]).map((name) => {\n        return { name: name };\n      });\n    }\n\n    if (header.columns.length) {\n      header.setID();\n      header.setSort(config.sort);\n      header.setResizable(config.resizable);\n      header.populatePlugins(config.plugin, header.columns);\n      return header;\n    }\n\n    return null;\n  }\n\n  static fromHTMLTable(element: HTMLElement): Header {\n    const header = new Header();\n    const thead = element.querySelector('thead');\n    const ths = thead.querySelectorAll('th');\n\n    for (const th of ths as any) {\n      header.columns.push({\n        name: th.innerHTML,\n        width: th.width,\n      });\n    }\n\n    return header;\n  }\n\n  /**\n   * Converts the tree-like format of Header to a tabular format\n   *\n   * Example:\n   *\n   *    H1\n   *      H1-H1\n   *      H1-H2\n   *    H2\n   *      H2-H1\n   *\n   *    becomes:\n   *      [\n   *        [H1, H2],\n   *        [H1-H1, H1-H2, H2-H1]\n   *      ]\n   *\n   * @param columns\n   */\n  static tabularFormat(columns: OneDArray<TColumn>): TwoDArray<TColumn> {\n    let result: TwoDArray<TColumn> = [];\n    const cols = columns || [];\n    let nextRow = [];\n\n    if (cols && cols.length) {\n      result.push(cols);\n\n      for (const col of cols) {\n        if (col.columns && col.columns.length) {\n          nextRow = nextRow.concat(col.columns);\n        }\n      }\n\n      if (nextRow.length) {\n        result = result.concat(this.tabularFormat(nextRow));\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns an array of leaf columns (last columns in the tree)\n   *\n   * @param columns\n   */\n  static leafColumns(columns: OneDArray<TColumn>): OneDArray<TColumn> {\n    let result: OneDArray<TColumn> = [];\n    const cols = columns || [];\n\n    if (cols && cols.length) {\n      for (const col of cols) {\n        if (!col.columns || col.columns.length === 0) {\n          result.push(col);\n        }\n\n        if (col.columns) {\n          result = result.concat(this.leafColumns(col.columns));\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns the maximum depth of a column tree\n   * @param column\n   */\n  static maximumDepth(column: TColumn): number {\n    return this.tabularFormat([column]).length - 1;\n  }\n}\n\nexport default Header;\n", "/**\n * Base Storage class. All storage implementation must inherit this class\n */\nimport { TData } from '../types';\n\nabstract class Storage<I> {\n  /**\n   * Returns all rows based on ...args\n   * @param args\n   */\n  abstract get(...args): Promise<StorageResponse>;\n\n  /**\n   * To set all rows\n   *\n   * @param data\n   */\n  set?(data: I | ((...args) => void)): this;\n}\n\nexport interface StorageResponse {\n  data: TData;\n  total: number;\n}\n\nexport default Storage;\n", "import Storage, { StorageResponse } from './storage';\nimport { TData } from '../types';\n\nclass MemoryStorage extends Storage<TData> {\n  private data: (() => TData) | (() => Promise<TData>);\n\n  constructor(data: TData | (() => TData) | (() => Promise<TData>)) {\n    super();\n    this.set(data);\n  }\n\n  public async get(): Promise<StorageResponse> {\n    const data = await this.data();\n\n    return {\n      data: data,\n      total: data.length,\n    };\n  }\n\n  public set(data: TData | (() => TData) | (() => Promise<TData>)): this {\n    if (data instanceof Array) {\n      this.data = (): TData => data;\n    } else if (data instanceof Function) {\n      this.data = data;\n    }\n\n    return this;\n  }\n}\n\nexport default MemoryStorage;\n", "import Storage, { StorageResponse } from './storage';\nimport log from '../util/log';\n\nexport interface ServerStorageOptions extends RequestInit {\n  url: string;\n  // to format the data and columns\n  then?: (data: any) => any[][];\n  // to handle the response from the server. `handle` will\n  // be called first and then `then` callback will be invoked\n  // The purpose of this function is to handle the behaviour\n  // of server and either reject and resolve the initial response\n  // before calling the `then` function\n  handle?: (response: Response) => Promise<any>;\n  total?: (data: any) => number;\n  // to bypass the current implementation of ServerStorage and process the\n  // request manually (e.g. when user wants to connect their own SDK/HTTP Client)\n  data?: (opts: ServerStorageOptions) => Promise<StorageResponse>;\n}\n\nclass ServerStorage extends Storage<ServerStorageOptions> {\n  private readonly options: ServerStorageOptions;\n\n  constructor(options: ServerStorageOptions) {\n    super();\n    this.options = options;\n  }\n\n  private handler(response: Response): Promise<any> {\n    if (typeof this.options.handle === 'function') {\n      return this.options.handle(response);\n    }\n\n    if (response.ok) {\n      return response.json();\n    } else {\n      log.error(\n        `Could not fetch data: ${response.status} - ${response.statusText}`,\n        true,\n      );\n      return null;\n    }\n  }\n\n  public get(options?: ServerStorageOptions): Promise<StorageResponse> {\n    // this.options is the initial config object\n    // options is the runtime config passed by the pipeline (e.g. search component)\n    const opts = {\n      ...this.options,\n      ...options,\n    };\n\n    // if `options.data` is provided, the current ServerStorage\n    // implementation will be ignored and we let options.data to\n    // handle the request. Useful when HTTP client needs to be\n    // replaced with something else\n    if (typeof opts.data === 'function') {\n      return opts.data(opts);\n    }\n\n    return fetch(opts.url, opts)\n      .then(this.handler.bind(this))\n      .then((res) => {\n        return {\n          data: opts.then(res),\n          total: typeof opts.total === 'function' ? opts.total(res) : undefined,\n        };\n      });\n  }\n}\n\nexport default ServerStorage;\n", "import { Config } from '../config';\nimport MemoryStorage from './memory';\nimport Storage from './storage';\nimport ServerStorage from './server';\nimport log from '../util/log';\nimport { decode, html } from '../util/html';\n\nclass StorageUtils {\n  /**\n   * Accepts a Config object and tries to guess and return a Storage type\n   *\n   * @param config\n   */\n  public static createFromConfig(config: Config): Storage<any> {\n    let storage = null;\n    // `data` array is provided\n    if (config.data) {\n      storage = new MemoryStorage(config.data);\n    }\n\n    if (config.from) {\n      storage = new MemoryStorage(this.tableElementToArray(config.from));\n      // remove the source table element from the DOM\n      config.from.style.display = 'none';\n    }\n\n    if (config.server) {\n      storage = new ServerStorage(config.server);\n    }\n\n    if (!storage) {\n      log.error('Could not determine the storage type', true);\n    }\n\n    return storage;\n  }\n\n  /**\n   * Accepts a HTML table element and converts it into a 2D array of data\n   *\n   * TODO: This function can be a step in the pipeline: Convert Table -> Load into a memory storage -> ...\n   *\n   * @param element\n   */\n  static tableElementToArray(element: HTMLElement): any[][] {\n    const arr = [];\n    const tbody = element.querySelector('tbody');\n    const rows = tbody.querySelectorAll('tr');\n\n    for (const row of rows as any) {\n      const cells: HTMLElement[] = row.querySelectorAll('td');\n      const parsedRow = [];\n\n      for (const cell of cells) {\n        // try to capture a TD with single text element first\n        if (\n          cell.childNodes.length === 1 &&\n          cell.childNodes[0].nodeType === Node.TEXT_NODE\n        ) {\n          parsedRow.push(decode(cell.innerHTML));\n        } else {\n          parsedRow.push(html(cell.innerHTML));\n        }\n      }\n\n      arr.push(parsedRow);\n    }\n\n    return arr;\n  }\n}\n\nexport default StorageUtils;\n", "import { PipelineProcessor, ProcessorType } from './processor';\nimport { ID } from '../util/id';\nimport log from '../util/log';\nimport { EventEmitter } from '../util/eventEmitter';\n\ninterface PipelineEvents<R> {\n  /**\n   * Generic updated event. Triggers the callback function when the pipeline\n   * is updated, including when a new processor is registered, a processor's props\n   * get updated, etc.\n   */\n  updated: <T, P>(processor: PipelineProcessor<T, P>) => void;\n  /**\n   * Triggers the callback function when a new\n   * processor is registered successfully\n   */\n  afterRegister: () => void;\n  /**\n   * Triggers the callback when a registered\n   * processor's property is updated\n   */\n  propsUpdated: () => void;\n  /**\n   * Triggers the callback function when the pipeline\n   * is fully processed, before returning the results\n   *\n   * afterProcess will not be called if there is an\n   * error in the pipeline (i.e a step throw an Error)\n   */\n  afterProcess: (prev: R) => void;\n  /**\n   * Triggers the callback function when the pipeline\n   * fails to process all steps or at least one step\n   * throws an Error\n   */\n  error: <T>(prev: T) => void;\n}\n\nclass Pipeline<R> extends EventEmitter<PipelineEvents<R>> {\n  // available steps for this pipeline\n  private readonly _steps: Map<\n    ProcessorType,\n    PipelineProcessor<unknown, unknown>[]\n  > = new Map<ProcessorType, PipelineProcessor<unknown, unknown>[]>();\n  // used to cache the results of processors using their id field\n  private cache: Map<string, unknown> = new Map<string, unknown>();\n  // keeps the index of the last updated processor in the registered\n  // processors list and will be used to invalidate the cache\n  // -1 means all new processors should be processed\n  private lastProcessorIndexUpdated = -1;\n\n  constructor(steps?: PipelineProcessor<unknown, unknown>[]) {\n    super();\n\n    if (steps) {\n      steps.forEach((step) => this.register(step));\n    }\n  }\n\n  /**\n   * Clears the `cache` array\n   */\n  clearCache(): void {\n    this.cache = new Map<string, object>();\n    this.lastProcessorIndexUpdated = -1;\n  }\n\n  /**\n   * Registers a new processor\n   *\n   * @param processor\n   * @param priority\n   */\n  register<T, P>(\n    processor: PipelineProcessor<T, P>,\n    priority: number = null,\n  ): PipelineProcessor<T, P> {\n    if (!processor) {\n      throw Error('Processor is not defined');\n    }\n\n    if (processor.type === null) {\n      throw Error('Processor type is not defined');\n    }\n\n    if (this.findProcessorIndexByID(processor.id) > -1) {\n      throw Error(`Processor ID ${processor.id} is already defined`);\n    }\n\n    // binding the propsUpdated callback to the Pipeline\n    processor.on('propsUpdated', this.processorPropsUpdated.bind(this));\n\n    this.addProcessorByPriority(processor, priority);\n    this.afterRegistered(processor);\n\n    return processor;\n  }\n\n  /**\n   * Tries to register a new processor\n   * @param processor\n   * @param priority\n   */\n  tryRegister<T, P>(\n    processor: PipelineProcessor<T, P>,\n    priority: number = null,\n  ): PipelineProcessor<T, P> | undefined {\n    try {\n      return this.register(processor, priority);\n    } catch (_) {\n      // noop\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Removes a processor from the list\n   *\n   * @param processor\n   */\n  unregister<T, P>(processor: PipelineProcessor<T, P>): void {\n    if (!processor) return;\n    if (this.findProcessorIndexByID(processor.id) === -1) return;\n\n    const subSteps = this._steps.get(processor.type);\n\n    if (subSteps && subSteps.length) {\n      this._steps.set(\n        processor.type,\n        subSteps.filter((proc) => proc != processor),\n      );\n      this.emit('updated', processor);\n    }\n  }\n\n  /**\n   * Registers a new processor\n   *\n   * @param processor\n   * @param priority\n   */\n  private addProcessorByPriority<T, P>(\n    processor: PipelineProcessor<T, P>,\n    priority: number,\n  ): void {\n    let subSteps = this._steps.get(processor.type);\n\n    if (!subSteps) {\n      const newSubStep = [];\n      this._steps.set(processor.type, newSubStep);\n      subSteps = newSubStep;\n    }\n\n    if (priority === null || priority < 0) {\n      subSteps.push(processor);\n    } else {\n      if (!subSteps[priority]) {\n        // slot is empty\n        subSteps[priority] = processor;\n      } else {\n        // slot is NOT empty\n        const first = subSteps.slice(0, priority - 1);\n        const second = subSteps.slice(priority + 1);\n\n        this._steps.set(processor.type, first.concat(processor).concat(second));\n      }\n    }\n  }\n\n  /**\n   * Flattens the _steps Map and returns a list of steps with their correct priorities\n   */\n  get steps(): PipelineProcessor<unknown, unknown>[] {\n    let steps: PipelineProcessor<unknown, unknown>[] = [];\n\n    for (const type of this.getSortedProcessorTypes()) {\n      const subSteps = this._steps.get(type);\n\n      if (subSteps && subSteps.length) {\n        steps = steps.concat(subSteps);\n      }\n    }\n\n    // to remove any undefined elements\n    return steps.filter((s) => s);\n  }\n\n  /**\n   * Accepts ProcessType and returns an array of the registered processes\n   * with the give type\n   *\n   * @param type\n   */\n  getStepsByType(type: ProcessorType): PipelineProcessor<unknown, unknown>[] {\n    return this.steps.filter((process) => process.type === type);\n  }\n\n  /**\n   * Returns a list of ProcessorType according to their priority\n   */\n  private getSortedProcessorTypes(): ProcessorType[] {\n    return Object.keys(ProcessorType)\n      .filter((key) => !isNaN(Number(key)))\n      .map((key) => Number(key));\n  }\n\n  /**\n   * Runs all registered processors based on their correct priority\n   * and returns the final output after running all steps\n   *\n   * @param data\n   */\n  async process(data?: R): Promise<R> {\n    const lastProcessorIndexUpdated = this.lastProcessorIndexUpdated;\n    const steps = this.steps;\n\n    let prev = data;\n\n    try {\n      for (const processor of steps) {\n        const processorIndex = this.findProcessorIndexByID(processor.id);\n\n        if (processorIndex >= lastProcessorIndexUpdated) {\n          // we should execute process() here since the last\n          // updated processor was before \"processor\".\n          // This is to ensure that we always have correct and up to date\n          // data from processors and also to skip them when necessary\n          prev = (await processor.process(prev)) as R;\n          this.cache.set(processor.id, prev);\n        } else {\n          // cached results already exist\n          prev = this.cache.get(processor.id) as R;\n        }\n      }\n    } catch (e) {\n      log.error(e);\n      // trigger the onError callback\n      this.emit('error', prev);\n\n      // rethrow\n      throw e;\n    }\n\n    // means the pipeline is up to date\n    this.lastProcessorIndexUpdated = steps.length;\n\n    // triggers the afterProcess callbacks with the results\n    this.emit('afterProcess', prev);\n\n    return prev;\n  }\n\n  /**\n   * Returns the registered processor's index in _steps array\n   *\n   * @param processorID\n   */\n  private findProcessorIndexByID(processorID: ID): number {\n    return this.steps.findIndex((p) => p.id == processorID);\n  }\n\n  /**\n   * Sets the last updates processors index locally\n   * This is used to invalid or skip a processor in\n   * the process() method\n   */\n  private setLastProcessorIndex<T, P>(\n    processor: PipelineProcessor<T, P>,\n  ): void {\n    const processorIndex = this.findProcessorIndexByID(processor.id);\n\n    if (this.lastProcessorIndexUpdated > processorIndex) {\n      this.lastProcessorIndexUpdated = processorIndex;\n    }\n  }\n\n  private processorPropsUpdated(processor): void {\n    this.setLastProcessorIndex(processor);\n    this.emit('propsUpdated');\n    this.emit('updated', processor);\n  }\n\n  private afterRegistered(processor): void {\n    this.setLastProcessorIndex(processor);\n    this.emit('afterRegister');\n    this.emit('updated', processor);\n  }\n}\n\nexport default Pipeline;\n", "import Storage, { StorageResponse } from '../../storage/storage';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\n\ninterface StorageExtractorProps extends PipelineProcessorProps {\n  storage: Storage<any>;\n}\n\nclass StorageExtractor extends PipelineProcessor<\n  StorageResponse,\n  StorageExtractorProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Extractor;\n  }\n\n  async _process(opts: any): Promise<StorageResponse> {\n    return await this.props.storage.get(opts);\n  }\n}\n\nexport default StorageExtractor;\n", "import { PipelineProcessor, ProcessorType } from '../processor';\nimport Tabular from '../../tabular';\nimport { ArrayResponse } from './storageResponseToArray';\n\nclass ArrayToTabularTransformer extends PipelineProcessor<\n  Tabular,\n  Record<string, any>\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Transformer;\n  }\n\n  _process(arrayResponse: ArrayResponse): Tabular {\n    const tabular = Tabular.fromArray(arrayResponse.data);\n\n    // for server-side storage\n    tabular.length = arrayResponse.total;\n\n    return tabular;\n  }\n}\n\nexport default ArrayToTabularTransformer;\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\n\ninterface ServerInitiatorProps extends PipelineProcessorProps {\n  serverStorageOptions: ServerStorageOptions;\n}\n\nclass ServerInitiator extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerInitiatorProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Initiator;\n  }\n\n  _process(): ServerStorageOptions {\n    return Object.entries(this.props.serverStorageOptions)\n      .filter(([_, val]) => typeof val !== 'function')\n      .reduce(\n        (acc, [k, v]) => ({ ...acc, [k]: v }),\n        {},\n      ) as ServerStorageOptions;\n  }\n}\n\nexport default ServerInitiator;\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { StorageResponse } from '../../storage/storage';\nimport { TCell, TData, TDataArray, TDataObject, TwoDArray } from '../../types';\nimport Header from '../../header';\nimport logger from '../../util/log';\n\nexport interface ArrayResponse {\n  data: TwoDArray<TCell>;\n  total: number;\n}\n\ninterface StorageResponseToArrayTransformerProps\n  extends PipelineProcessorProps {\n  header: Header;\n}\n\nclass StorageResponseToArrayTransformer extends PipelineProcessor<\n  ArrayResponse,\n  StorageResponseToArrayTransformerProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.Transformer;\n  }\n\n  private castData(data: TData): TwoDArray<TCell> {\n    if (!data || !data.length) {\n      return [];\n    }\n\n    if (!this.props.header || !this.props.header.columns) {\n      return data as TwoDArray<TCell>;\n    }\n\n    const columns = Header.leafColumns(this.props.header.columns);\n\n    // if it's a 2d array already\n    if (data[0] instanceof Array) {\n      return (data as TDataArray).map((row) => {\n        let pad = 0;\n\n        return columns.map((column, i) => {\n          // default `data` is provided for this column\n          if (column.data !== undefined) {\n            pad++;\n\n            if (typeof column.data === 'function') {\n              return column.data(row);\n            } else {\n              return column.data;\n            }\n          }\n\n          return row[i - pad];\n        });\n      });\n    }\n\n    // if it's an array of objects (but not array of arrays, i.e JSON payload)\n    if (typeof data[0] === 'object' && !(data[0] instanceof Array)) {\n      return (data as TDataObject).map((row) =>\n        columns.map((column, i) => {\n          if (column.data !== undefined) {\n            if (typeof column.data === 'function') {\n              return column.data(row);\n            } else {\n              return column.data;\n            }\n          } else if (column.id) {\n            return row[column.id];\n          } else {\n            logger.error(`Could not find the correct cell for column at position ${i}.\n                          Make sure either 'id' or 'selector' is defined for all columns.`);\n            return null;\n          }\n        }),\n      );\n    }\n\n    return [];\n  }\n\n  _process(storageResponse: StorageResponse): ArrayResponse {\n    return {\n      data: this.castData(storageResponse.data),\n      total: storageResponse.total,\n    };\n  }\n}\n\nexport default StorageResponseToArrayTransformer;\n", "import { Config } from '../config';\nimport Pipeline from './pipeline';\nimport Tabular from '../tabular';\nimport StorageExtractor from './extractor/storage';\nimport ArrayToTabularTransformer from './transformer/arrayToTabular';\nimport ServerStorage from '../storage/server';\nimport ServerInitiator from './initiator/server';\nimport StorageResponseToArrayTransformer from './transformer/storageResponseToArray';\n\nclass PipelineUtils {\n  static createFromConfig(config: Config): Pipeline<Tabular> {\n    const pipeline = new Pipeline<Tabular>();\n\n    if (config.storage instanceof ServerStorage) {\n      pipeline.register(\n        new ServerInitiator({\n          serverStorageOptions: config.server,\n        }),\n      );\n    }\n\n    pipeline.register(new StorageExtractor({ storage: config.storage }));\n    pipeline.register(\n      new StorageResponseToArrayTransformer({ header: config.header }),\n    );\n    pipeline.register(new ArrayToTabularTransformer());\n\n    return pipeline;\n  }\n}\n\nexport default PipelineUtils;\n", "export class Store<S = Record<string, unknown>> {\n  private state: S;\n  private listeners: ((current?: S, prev?: S) => void)[] = [];\n  private isDispatching = false;\n\n  constructor(initialState: S) {\n    this.state = initialState;\n  }\n\n  getState = () => this.state;\n  getListeners = () => this.listeners;\n\n  dispatch = (reducer: (state: S) => S) => {\n    if (typeof reducer !== 'function')\n      throw new Error('Reducer is not a function');\n    if (this.isDispatching)\n      throw new Error('Reducers may not dispatch actions');\n\n    this.isDispatching = true;\n\n    const prevState = this.state;\n    try {\n      this.state = reducer(this.state);\n    } finally {\n      this.isDispatching = false;\n    }\n\n    for (const listener of this.listeners) {\n      listener(this.state, prevState);\n    }\n\n    return this.state;\n  };\n\n  subscribe = (listener: (current?: S, prev?: S) => void): (() => void) => {\n    if (typeof listener !== 'function')\n      throw new Error('Listener is not a function');\n\n    this.listeners = [...this.listeners, listener];\n    return () =>\n      (this.listeners = this.listeners.filter((lis) => lis !== listener));\n  };\n}\n", "import { CSSDeclaration, OneDArray, Status, TColumn, TData } from './types';\nimport Storage from './storage/storage';\nimport Pipeline from './pipeline/pipeline';\nimport Tabular from './tabular';\nimport { Search, SearchConfig } from './view/plugin/search/search';\nimport { Pagination, PaginationConfig } from './view/plugin/pagination';\nimport Header from './header';\nimport { ServerStorageOptions } from './storage/server';\nimport { GenericSortConfig } from './view/plugin/sort/sort';\nimport { Language, Translator } from './i18n/language';\nimport { ComponentChild, createContext, createRef, RefObject } from 'preact';\nimport StorageUtils from './storage/storageUtils';\nimport PipelineUtils from './pipeline/pipelineUtils';\nimport { EventEmitter } from './util/eventEmitter';\nimport { GridEvents } from './events';\nimport { PluginManager, PluginPosition, Plugin } from './plugin';\nimport Grid from './grid';\nimport { Store } from './state/store';\n\nexport const ConfigContext = createContext(null);\n\nexport interface Config {\n  // a reference to the current Grid.js instance\n  instance: Grid;\n  store: Store;\n  eventEmitter: EventEmitter<GridEvents>;\n  plugin: PluginManager;\n  /** container element that is used to mount the Grid.js to */\n  // TODO: change this to an element reference\n  container?: Element;\n  /** pointer to the main table element */\n  tableRef?: RefObject<HTMLTableElement>;\n  data?: TData | (() => TData) | (() => Promise<TData>);\n  server?: ServerStorageOptions;\n  header?: Header;\n  /** to parse a HTML table and load the data */\n  from: HTMLElement;\n  storage: Storage<any>;\n  /** Pipeline process throttle timeout in milliseconds */\n  processingThrottleMs: number;\n  pipeline: Pipeline<Tabular>;\n  /** to automatically calculate the columns width */\n  autoWidth: boolean;\n  /** sets the width of the container and table */\n  width: string;\n  /** sets the height of the table */\n  height: string;\n  pagination: PaginationConfig | boolean;\n  sort: GenericSortConfig | boolean;\n  translator: Translator;\n  /** fixes the table header to the top of the table */\n  fixedHeader: boolean;\n  /** Resizable columns? */\n  resizable: boolean;\n  columns: OneDArray<TColumn | string | ComponentChild>;\n  search: SearchConfig | boolean;\n  language: Language;\n  plugins?: Plugin<any>[];\n  style?: Partial<{\n    table: CSSDeclaration;\n    td: CSSDeclaration;\n    th: CSSDeclaration;\n    container: CSSDeclaration;\n    header: CSSDeclaration;\n    footer: CSSDeclaration;\n  }>;\n  className?: Partial<{\n    table: string;\n    th: string;\n    thead: string;\n    tbody: string;\n    tr: string;\n    td: string;\n    container: string;\n    footer: string;\n    header: string;\n    search: string;\n    sort: string;\n    pagination: string;\n    paginationSummary: string;\n    paginationButton: string;\n    paginationButtonNext: string;\n    paginationButtonCurrent: string;\n    paginationButtonPrev: string;\n    loading: string;\n    notfound: string;\n    error: string;\n  }>;\n}\n\nexport class Config {\n  public constructor() {\n    Object.assign(this, Config.defaultConfig());\n  }\n  /**\n   * Assigns `updatedConfig` keys to the current config file\n   *\n   * @param partialConfig\n   */\n  assign(partialConfig: Partial<Config>): Config {\n    return Object.assign(this, partialConfig);\n  }\n\n  /**\n   * Updates the config from a partial Config\n   *\n   * @param partialConfig\n   */\n  update(partialConfig: Partial<Config>): Config {\n    if (!partialConfig) return this;\n\n    this.assign(\n      Config.fromPartialConfig({\n        ...this,\n        ...partialConfig,\n      }),\n    );\n\n    return this;\n  }\n\n  static defaultConfig(): Partial<Config> {\n    return {\n      store: new Store({\n        status: Status.Init,\n        header: undefined,\n        data: null,\n      }),\n      plugin: new PluginManager(),\n      tableRef: createRef(),\n      width: '100%',\n      height: 'auto',\n      processingThrottleMs: 100,\n      autoWidth: true,\n      style: {},\n      className: {},\n    };\n  }\n\n  static fromPartialConfig(partialConfig: Partial<Config>): Partial<Config> {\n    const config = new Config().assign(partialConfig);\n\n    // Sort\n    if (typeof partialConfig.sort === 'boolean' && partialConfig.sort) {\n      config.assign({\n        sort: {\n          multiColumn: true,\n        },\n      });\n    }\n\n    // Header\n    config.assign({\n      header: Header.createFromConfig(config),\n    });\n\n    config.assign({\n      storage: StorageUtils.createFromConfig(config),\n    });\n\n    config.assign({\n      pipeline: PipelineUtils.createFromConfig(config),\n    });\n\n    // Translator\n    config.assign({\n      translator: new Translator(config.language),\n    });\n\n    // clear existing plugins list to prevent duplicate errors\n    config.plugin = new PluginManager();\n\n    if (config.search) {\n      // Search\n      config.plugin.add({\n        id: 'search',\n        position: PluginPosition.Header,\n        component: Search,\n      });\n    }\n\n    if (config.pagination) {\n      // Pagination\n      config.plugin.add({\n        id: 'pagination',\n        position: PluginPosition.Footer,\n        component: Pagination,\n      });\n    }\n\n    // Additional plugins\n    if (config.plugins) {\n      config.plugins.forEach((p) => config.plugin.add(p));\n    }\n\n    return config;\n  }\n}\n", "import { h, ComponentChild, JSX } from 'preact';\n\nimport Cell from '../../cell';\nimport { classJoin, className } from '../../util/className';\nimport { CSSDeclaration, TColumn } from '../../types';\nimport Row from '../../row';\nimport { JSXInternal } from 'preact/src/jsx';\nimport { PluginRenderer } from '../../plugin';\nimport { useConfig } from '../../hooks/useConfig';\n\nexport function TD(\n  props: {\n    cell: Cell;\n    row?: Row;\n    column?: TColumn;\n    style?: CSSDeclaration;\n    messageCell?: boolean;\n  } & Omit<JSX.HTMLAttributes<HTMLTableCellElement>, 'style'>,\n) {\n  const config = useConfig();\n\n  const content = (): ComponentChild => {\n    if (props.column && typeof props.column.formatter === 'function') {\n      return props.column.formatter(props.cell.data, props.row, props.column);\n    }\n\n    if (props.column && props.column.plugin) {\n      return (\n        <PluginRenderer\n          pluginId={props.column.id}\n          props={{\n            column: props.column,\n            cell: props.cell,\n            row: props.row,\n          }}\n        />\n      );\n    }\n\n    return props.cell.data;\n  };\n\n  const handleClick = (\n    e: JSX.TargetedMouseEvent<HTMLTableCellElement>,\n  ): void => {\n    if (props.messageCell) return;\n\n    config.eventEmitter.emit(\n      'cellClick',\n      e,\n      props.cell,\n      props.column,\n      props.row,\n    );\n  };\n\n  const getCustomAttributes = (\n    column: TColumn | null,\n  ): JSXInternal.HTMLAttributes<HTMLTableCellElement> => {\n    if (!column) return {};\n\n    if (typeof column.attributes === 'function') {\n      return column.attributes(props.cell.data, props.row, props.column);\n    } else {\n      return column.attributes;\n    }\n  };\n\n  return (\n    <td\n      role={props.role}\n      colSpan={props.colSpan}\n      data-column-id={props.column && props.column.id}\n      className={classJoin(\n        className('td'),\n        props.className,\n        config.className.td,\n      )}\n      style={{\n        ...props.style,\n        ...config.style.td,\n      }}\n      onClick={handleClick}\n      {...getCustomAttributes(props.column)}\n    >\n      {content()}\n    </td>\n  );\n}\n", "import { h, JSX, ComponentChildren } from 'preact';\n\nimport Row from '../../row';\nimport Cell from '../../cell';\nimport { classJoin, className } from '../../util/className';\nimport { TColumn } from '../../types';\nimport { TD } from './td';\nimport Header from '../../header';\nimport { useConfig } from '../../hooks/useConfig';\nimport useSelector from '../../hooks/useSelector';\n\nexport function TR(props: {\n  row?: Row;\n  messageRow?: boolean;\n  children?: ComponentChildren;\n}) {\n  const config = useConfig();\n  const header = useSelector((state) => state.header);\n\n  const getColumn = (cellIndex: number): TColumn => {\n    if (header) {\n      const cols = Header.leafColumns(header.columns);\n\n      if (cols) {\n        return cols[cellIndex];\n      }\n    }\n\n    return null;\n  };\n\n  const handleClick = (\n    e: JSX.TargetedMouseEvent<HTMLTableRowElement>,\n  ): void => {\n    if (props.messageRow) return;\n    config.eventEmitter.emit('rowClick', e, props.row);\n  };\n\n  const getChildren = (): ComponentChildren => {\n    if (props.children) {\n      return props.children;\n    }\n\n    return props.row.cells.map((cell: Cell, i) => {\n      const column = getColumn(i);\n\n      if (column && column.hidden) return null;\n\n      return <TD key={cell.id} cell={cell} row={props.row} column={column} />;\n    });\n  };\n\n  return (\n    <tr\n      className={classJoin(className('tr'), config.className.tr)}\n      onClick={handleClick}\n    >\n      {getChildren()}\n    </tr>\n  );\n}\n", "import { h } from 'preact';\nimport Cell from '../../cell';\nimport { classJoin, className } from '../../util/className';\nimport { TR } from './tr';\nimport { TD } from './td';\n\nexport function MessageRow(props: {\n  message: string;\n  colSpan?: number;\n  className?: string;\n}) {\n  return (\n    <TR messageRow={true}>\n      <TD\n        role=\"alert\"\n        colSpan={props.colSpan}\n        messageCell={true}\n        cell={new Cell(props.message)}\n        className={classJoin(\n          className('message'),\n          props.className ? props.className : null,\n        )}\n      />\n    </TR>\n  );\n}\n", "import { h } from 'preact';\nimport Row from '../../row';\nimport { TR } from './tr';\nimport { classJoin, className } from '../../util/className';\nimport { Status } from '../../types';\nimport { MessageRow } from './messageRow';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useTranslator } from '../../i18n/language';\nimport useSelector from '../../hooks/useSelector';\n\nexport function TBody() {\n  const config = useConfig();\n  const data = useSelector((state) => state.data);\n  const status = useSelector((state) => state.status);\n  const header = useSelector((state) => state.header);\n  const _ = useTranslator();\n\n  const headerLength = () => {\n    if (header) {\n      return header.visibleColumns.length;\n    }\n    return 0;\n  };\n\n  return (\n    <tbody className={classJoin(className('tbody'), config.className.tbody)}>\n      {data &&\n        data.rows.map((row: Row) => {\n          return <TR key={row.id} row={row} />;\n        })}\n\n      {status === Status.Loading && (!data || data.length === 0) && (\n        <MessageRow\n          message={_('loading')}\n          colSpan={headerLength()}\n          className={classJoin(className('loading'), config.className.loading)}\n        />\n      )}\n\n      {status === Status.Rendered && data && data.length === 0 && (\n        <MessageRow\n          message={_('noRecordsFound')}\n          colSpan={headerLength()}\n          className={classJoin(\n            className('notfound'),\n            config.className.notfound,\n          )}\n        />\n      )}\n\n      {status === Status.Error && (\n        <MessageRow\n          message={_('error')}\n          colSpan={headerLength()}\n          className={classJoin(className('error'), config.className.error)}\n        />\n      )}\n    </tbody>\n  );\n}\n", "import { Comparator, TCell } from '../../types';\nimport Tabular from '../../tabular';\nimport {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport Row from '../../row';\nimport log from '../../util/log';\n\ninterface NativeSortProps extends PipelineProcessorProps {\n  columns: {\n    index: number;\n    // 1 ascending, -1 descending\n    direction?: 1 | -1;\n    compare?: Comparator<TCell>;\n  }[];\n}\n\nclass NativeSort extends PipelineProcessor<Tabular, NativeSortProps> {\n  protected validateProps(): void {\n    for (const condition of this.props.columns) {\n      if (condition.direction === undefined) {\n        condition.direction = 1;\n      }\n\n      if (condition.direction !== 1 && condition.direction !== -1) {\n        log.error(`Invalid sort direction ${condition.direction}`);\n      }\n    }\n  }\n\n  get type(): ProcessorType {\n    return ProcessorType.Sort;\n  }\n\n  private compare(cellA: TCell, cellB: TCell): number {\n    if (cellA > cellB) {\n      return 1;\n    } else if (cellA < cellB) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  private compareWrapper(a: Row, b: Row): number {\n    let cmp = 0;\n\n    for (const column of this.props.columns) {\n      if (cmp === 0) {\n        const cellA = a.cells[column.index].data;\n        const cellB = b.cells[column.index].data;\n\n        if (typeof column.compare === 'function') {\n          cmp |= column.compare(cellA, cellB) * column.direction;\n        } else {\n          cmp |= this.compare(cellA, cellB) * column.direction;\n        }\n      } else {\n        break;\n      }\n    }\n\n    return cmp;\n  }\n\n  protected _process(data: Tabular): Tabular {\n    const sortedRows = [...data.rows];\n    sortedRows.sort(this.compareWrapper.bind(this));\n\n    const sorted = new Tabular(sortedRows);\n    // we have to set the tabular length manually\n    // because of the server-side storage\n    sorted.length = data.length;\n\n    return sorted;\n  }\n}\n\nexport default NativeSort;\n", "import { Comparator, TCell } from '../../../types';\n\nexport const SortColumn =\n  (\n    index: number,\n    direction: 1 | -1,\n    multi?: boolean,\n    compare?: Comparator<TCell>,\n  ) =>\n  (state) => {\n    let columns = state.sort?.columns\n      ? state.sort.columns.map((x) => {\n          return { ...x };\n        })\n      : [];\n    const count = columns.length;\n    const column = columns.find((x) => x.index === index);\n    const exists = column !== undefined;\n\n    let add = false;\n    let reset = false;\n    let remove = false;\n    let update = false;\n\n    if (!exists) {\n      // the column has not been sorted\n      if (count === 0) {\n        // the first column to be sorted\n        add = true;\n      } else if (count > 0 && !multi) {\n        // remove the previously sorted column\n        // and sort the current column\n        add = true;\n        reset = true;\n      } else if (count > 0 && multi) {\n        // multi-sorting\n        // sort this column as well\n        add = true;\n      }\n    } else {\n      // the column has been sorted before\n      if (!multi) {\n        // single column sorting\n        if (count === 1) {\n          update = true;\n        } else if (count > 1) {\n          // this situation happens when we have already entered\n          // multi-sorting mode but then user tries to sort a single column\n          reset = true;\n          add = true;\n        }\n      } else {\n        // multi sorting\n        if (column.direction === -1) {\n          // remove the current column from the\n          // sorted columns array\n          remove = true;\n        } else {\n          update = true;\n        }\n      }\n    }\n\n    if (reset) {\n      // resetting the sorted columns\n      columns = [];\n    }\n\n    if (add) {\n      columns.push({\n        index: index,\n        direction: direction,\n        compare: compare,\n      });\n    } else if (update) {\n      const index = columns.indexOf(column);\n      columns[index].direction = direction;\n    } else if (remove) {\n      const index = columns.indexOf(column);\n      columns.splice(index, 1);\n    }\n\n    return {\n      ...state,\n      sort: {\n        columns: columns,\n      },\n    };\n  };\n\nexport const SortToggle =\n  (index: number, multi: boolean, compare?: Comparator<TCell>) => (state) => {\n    const columns = state.sort ? [...state.sort.columns] : [];\n    const column = columns.find((x) => x.index === index);\n\n    if (!column) {\n      return {\n        ...state,\n        ...SortColumn(index, 1, multi, compare)(state),\n      };\n    }\n\n    return {\n      ...state,\n      ...SortColumn(\n        index,\n        column.direction === 1 ? -1 : 1,\n        multi,\n        compare,\n      )(state),\n    };\n  };\n", "import {\n  PipelineProcessor,\n  PipelineProcessorProps,\n  ProcessorType,\n} from '../processor';\nimport { ServerStorageOptions } from '../../storage/server';\nimport { TColumnSort } from '../../types';\n\ninterface ServerSortProps extends PipelineProcessorProps {\n  columns: TColumnSort[];\n  url?: (prevUrl: string, columns: TColumnSort[]) => string;\n  body?: (prevBody: BodyInit, columns: TColumnSort[]) => BodyInit;\n}\n\nclass ServerSort extends PipelineProcessor<\n  ServerStorageOptions,\n  ServerSortProps\n> {\n  get type(): ProcessorType {\n    return ProcessorType.ServerSort;\n  }\n\n  _process(options?: ServerStorageOptions): ServerStorageOptions {\n    const updates = {};\n\n    if (this.props.url) {\n      updates['url'] = this.props.url(options.url, this.props.columns);\n    }\n\n    if (this.props.body) {\n      updates['body'] = this.props.body(options.body, this.props.columns);\n    }\n\n    return {\n      ...options,\n      ...updates,\n    };\n  }\n}\n\nexport default ServerSort;\n", "import { h, JSX } from 'preact';\n\nimport { classJoin, className } from '../../../util/className';\nimport { PipelineProcessor, ProcessorType } from '../../../pipeline/processor';\nimport NativeSort from '../../../pipeline/sort/native';\nimport { Comparator, TCell, TColumnSort } from '../../../types';\nimport * as actions from './actions';\nimport ServerSort from '../../../pipeline/sort/server';\nimport { useEffect, useState } from 'preact/hooks';\nimport { useConfig } from '../../../hooks/useConfig';\nimport { useTranslator } from '../../../i18n/language';\nimport useSelector from '../../../hooks/useSelector';\nimport { useStore } from '../../../hooks/useStore';\n\n// column specific config\nexport interface SortConfig {\n  compare?: Comparator<TCell>;\n  // 1 ascending, -1 descending\n  direction?: 1 | -1;\n}\n\n// generic sort config:\n//\n// Config {\n//    sort: GenericSortConfig\n// }\n//\nexport interface GenericSortConfig {\n  multiColumn?: boolean;\n  server?: {\n    url?: (prevUrl: string, columns: TColumnSort[]) => string;\n    body?: (prevBody: BodyInit, columns: TColumnSort[]) => BodyInit;\n  };\n}\n\nexport function Sort(\n  props: {\n    // column index\n    index: number;\n  } & SortConfig,\n) {\n  const config = useConfig();\n  const { dispatch } = useStore();\n  const _ = useTranslator();\n  const [direction, setDirection] = useState(0);\n  const sortConfig = config.sort as GenericSortConfig;\n  const state = useSelector((state) => state.sort);\n  const processorType =\n    typeof sortConfig?.server === 'object'\n      ? ProcessorType.ServerSort\n      : ProcessorType.Sort;\n\n  const getSortProcessor = () => {\n    const processors = config.pipeline.getStepsByType(processorType);\n    if (processors.length) {\n      return processors[0];\n    }\n    return undefined;\n  };\n\n  const createSortProcessor = () => {\n    if (processorType === ProcessorType.ServerSort) {\n      return new ServerSort({\n        columns: state ? state.columns : [],\n        ...sortConfig.server,\n      });\n    }\n\n    return new NativeSort({\n      columns: state ? state.columns : [],\n    });\n  };\n\n  const getOrCreateSortProcessor = (): PipelineProcessor<any, any> => {\n    const existingSortProcessor = getSortProcessor();\n    if (existingSortProcessor) {\n      return existingSortProcessor;\n    }\n\n    return createSortProcessor();\n  };\n\n  useEffect(() => {\n    const processor = getOrCreateSortProcessor();\n    config.pipeline.tryRegister(processor);\n\n    return () => config.pipeline.unregister(processor);\n  }, [config]);\n\n  /**\n   * Sets the internal state of component\n   */\n  useEffect(() => {\n    if (!state) return;\n\n    const currentColumn = state.columns.find((x) => x.index === props.index);\n\n    if (!currentColumn) {\n      setDirection(0);\n    } else {\n      // if the direction is not set, initialize the selected\n      // column direction with the passed prop (default to ascending)\n      if (direction === 0) {\n        currentColumn.direction = props.direction ?? 1;\n      }\n      setDirection(currentColumn.direction);\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const processor = getSortProcessor();\n\n    if (!processor) return;\n    if (!state) return;\n\n    processor.setProps({\n      columns: state.columns,\n    });\n  }, [state]);\n\n  const changeDirection = (e: JSX.TargetedMouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    // to sort two or more columns at the same time\n    dispatch(\n      actions.SortToggle(\n        props.index,\n        e.shiftKey === true && sortConfig.multiColumn,\n        props.compare,\n      ),\n    );\n  };\n\n  const getSortClassName = (direction: number) => {\n    if (direction === 1) {\n      return 'asc';\n    } else if (direction === -1) {\n      return 'desc';\n    }\n\n    return 'neutral';\n  };\n\n  return (\n    <button\n      // because the corresponding <th> has tabIndex=0\n      tabIndex={-1}\n      aria-label={_(`sort.sort${direction === 1 ? 'Desc' : 'Asc'}`)}\n      title={_(`sort.sort${direction === 1 ? 'Desc' : 'Asc'}`)}\n      className={classJoin(\n        className('sort'),\n        className('sort', getSortClassName(direction)),\n        config.className.sort,\n      )}\n      onClick={changeDirection}\n    />\n  );\n}\n", "/**\n * Throttle a given function\n * @param fn Function to be called\n * @param wait Throttle timeout in milliseconds\n * @returns Throttled function\n */\nexport const throttle = (fn: (...args) => void, wait = 100) => {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  let lastTime = Date.now();\n\n  const execute = (...args) => {\n    lastTime = Date.now();\n    fn(...args);\n  };\n\n  return (...args) => {\n    const currentTime = Date.now();\n    const elapsed = currentTime - lastTime;\n\n    if (elapsed >= wait) {\n      // If enough time has passed since the last call, execute the function immediately\n      execute(...args);\n    } else {\n      // If not enough time has passed, schedule the function call after the remaining delay\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n\n      timeoutId = setTimeout(() => {\n        execute(...args);\n        timeoutId = null;\n      }, wait - elapsed);\n    }\n  };\n};\n", "import { h, RefObject } from 'preact';\nimport { classJoin, className } from '../../../util/className';\nimport { TColumn } from '../../../types';\nimport { throttle } from '../../../util/throttle';\n\nexport function Resize(props: {\n  column: TColumn;\n  thRef: RefObject<HTMLTableCellElement>;\n}) {\n  let moveFn: (e) => void;\n\n  const getPageX = (e: MouseEvent | TouchEvent) => {\n    if (e instanceof MouseEvent) {\n      return Math.floor(e.pageX);\n    } else {\n      return Math.floor(e.changedTouches[0].pageX);\n    }\n  };\n\n  const start = (e: MouseEvent | TouchEvent) => {\n    e.stopPropagation();\n\n    const thElement = props.thRef.current;\n\n    const offsetStart = parseInt(thElement.style.width, 10) - getPageX(e);\n\n    moveFn = throttle((e) => move(e, offsetStart), 10);\n\n    document.addEventListener('mouseup', end);\n    document.addEventListener('touchend', end);\n    document.addEventListener('mousemove', moveFn);\n    document.addEventListener('touchmove', moveFn);\n  };\n\n  const move = (e: MouseEvent | TouchEvent, offsetStart: number) => {\n    e.stopPropagation();\n\n    const thElement = props.thRef.current;\n\n    if (offsetStart + getPageX(e) >= parseInt(thElement.style.minWidth, 10)) {\n      thElement.style.width = `${offsetStart + getPageX(e)}px`;\n    }\n  };\n\n  const end = (e: MouseEvent | TouchEvent) => {\n    e.stopPropagation();\n\n    document.removeEventListener('mouseup', end);\n    document.removeEventListener('mousemove', moveFn);\n    document.removeEventListener('touchmove', moveFn);\n    document.removeEventListener('touchend', end);\n  };\n\n  return (\n    <div\n      className={classJoin(className('th'), className('resizable'))}\n      onMouseDown={start}\n      onTouchStart={start}\n      onClick={(e) => e.stopPropagation()}\n    />\n  );\n}\n", "import { h, ComponentChild, JSX } from 'preact';\n\nimport { classJoin, className } from '../../util/className';\nimport { CSSDeclaration, TColumn } from '../../types';\nimport { GenericSortConfig, Sort } from '../plugin/sort/sort';\nimport { PluginRenderer } from '../../plugin';\nimport { Resize } from '../plugin/resize/resize';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useConfig } from '../../hooks/useConfig';\nimport * as SortActions from '../plugin/sort/actions';\nimport { useStore } from '../../hooks/useStore';\n\nexport function TH(\n  props: {\n    index: number;\n    column: TColumn;\n    style?: CSSDeclaration;\n  } & Omit<JSX.HTMLAttributes<HTMLTableCellElement>, 'style'>,\n) {\n  const config = useConfig();\n  const thRef = useRef(null);\n  const [style, setStyle] = useState({});\n  const { dispatch } = useStore();\n\n  useEffect(() => {\n    // sets the `top` style if the current TH is fixed\n    if (config.fixedHeader && thRef.current) {\n      const offsetTop = thRef.current.offsetTop;\n\n      if (typeof offsetTop === 'number') {\n        setStyle({\n          top: offsetTop,\n        });\n      }\n    }\n  }, [thRef]);\n\n  const isSortable = (): boolean => props.column.sort != undefined;\n  const isResizable = (): boolean => props.column.resizable;\n  const onClick = (\n    e:\n      | JSX.TargetedMouseEvent<HTMLTableCellElement>\n      | JSX.TargetedKeyboardEvent<HTMLTableCellElement>,\n  ) => {\n    e.stopPropagation();\n\n    if (isSortable()) {\n      const sortConfig = config.sort as GenericSortConfig;\n\n      dispatch(\n        SortActions.SortToggle(\n          props.index,\n          e.shiftKey === true && sortConfig.multiColumn,\n          props.column.sort.compare,\n        ),\n      );\n    }\n  };\n\n  const keyDown = (e: JSX.TargetedKeyboardEvent<HTMLTableCellElement>) => {\n    // Enter key\n    if (isSortable() && e.which === 13) {\n      onClick(e);\n    }\n  };\n\n  const content = (): ComponentChild => {\n    if (props.column.name !== undefined) {\n      return props.column.name;\n    }\n\n    if (props.column.plugin !== undefined) {\n      return (\n        <PluginRenderer\n          pluginId={props.column.plugin.id}\n          props={{\n            column: props.column,\n          }}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const getCustomAttributes = () => {\n    const column = props.column;\n\n    if (!column) return {};\n\n    if (typeof column.attributes === 'function') {\n      return column.attributes(null, null, props.column);\n    } else {\n      return column.attributes;\n    }\n  };\n\n  return (\n    <th\n      ref={thRef}\n      data-column-id={props.column && props.column.id}\n      className={classJoin(\n        className('th'),\n        isSortable() ? className('th', 'sort') : null,\n        config.fixedHeader ? className('th', 'fixed') : null,\n        config.className.th,\n      )}\n      onClick={onClick}\n      style={{\n        ...config.style.th,\n        ...{\n          minWidth: props.column.minWidth,\n          width: props.column.width,\n        },\n        ...style,\n        ...props.style,\n      }}\n      onKeyDown={keyDown}\n      rowSpan={props.rowSpan > 1 ? props.rowSpan : undefined}\n      colSpan={props.colSpan > 1 ? props.colSpan : undefined}\n      {...getCustomAttributes()}\n      {...(isSortable() ? { tabIndex: 0 } : {})}\n    >\n      <div className={className('th', 'content')}>{content()}</div>\n      {isSortable() && <Sort index={props.index} {...props.column.sort} />}\n      {isResizable() &&\n        props.index < config.header.visibleColumns.length - 1 && (\n          <Resize column={props.column} thRef={thRef} />\n        )}\n    </th>\n  );\n}\n", "import { h } from 'preact';\nimport { TR } from './tr';\nimport { TH } from './th';\nimport { classJoin, className } from '../../util/className';\nimport Header from '../../header';\nimport { TColumn } from '../../types';\nimport { calculateRowColSpans } from '../../util/table';\nimport { useConfig } from '../../hooks/useConfig';\nimport useSelector from '../../hooks/useSelector';\n\nexport function THead() {\n  const config = useConfig();\n  const header = useSelector((state) => state.header);\n\n  const renderColumn = (\n    column: TColumn,\n    rowIndex: number,\n    columnIndex: number,\n    totalRows: number,\n  ) => {\n    const { rowSpan, colSpan } = calculateRowColSpans(\n      column,\n      rowIndex,\n      totalRows,\n    );\n\n    return (\n      <TH\n        column={column}\n        index={columnIndex}\n        colSpan={colSpan}\n        rowSpan={rowSpan}\n      />\n    );\n  };\n\n  const renderRow = (row: TColumn[], rowIndex: number, totalRows: number) => {\n    // because the only sortable columns are leaf columns (not parents)\n    const leafColumns = Header.leafColumns(header.columns);\n\n    return (\n      <TR>\n        {row.map((col) => {\n          if (col.hidden) return null;\n\n          return renderColumn(\n            col,\n            rowIndex,\n            leafColumns.indexOf(col),\n            totalRows,\n          );\n        })}\n      </TR>\n    );\n  };\n\n  const renderRows = () => {\n    const rows = Header.tabularFormat(header.columns);\n\n    return rows.map((row, rowIndex) => renderRow(row, rowIndex, rows.length));\n  };\n\n  if (header) {\n    return (\n      <thead\n        key={header.id}\n        className={classJoin(className('thead'), config.className.thead)}\n      >\n        {renderRows()}\n      </thead>\n    );\n  }\n\n  return null;\n}\n", "import { TColumn } from '../types';\nimport Header from '../header';\n\nexport function calculateRowColSpans(\n  column: TColumn,\n  rowIndex: number,\n  totalRows: number,\n): { rowSpan: number; colSpan: number } {\n  const depth = Header.maximumDepth(column);\n  const remainingRows = totalRows - rowIndex;\n  const rowSpan = Math.floor(remainingRows - depth - depth / remainingRows);\n  const colSpan = (column.columns && column.columns.length) || 1;\n\n  return {\n    rowSpan: rowSpan,\n    colSpan: colSpan,\n  };\n}\n", "import Header from 'src/header';\nimport Tabular from '../tabular';\nimport { Status } from '../types';\n\nexport const SetStatusToRendered = () => (state) => {\n  if (state.status === Status.Loaded) {\n    return {\n      ...state,\n      status: Status.Rendered,\n    };\n  }\n\n  return state;\n};\n\nexport const SetLoadingData = () => (state) => {\n  return {\n    ...state,\n    status: Status.Loading,\n  };\n};\n\nexport const SetData = (data: Tabular) => (state) => {\n  if (!data) return state;\n\n  return {\n    ...state,\n    data: data,\n    status: Status.Loaded,\n  };\n};\n\nexport const SetDataErrored = () => (state) => {\n  return {\n    ...state,\n    data: null,\n    status: Status.Error,\n  };\n};\n\nexport const SetHeader = (header: Header) => (state) => {\n  return {\n    ...state,\n    header: header,\n  };\n};\n\nexport const SetTableRef = (tableRef) => (state) => {\n  return {\n    ...state,\n    tableRef: tableRef,\n  };\n};\n", "import { h } from 'preact';\nimport { TBody } from './tbody';\nimport { THead } from './thead';\nimport { classJoin, className } from '../../util/className';\nimport { useConfig } from '../../hooks/useConfig';\nimport { useEffect, useRef } from 'preact/hooks';\nimport * as actions from '../actions';\nimport { useStore } from '../../hooks/useStore';\n\nexport function Table() {\n  const config = useConfig();\n  const tableRef = useRef(null);\n  const { dispatch } = useStore();\n\n  useEffect(() => {\n    if (tableRef) dispatch(actions.SetTableRef(tableRef));\n  }, [tableRef]);\n\n  return (\n    <table\n      ref={tableRef}\n      role=\"grid\"\n      className={classJoin(className('table'), config.className.table)}\n      style={{\n        ...config.style.table,\n        ...{\n          height: config.height,\n        },\n      }}\n    >\n      <THead />\n      <TBody />\n    </table>\n  );\n}\n", "import { classJoin, className } from '../util/className';\nimport { h } from 'preact';\nimport { PluginPosition, PluginRenderer } from '../plugin';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useConfig } from '../hooks/useConfig';\n\nexport function HeaderContainer() {\n  const [isActive, setIsActive] = useState(true);\n  const headerRef = useRef(null);\n  const config = useConfig();\n\n  useEffect(() => {\n    if (headerRef.current.children.length === 0) {\n      setIsActive(false);\n    }\n  }, [headerRef]);\n\n  if (isActive) {\n    return (\n      <div\n        ref={headerRef}\n        className={classJoin(className('head'), config.className.header)}\n        style={{ ...config.style.header }}\n      >\n        <PluginRenderer position={PluginPosition.Header} />\n      </div>\n    );\n  }\n\n  return null;\n}\n", "import { h } from 'preact';\nimport { classJoin, className } from '../util/className';\nimport { PluginPosition, PluginRenderer } from '../plugin';\nimport { useEffect, useRef, useState } from 'preact/hooks';\nimport { useConfig } from '../hooks/useConfig';\n\nexport function FooterContainer() {\n  const footerRef = useRef(null);\n  const [isActive, setIsActive] = useState(true);\n  const config = useConfig();\n\n  useEffect(() => {\n    if (footerRef.current.children.length === 0) {\n      setIsActive(false);\n    }\n  }, [footerRef]);\n\n  if (isActive) {\n    return (\n      <div\n        ref={footerRef}\n        className={classJoin(className('footer'), config.className.footer)}\n        style={{ ...config.style.footer }}\n      >\n        <PluginRenderer position={PluginPosition.Footer} />\n      </div>\n    );\n  }\n\n  return null;\n}\n", "import { createRef, h } from 'preact';\nimport { classJoin, className } from '../util/className';\nimport { Status } from '../types';\nimport { Table } from './table/table';\nimport { HeaderContainer } from './headerContainer';\nimport { FooterContainer } from './footerContainer';\nimport log from '../util/log';\nimport { useEffect } from 'preact/hooks';\nimport * as actions from './actions';\nimport { useStore } from '../hooks/useStore';\nimport useSelector from '../hooks/useSelector';\nimport { useConfig } from '../hooks/useConfig';\nimport { throttle } from '../util/throttle';\n\nexport function Container() {\n  const config = useConfig();\n  const { dispatch } = useStore();\n  const status = useSelector((state) => state.status);\n  const data = useSelector((state) => state.data);\n  const tableRef = useSelector((state) => state.tableRef);\n  const tempRef = createRef();\n\n  const processPipeline = throttle(async () => {\n    dispatch(actions.SetLoadingData());\n\n    try {\n      const data = await config.pipeline.process();\n      dispatch(actions.SetData(data));\n\n      // TODO: do we need this setTimemout?\n      setTimeout(() => {\n        dispatch(actions.SetStatusToRendered());\n      }, 0);\n    } catch (e) {\n      log.error(e);\n      dispatch(actions.SetDataErrored());\n    }\n  }, config.processingThrottleMs);\n\n  useEffect(() => {\n    // set the initial header object\n    // we update the header width later when \"data\"\n    // is available in the state\n    dispatch(actions.SetHeader(config.header));\n\n    processPipeline();\n    config.pipeline.on('updated', processPipeline);\n\n    return () => config.pipeline.off('updated', processPipeline);\n  }, []);\n\n  useEffect(() => {\n    if (config.header && status === Status.Loaded && data?.length) {\n      // now that we have the data, let's adjust columns width\n      // NOTE: that we only calculate the columns width once\n      dispatch(\n        actions.SetHeader(config.header.adjustWidth(config, tableRef, tempRef)),\n      );\n    }\n  }, [data, config, tempRef]);\n\n  return (\n    <div\n      role=\"complementary\"\n      className={classJoin(\n        'gridjs',\n        className('container'),\n        status === Status.Loading ? className('loading') : null,\n        config.className.container,\n      )}\n      style={{\n        ...config.style.container,\n        ...{\n          width: config.width,\n        },\n      }}\n    >\n      {status === Status.Loading && (\n        <div className={className('loading-bar')} />\n      )}\n\n      <HeaderContainer />\n\n      <div className={className('wrapper')} style={{ height: config.height }}>\n        <Table />\n      </div>\n\n      <FooterContainer />\n\n      <div ref={tempRef} id=\"gridjs-temp\" className={className('temp')} />\n    </div>\n  );\n}\n", "import { Config } from './config';\nimport { h, render, VNode } from 'preact';\nimport { Container } from './view/container';\nimport log from './util/log';\nimport { EventEmitter } from './util/eventEmitter';\nimport { GridEvents } from './events';\nimport { PluginManager } from './plugin';\nimport { ConfigContext } from './config';\n\nclass Grid extends EventEmitter<GridEvents> {\n  public config: Config;\n  public plugin: PluginManager;\n\n  constructor(config?: Partial<Config>) {\n    super();\n    this.config = new Config()\n      .assign({ instance: this, eventEmitter: this })\n      .update(config);\n    this.plugin = this.config.plugin;\n  }\n\n  public updateConfig(config: Partial<Config>): this {\n    this.config.update(config);\n    return this;\n  }\n\n  createElement(): VNode {\n    return h(ConfigContext.Provider, {\n      value: this.config,\n      children: h(Container, {}),\n    });\n  }\n\n  /**\n   * Uses the existing container and tries to clear the cache\n   * and re-render the existing Grid.js instance again. This is\n   * useful when a new config is set/updated.\n   *\n   */\n  forceRender(): this {\n    if (!this.config || !this.config.container) {\n      log.error(\n        'Container is empty. Make sure you call render() before forceRender()',\n        true,\n      );\n    }\n\n    this.destroy();\n\n    // recreate the Grid instance\n    render(this.createElement(), this.config.container);\n\n    return this;\n  }\n\n  /**\n   * Deletes the Grid.js instance\n   */\n  destroy(): void {\n    this.config.pipeline.clearCache();\n    // TODO: not sure if it's a good idea to render a null element but I couldn't find a better way\n    render(null, this.config.container);\n  }\n\n  /**\n   * Mounts the Grid.js instance to the container\n   * and renders the instance\n   *\n   * @param container\n   */\n  render(container: Element): this {\n    if (!container) {\n      log.error('Container element cannot be null', true);\n    }\n\n    if (container.childNodes.length > 0) {\n      log.error(\n        `The container element ${container} is not empty. Make sure the container is empty and call render() again`,\n      );\n      return this;\n    }\n\n    this.config.container = container;\n    render(this.createElement(), container);\n\n    return this;\n  }\n}\n\nexport default Grid;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kDAiECA,CAND,IAAA,WACEA,GAAAA,GAAA,SAAA,CAAA,IAAA,UACAC,GAAAA,GAAA,WAAA,CAAA,IAAA,YACAA,GAAAA,GAAA,QAAA,CAAA,IAAA;MACAD,EAAA,MAAA,IAAA,CAAA,EAAA;AAAA,UAAA,GAAA,GAAA,GAAA,GACAA,GAAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,GAAA,IAAA;AChE4B,eAAA,EAAAC,IAAAC,IAAA;AAAA,iBAAAC,MAAAD,GAAA,CAAAD,GAAAE,EAAA,IAAAD,GAAAC,EAAA;AAAA,eAAoEF;MAAA;AAAA,eAAaG,EAAGH,IAAA;AAAI,YAAII,KAAAA,GAAAA;AAAcA,QAAAA,MAAGH,GAAA,YAASD,EAAA;MAAA;AAASK,eAASF,EAAEF,IAAEK,IAAAA,IAAAA;AAAAA,YAAAA,IAAWH,IAAAA,IAAGA,KAAEI,CAAAA;AAAAA,aAAAA,MAAYN,GAAG,UAAAO,KAASC,KAAEN,GAAEC,EAAAA,IAAEI,SAAOR,KAAEU,KAAEC,GAAEC,EAAE,IAAER,GAACI,EAAA,IAAIG,GAAAA,EAAAA;AAAKP,YAAE,UAAWA,SAAK,MAAAA,GAAOO,WAASC,UAAU,SAAGC,IAAAA,EAAAA,KAAUC,WAAaC,CAAAA,IAAAA,KAAAA,cAAmBD,OAAOd,MAAEC,QAAOY,GAAAA,aAAaL,MAAGA,MAAAR,GAAA,aAAsB,YAAQgB,GAAAA,EAAAA,MAAAA,GAAAA,EAAAA,IAAahB,GAAA,aAAWgB,EAAAA;AAAAA,eAAAA,EAAahB,IAAAI,IAASQ,IAAED,IAAAA,IAAKC;MAAED;AAAAA,eAAKK,EAAAA,IAAAA,IAAAA,IAAaL,IAAAA,IAAI;AAAA,YAAAH,KAAOS,EAAAA,MAAMjB,IAAEU,OAAET,IAAM,KAAAC,IAAA,KAASe,IAAEhB,KAAID,MAAIW,IAAG,MAAOO,KAAAA,GAAKjB,KAAEkB,MAAQC,KAAIpB,QAAMU,KAAEW,MAAI,KAAQ,MAAKC,aAAU,QAAKC,KAAAA,QAAWC,KAAI,EAAA,IAAKC,GAAAA;AAAAA,eAASC,QAAAA,MAAAA,QAAAA,EAAY,SAAW,EAAA,MAAUtB,EAAAA,GAAEO;MAAAA;AAAG,eAAO,EAAAX,IAAMW;AAAAA,eAAGX,GAAMG;MAASA;AAAAA,eAAQS,EAAIZ,IAAmCC,IAAA;AAAA,aAAS0B,QAAK3B,IAAA,KAAOC,UAAEc;MAAQ;AAAC,eAASa,EAAE3B,IAAEE,IAAAA;AAAG0B,YAAAA,QAAKV,GAAMlB,QAAO6B,GAAAA,KAAAA,EAAAA,GAAS,IAAC9B,GAAA,GAAA,IAAWC,QAAQD,EAAA,IAAA,CAAA,IAAMG;AAAE,iBAAS4B,IAAGC,KAAE/B,GAAE8B,IAAKA,QAAOE,KAAAA,KAAAA,SAAc/B,KAAAF,GAAA,IAAKC,EAAI,MAAIG,QAAMiB,GAAAA,IAAIP,QAAOX,GAAI;AAAG,eAAOC,cAAQD,OAAWC,GAAE8B,OAAI,EAAAlC,EAAA,IAAA;MAASkC;AAAAA,eAAU,EAAAlC,IAAA;AAAA,YAAAC,IAAAC;AAAA,YAAA,SAAqBgB,KAAKc,GAAE/B,OAAG,QAAKD,GAAA,KAASmC;AAAAA,eAAKnC,GAAA,MAAMI,GAAE,IAAG,OAAA,MAAW2B,KAAAA,GAAAA,KAAK/B,GAAA,IAAMC,QAAOA,KAAIA,KAAEiC,SAAMV,KAAIY,GAAAA,IAAKnC,EAAA,MAAO,QAAMoB,GAAAA,KAAIP;AAAAA,YAAAA,GAAAA,MAAOX,GAAI,IAAG,OAAAD,GAAOE;AAAIiB;UAAIlB;AAAAA,iBAAK,EAAMC,EAAE8B;QAAAA;MAAAA;AAAAA,eAAWjC,EAAEuB,IAAAA;AAAIY,SAAAA,CAAAA,GAAAA,QAAOF,GAAI,MAAK,SAAC,EAAA,KAAWlC,EAAC,KAAC,CAAA,EAAA,SAAWC,MAAKA,EAAEsB,wBAAmBc,IAAKpC,EAAAA,sBAAoBqC,YAAAA,CAAAA;MAAAA;AAAAA,eAA0BA,IAAAA;AAAAA,iBAAAA,IAAAA,EAAAA,MAAoBC,EAAAA,SAAAA,CAAAA,KAAYC,EAAE,KAAC,SAAaxC,IAAAC,IAAI;AAAA,iBAAQwC,GAAAA,IAAM3B,MAAAA,GAAAA,IAAUd;QAAE0C,CAAAA,GAAAA,IAAK,CAAA,GAAA1C,GAAA,KAAWG,SAAGH,IAAOC;AAAE0C,cAAIrB,IAAAA,IAAInB,IAAEwC,IAAAA,IAAIrB;AAAAA,UAAAA,GAAG,QAAKd,MAAKoC,MAAAA,KAAK5C,IAAA,KAAA,MAAYI,KAAAH,GAAIE,SAAQO,KAAEC,CAAAA,IAAIY,KAAAA,EAAAA,CAAAA,GAAMb,EAAAA,GAAGV,MAAKC,GAAG0C,MAAAA,GAAKT,EAAAA,IAAKvB,IAAER,IAAE0C,GAAAA,KAAAA,WAAeC,GAAE,iBAAaH,QAAQhC,GAAEX,MAAIG,CAAE4C,EAAAA,IAAAA,MAAAA,IAAI,QAAWC,KAAAA,EAAAA,EAAAA,IAAAA,IAAAA,GAAAA,GAAAA,GAAgB,EAAA9C,IAAAQ,EAAMV,GAAEyB,GAAAA,OAAKf,MAAG,EAAAA,EAAKN;QAAE,CAAA;MAAA;AAAA,eAAaM,EAAEV,IAAEyB,IAAAA,IAAAA,IAAKwB,IAAE7C,IAAEJ,IAAGA,IAAEkC,IAAAA,IAAAA;AAAKxB,YAAGyB,IAAEnC,IAAAA,IAAI4B,IAAGnB,IAAAuB,IAAAkB,IAAAC,KAAAxC,MAAWV,GAAEE,OAAIK,GAAER,KAAEU,GAAEC;AAAMN,aAAGH,GAAIO,MAAImB,CAAEO,GAAEiB,KAAEZ,GAAEa,KAAEC,GAAE9C,QAAKa,KAAKnB,KAAIoD,SAAExC,KAAOZ,GAAA,IAAMmB,EAAAA,IAAAA,SAASO,KAAEnB,GAAEN,EAAEW,MAAAA,aAAc,OAAOqB,KAAE/B,OAAMK,YAAU0B,OAAI1B,MAAK,YAAA,OAAkB0B,MAAE,YAAK,OAAAP,KAAA,EAAiBO,MAAGP,IAAA,MAAA,MAAAA,EAAA,IAAiBO,MAAG,QAAAP,EAAA,IAAA,EAAA,GAAiBO,EAAElB,UAASW,GAAA,GAAA,MAAK,MAAQ2B,IAAAA,IAAMC,GAAAA,MAAAA,IAAQrB,EAAAA,GAAGlB,MAAKF,GAAAA,OAASoB,GAAAA,KAAGP,GAAK,MAAAA,GAAK,MAAA,MAAQN,GAAI,GAAEL,IAAEkB,KAAEjB;AAAAA,cAAKiB,GAAEhB,KAAAA,IAAMgB,GAAEf,MAAIe,GAAEsB,MAAItB,GAAEsB,UAAI9B,KAAKQ,GAAEQ,EAAAA,MAAKR,MAAIP,GAAA,OAAKG,GAAG3B,OAAIkB,GAAIlB,SAAMuB,GAAE,KAAA,CAAAwB,GAAQvB,EAAAA,IAAE0B;cAAYlC,MAAKQ,KAAER,GAAAA,KAAAA,IAAKe,MAAEjB;AAAAA,iBAAOU,KAAEV,GAAAA,EAAAA,MAAOT,GAAAA,OAAGkB,GAAA,OAAYC,GAAA,SAAQuB,GAAEO,MAAM;AAAC,cAAAP,GAAAvC,EAAA,IAAIgB;AAAIuB;YAAO/B;AAAAA,YAAAA,KAAKQ;UAAER;AAAAA,YAAKe,IAAEjB,IAAAA,KAAAA,MAAOU,GAAEV,IAAAA,IAAAA,IAAMoC,IAAEH,IAAAA,EAAAA,GAAAA,KAAAA,GAAG,MAAOvC,KAAMgB,GAAE,QAAK+B,GAAE1D,OAAM2B,OAAGhB,OAAIF,KAAEC,CAAEiD,IAAEd,GAAEzC,OAAK8B,GAAED,KAAKiB,GAAEhB,KAAEsB,MAAQA,EAAAA,GAAAA,GAAKN,KAAIE,IAAAA,GAAIA,OAAMzB,IAAE6B,EAAAA,IAAAA,QAAOpB,MAAKT,QAAMI,OAAKG,KAAAA,KAAKE,cAASb,OAAOW,GAAI,QAAMiB,GAAG,QAAMZ,GAAAA,MAAMY,GAAAA,MAAG/C,KAAA,EAAAuB,IAAAvB,IAAAL,EAAA,IAAAK,KAAA,EAAAL,IAAmBmC,IAAEjB,IAAAA,IAAAA,IAAMiB,EAAEd,GAAAA,cAAcE,OAAM2B,GAAEf,SAAOW,GAAEe,MAAI1B,OAAImB,MAAIR,GAAAA,OAAGzC,MAAAA,GAAA,cAAqBa,OAAAA,KAAAA,EAAOd,EAAEmB;QAAAA;AAAAA,aAAIuB,GAAIA,MAAKZ,IAAAA,KAAAA,IAAKY,OAAKxC,SAAAA,GAAAA,EAAAA,KAAYL,EAAAA,GAAI6C,EAAEd,GAAEJ,GAAAA,EAAG,CAAC;AAAA,YAAIxB,GAAE8B,MAAIM,KAAE/B,GAAEiD,KAAEjD,GAAAA,QAAKmD,KAAQnD,GAAAA,GAAIqD,EAAER,GAAE7C,GAAAA,EAAG6C,EAAE7C,GAAAA,GAAI,EAAAmD,EAAGP,CAAAA;MAAE;AAAA,eAAUA,EAAEvC,IAAAA,IAAAA,IAAAA;AAAOL,iBAAQA,IAAAA,KAAG4C,GAAAA,KAAOA,KAAAA,GAAI5C,MAAGD,KAACE,GAAA,QAASwC,KAAI/C,EAAEC,KAAAA,GAAGI,EAAA,OAAIG,GAAIH,KAAIP,IAAEoB,KAAAA,cAAarB,OAAEc,GAAOJ,OAAKF,EAAER,IAAEU,IAAAA,EAAAA,IAAMF,EAAEuB,IAAAA,IAAG9B,IAAEE,IAAEQ,GAAA,KAAAV,EAAA;AAAA,eAAAA;MAAmBO;AAAAA,eAASA,EAAEL,IAAEC,IAAGyD,IAAEzD,IAAEI,IAAEA,IAAER;AAAAA,YAAIkC,IAAAA,IAAI/B;AAAAA,YAAI,WAAiIF,GAAA,IAAA,CAAAG,KAASyD,GAAE5D,KAAIG,GAAEI,MAAIE;iBAAa,QAAGR,MAASC,MAAEoB,MAAIZ,QAAIY,GAAIpB,WAAM,GAAA,KAAA,QAAeK,MAAAA,GAAMJ,eAASJ,GAAMA,CAAAA,GAAEM,YAAWL,EAAE,GAAAG,KAAG;aAASM;AAAEJ,eAAAA,KAAAA,IAAAA,KAAAA,IAAaL,KAAEA,GAAE8D,gBAAY/D,KAAGW,GAAE,QAAAN,MAAU,EAAA,KAAMK,MAAER,GAAE,OAAO8D;AAAAA,UAAAA,GAAAA,aAAgBxD,IAAEM,EAAAA,GAAAA,KAAAA;QAAOZ;AAAAA,eAAQU,WAAKR,KAAMH,KAAEA,GAAEgE;MAAAA;AAAAA,eAAqB,EAACjE,IAAAC,IAAAC,IAAA;AAAA,gBAAOD,GAASU,CAAAA,IAAEA,GAAEX,YAAaC,IAA4NC,EAAA,IAAAF,GAAAC,EAAA,IAASiE,QAAM9D,KAAAA,KAAG,YAAWH,OAAEkE,MAAAA,EAAAA,KAAc/D,EAAGH,IAAEE,KAAAA,KAAG;MAAA;AAAMC,eAAK,EAAAJ,IAAAC,IAAAC,IAAAS,IAAAD,IAAA;AAAiBN,YAAGwD;AAAEQ,UAAAA,KAAKjE,YAAWF,GAAC,KAAA,YAAaE,OAAMH,GAAG,CAAAA,GAAA,MAAQ,UAAGE;aAAY;AAAA,cAAG,YAAA,OAAiBE,OAAIiE,GAAAA,MAAMC,UAAQlE,KAAAA,KAAOO,GAAG,MAAAV,MAAAU,GAAA,CAAAT,MAAAD,MAAiBO,MAAM6D,EAAAA,GAAAA,OAAMC,IAAAA,EAAQ9D;AAAE,cAAAN,GAAIM,MAAEP,MAAIE,GAAKK,CAAAA,MAAEJ,GAAGD,EAAAA,MAAKC,GAAG8D,EAAAA,KAAIG,EAAAA,GAAAA,OAAQpE,IAAIC,GAAAD,EAAGG,CAAAA;QAAE;iBAASA,QAAKA,GAAED,CAAAA,KAAKK,QAAM0D,GAAEjE,CAAAA,EAAEoE,CAAAA,KAAAA,QAAQjE,KAAED,GAAAA,QAAS,YAAW,EAAA,IAAIF,KAAAA,GAAME,YAAYA,KAAIoE,KAAAA,GAAAA,YAAQ,EAAA,MAAgBpE,CAAAA,IAAEA,GAAEqE,MAAAA,CAAAA,GAAAA,GAAAA,MAAgBvE,GAAEE,IAAEqE,CAAAA,IAAAA,GAAAA,EAAAA,KAAAA,EAAAA,IAAAA,IAAcC,KAAAA,MAAMzE,GAAA,iBAAgBG,IAAIF,KAAEE,IAAI,GAAAK,EAAEP,IAAEE,GAAEA,oBAAcuE,IAAAA,KAAAA,IAAAA,GAAAA,EAAAA;iBAAyBhE,8BAA2BA,IAAEiE;AAAEC,cAAElE,GAAAA,CAAAA,KAAAA,GAAAA,QAAW,eAAA,GAAA,EAAA,QAA+B,UAAS6D,GAAAA;mBAAQ,WAActE,MAAA,WAAKsE,MAAQ,WAAStE,MAAA,eAAaA,MAAA,eAAqBE,MAAGF,MAAAD,GAAA,KAASG;AAAAA,YAAAA,GAAGF,EAAA,IAAA,QAAAC,KAAA,KAAaC;AAAG,kBAAA;UAAA,SAAaA,IAAGA;UAAAA;AAAAA,wBAAaA,OAASC,OAAE,QAAKF,MAAMD,UAAEC,MAAMD,MAAIA,GAAA,QAAA,GAAA,IAAAD,GAAA,gBAAgCC,EAAA,IAAAD,GAAKI,aAAS6B,IAAAA,EAAQ;QAAA;MAAA;AAAA,eAAO4C,EAAAA,IAAAA;AAAAA,aAAgB1E,EAAAA,GAAGF,OAAE6E,KAAAA,EAAAA,EAAAA,QAAe1E,EAAG,MAAEJ,EAAA,IAAAA,EAAA;MAAS4E;AAAAA,eAAUzE,EAAEF,IAAEiB;AAAAA,aAAK,EAAAlB,GAAIG,OAAE4E,IAAM5E,EAAE4E,EAAAA,QAAM9E,EAAGA,MAAGD,EAAA,IAAAA,EAAA;MAAS2E;AAAAA,eAAUxE,EAAEF,IAAEiB,IAAAA,IAAAA,IAAKR,IAAAF,IAAIL,IAAE4E,IAAAA,IAAAA;AAAM5E,YAAE4E,IAAAA,IAAM9E,IAAAA,IAAGA,IAAG+B,IAAAkB,IAAAjC,IAAAuB,IAAAW,IAASQ,IAAE1D,IAAEG,IAAEI,IAAER,IAAEU,KAAEC,GAAEC;AAAIgD,YAAG,WAAUT,GAAEnB,YAAY6B,QAAQe;AAAIxE,gBAAOF,GAAA,QAAGG,KAAAH,GAASE,KAAEsB,KAAAA,GAAAA,MAAAA,GAAY,KAAAzB,GAAA,MAAO,MAAKO,KAAA,CAAMA,EAAAA,KAAEiB,KAAAA,EAAMmC,QAAInC,GAAIvB,EAAEE;AAAE8B,YAAAA;AAAI1B,YAAE0B,KAAAA,cAAevB,OAAGT,IAAKG;AAAEF,gBAAEmB,KAAAA,GAAAA,OAAWkB,MAAArC,KAAIF,GAAE,gBAAGU,GAAAR,GAAA,GAAmBwE,GAAExB,KAAChD,KAAGqC,KAAEpC,GAAEe,MAAM+B,QAAKyB,GAAEK,KAAAA,IAAAA,GAAAA,MAAAA,MAAchF,KAAEK,GAAEmB,MAAK8B,GAAEjD,KAAI6C,KAAE/B,GAAAA,OAAM8D,eAAezD,MAAI4B,GAAG3C,UAAUe,SAAKO,GAAGtB,MAAEyE,KAAK,IAAAC,GAAAlE,IAAAkC,EAAA,KAAAlD,GAAc0E,MAAGA,KAAES,IAAAA,EAAAA,IAAAA,EAAUC,GAAAA,GAAAA,cAAeF,IAAAvB,GAAIe,SAAQvE,IAAEoB,MAAIf,GAAE,IAAImB,EAAAA,GAAEY,GAAEc,QAAK5B,IAAAA,GAAAA,UAAcjB,GAAE4E,QAAAA,CAAOC,IAAGpC,GAAAA,UAASzC,IAAGA,GAAEU,MAAAA,IAAMqB,KAAE/B,GAAE8E,MAAAA,MAAAA,GAAQ9E,MAAE8E,CAAAA,GAAM3B,GAAA,MAAM9B,CAAAA,IAAAA,QAAUrB,GAAEsC,QAAM9B,GAAER,MAAEc,GAAAA,QAASE,QAAOhB,GAAE+E,6BAA4B/E,GAAE8E,OAAAA,GAAO,UAAQE,GAAAA,MAAAA,EAAAA,CAAAA,GAAAA,GAAAA,GAAAA,IAAAA,EAAAA,GAAAA,KAA2BhF,GAAEiF,yBAAyBzE,IAACR,GAAEiF,GAAAA,CAAAA,IAAQjF,KAAEiF,GAAAA,OAAMD,KAAAA,GAAAA,OAAAA,GAAAA,SAAAA,GAAAA,4BAAgDhF,QAAE8E,GAAMtE,sBAAUwE,GAAAA,mBAA0B,GAAMhF,QAAEkF,GAAAA,qBAAsBA,GAAAA,IAAAA,KAAAA,GAAAA,iBAA6BC;iBAAAA;AAAAA,kBAAAA,QAAqBnE,GAAAA,4BAAWmE,OAAAA,MAAwB,QAAGhC,GAAA,6BAAQ6B,GAA0BjD,0BAAeqD,IAAAA,EAAAA,GAAAA,CAAAA,GAAAA,OAAAA,QAA6BA,GAAAA,yBAA0BrD,UAAEc,GAAI7C,sBAAeqF,IAAAA,GAAAA,KAAAA,EAAAA,KAAAA,GAAAA,QAA4BrF,GAAEqF,KAAAA;AAAAA,qBAAAA,GAAAA,QAAAA,IAAAA,GAAAA,QAA0BJ,GAAAA,KAAIpC,GAAIlD,QAAEuC,GAAMnC,QAAOoD,GAAA,MAAMzC,QAAAA,GAAMqB,MAAI+C,IAAAA,GAAAA,MAAQG,GAAAA,KAAM/C,GAAAA,MAAMnC,GAAEmC,KAAAA,GAAMlC,IAAEc,QAAUoB,SAAQT,IAAAA;AAAI1B,kBAAAA,OAAE0B,GAAI9B,KAAEiB;gBAAAA,CAAIb,GAAEa,KAAAA,GAAIjB,KAAEiB,GAAAA,IAAI0E,QAAQ1C,KAAA,CAAAO,GAAA,IAAS3D,KAAOA,GAAE8B,IAAG3B,EAAE,CAAA;AAAGyD,gBAAAA,GAAE,MAAIpD,CAAAA,GAAE+E,GAAAA,IAAI1E,UAAWL,GAAEgB,KAAIY,EAAAA;AAAAA,sBAAOmD;cAAI3B;AAAAA,sBAAM2B,GAAAA,uBAAuBnD,GAAAA,oBAAsB5B,IAAEuF,GAAAA,KAAAA,EAAAA,GAAAA,QAAAA,GAAAA,sBAAuBA,GAAAA,IAAoBxD,KAAIkD,WAAO;AAAMjF,gBAAAA,GAAEwF,mBAAAA,IAAoBxF,IAAEgB,EAAAA;cAAAA,CAAIY;YAAAA;AAAAA,gBAAKuB,GAAA,UAAAT,IAAW1C,GAAEwF,QAAAA,IAAAA,GAAAA,MAAAA,IAAAA,GAAmB9C,MAAIhB,IAAEmB,KAAE,EAAC,KAAKxB,KAAAA,GAAAA,eAAkBU,MAAE/B,GAAEkC,UAAQE,QAAUJ;AAAAA,mBAAIyB,GAAE,QAAEN,GAAA,KAAAA,GAAA,MAAiBe,OAAES,MAAAA,GAAAA,EAAAA,GAAAA,KAAUC,GAAAA,OAAQzB,GAAInD,OAAE8E,GAAM9E,OAAMA,GAAEc,OAAOmC,GAAAA,KAAGA,GAAEtD,KAAGC,GAAEI,IAAE4E,QAASlE,KAAAA,CAAAA,GAAMV,IAAE8E,KAAM9E,GAAEqB,IAAAA,EAAAA,CAAAA;AAASoE,cAAAA,GAAE,MAAIzF,CAAAA;YAAE+E,MAAI1E,IAAAA;AAAAA,cAAAA,GAAOoF,MAAIzF,OAAEgB,MAAIY,GAAAA,EAAAA,GAAK5B,KAAE+E,GAAAA,OAAQ/E,GAAE+E,OAAM5B,GAAA,OAASnD,GAAEc,OAAOmC,GAAAA,GAAGA,QAAOjD,GAAE4E;YAAAA,SAASlE,GAAAA,OAAQoE,EAAAA,KAAAA;AAAQzD,YAAAA,GAAAA,QAAAA,GAASrB,KAAE8E,QAAQG,GAAAA,oBAAqB/E,KAAA,EAAIF,EAAE8E,CAAAA,GAAAA,EAAAA,GAAM9E,GAAEiF,gBAAYS,CAAAA,IAAAA,MAAAA,QAAAA,GAAkBnG,4BAAcmG,KAAAA,GAAAA,wBAA+BC,IAAAA,EAAAA,IAAAA,KAAAA,QAAAA,MAA0BjE,GAAE1B,SAAE2F,KAAAA,QAAAA,GAAAA,MAAAA,GAAAA,MAA0BpE,WAAY3B,IAAAA,EAAGA,IAAEa,MAAOS,QAAG+B,EAAMrD,IAAEe,KAAAA,CAAAA,EAAIf,GAAEc,IAAAA,IAAAA,IAAMJ,IAAAA,IAAAA,IAAAA,IAAAA,EAASV,GAAEgD,GAAEpD,OAAEsD,GAAAA,KAAMC,GAAAA,MAAQoB,MAAMA,GAAAA,IAAKpE,UAAQI,GAAEV,KAAKO,EAAE2B,GAAAA,OAAKhC,GAAE8B,MAAI9B,GAAEqB,KAAI,OAAKhB,GAAEgB,MAAIX;UAAAA,MAAQF,SAAOH,MAAG2C,GAAAA,QAAM8B,GAAIzE,OAAKR,GAAA,MAAMQ,GAAEyB,KAAAA,GAAM,MAAAhC,GAAM,OAAAD,GAAMU,MAAKgC,EAAAA,GAAAA,KAAQA,IAAAA,IAAAA,IAAKvC,IAAEiB,IAAAA,IAAIb,EAAEa;AAAAA,WAAAA,KAAIjB,EAAE8B,WAAMA,GAAK9B,EAAE8B;QAAAA,SAAQA,IAAAA;AAAAA,UAAAA,GAAI9B,MAAIJ,OAAMY,MAAEgD,QAAQyC,QAAAA,GAAAA,MAAWjG,IAA0FH,GAAvF,MAAA,CAAMA,CAAAA,IAAGG,GAAEuC,GAAAA,QAAUiB,EAAAA,CAAAA,IAAG,OAAMjD,EAAAA,IAAOuB,IAAAA,IAAIhC,EAAAA;QAAEE;MAAAA;AAAEqB,eAAQd,EAAEA,IAAEsB,IAAAA;AAAAA,UAAAA,OAAQ/B,EAAI,IAAAD,IAAME,EAAE+B,GAAAA,GAAIjC,KAAIO,SAAIP,IAAA;AAASgD,cAAEhD;AAAEG,YAAAA,KAAAA,GAAGD,KAAEqB,GAAKrB,MAAEqB,CAAAA,GAAIpB,GAAEH,KAAK2C,SAAK5C,IAAA;AAAA,cAAAA,GAASI,KAAGH,EAAIA;YAAAA,CAAEG;UAAAA,SAAQqB,IAAAA;AAAAA,cAAI,IAAKmB,IAAAA,GAAAA,GAAK;UAAA;QAAA,CAAA;MAAA;AAAA,eAAc0D,EAAAA,IAAKlG,IAAEF,IAAGS,IAAAD,IAAAF,IAAMP,IAAAA,IAAGE;AAAE+B,YAAIjC,IAAEG,IAAEuC,IAAAA,KAAIzC,GAAC,OAAG0B,KAAA3B,GAAA,OAAaG,KAAEI,GAAER,MAAME,KAAE0D;AAAAA,YAAG,UAAUT,OAAIhC,KAAAA,OAAMQ,QAAIR;AAAAA,iBAAQf,KAAEc,GAAAA,QAASc,KAAG,MAAA3B,KAAQuB,GAAAA,EAAAA,MAAM,kBAAiBO,MAAIrB,CAAAA,CAAAA,OAAAA,KAAOqB,GAAAA,cAAYA,KAAK,MAAA9B,GAAA,WAAA;AAAiByC,YAAAA,KAAAA,IAAAA,GAAKlB,EAAAA,IAAIA;AAAI2E;UAAAA;;AAAAA,YAAAA,QAAcvG,IAAI8C;AAAAA,cAAE0D,SAAAA,GAAWrG,QAAMgC,SAAQ,eAAiBP,EAAC;AAAA,UAAA5B,KAAGU,KAAA,SAAS,gBAAgB+F,8BAA+BC,EAAAA,IAAAA,SAAAA,cAAgBjG,IAAAmB,GAAA,MAAAA,EAAA,GAAApB,KAAA,MAA6BoB,KAAAA;QAAG+E;AAAAA,YAAAA,SAASC,GAAAA,CAAAA,OAAAA,MAAAA,MAAchF,GAAED,SAAMA,OAAK3B,GAAA,OAAO4B;aAAM;AAAA,cAAApB,KAAOoB,MAAEuB,EAAIxB,KAAGiC,GAAGzD,UAASwB,GAAIxB,MAAE0G,KAAAA,GAAKlF,SAAO,GAAC,yBAAiBmF,KAAAA,GAAYrG,yBAAiBsG,CAAAA,IAAAA;AAAAA,gBAAAA,QAAAA,GAAAA,MAA0BpF,KAAEoF,CAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,WAAAA,QAA4B/E,KAAG,CAAAL,GAAA3B,GAAMW,WAAWwB,EAAE,EAAEA,IAAI6E,IAAAA,GAAAA,WAAWlG,EAAAA,EAAOqB;AAAMhC,aAAAA,MAAE6G,QAAAA,OAAW7E,MAAG8E,GAAAA,UAAQD,GAAAA,UAAW7E,GAAG8C,WAAOhE,GAAGR,eAAcyG,GAAAA,YAAUA,MAAAA,GAAAA,UAAUA;UAAS/G;AAAAA,cAAEgH,SAAAA,IAAahH,IAAEgH,IAAAA,IAAAA,IAAAA;AAAAA,gBAAUlG;AAAGA,iBAAEiG,MAAAA,GAAQ,gBAAjqI1G,MAAWP,UAAQD,MAAGQ,MAAIE,MAAE,EAAIA,IAAAA,IAAAA,MAAOR,GAAAM,EAAA,GAAAG,EAAA;AAAA,iBAAaD,MAAGT,GAAA,CAAAS,MAAQA,cAAWwF,OAAMjG,GAAAO,EAAKJ,KAAEM,eAAUA,MAAOV,UAAGQ,MAAA,YAAAA,MAAqBE,cAAIF,MAAAN,GAAaQ,EAAAA,MAAGT,GAAAO,EAAA,KAAQE,EAAAA,IAAGF,IAAAP,GAAAO,EAAA,GAAAN,GAAUQ,EAAAA,GAAGC,EAAA;UAAA,EAAAX,IAAA4B,IAAAD,IAAAjB,IAAYA,EAAAA,GAAGN,GAAEM,CAAAA,GAAAA,MAAKP,CAAEO;mBAAUP,KAAEO,GAAAA,MAAQF,UAAu9H2C,EAAEzC,IAAEkD,MAAOvC,QAAIW,EAAA,IAAAA,KAAQ,CAAAA,EAAGG,GAAE/B,IAAEe,IAAAA,IAAAA,MAAMJ,oBAAmByC,IAAAA,IAAAA,IAAAA,KAAQrB,GAAAA,CAAGA,IAAEjC,GAACiC,OAAK3B,EAAER,IAAEU,CAAAA,GAAGoC,EAAA,GAAA,QAAAtC,GAAA,MAAAwB,KAAkBJ,GAAEjB,QAAMA,OAAKH,SAAOwB,GAAExB,EAAAA,KAAE,EAAGoD,GAAG5B,EAAA,CAAA;AAAA,UAAAc,OAAQ,WAAQhC,MAAAA,YAAYkB,KAAAJ,GAAMjB,WAAUwB,OAAIyB,GAAAA,SAAI,eAAanD,MAAA,CAAAuB,MAAYL,aAAWQ,MAAAA,OAAM8C,GAAAA,UAAO,EAAAjF,IAAA,SAAa4B,IAAIO,GAAG,OAAA,KAAA,GAAA,aAAoB8C,MAAAA,YAAYjD,KAAAJ,GAAA,YAAYqD,OAAMjF,GAAI,WAAA,EAAY2B,IAAAA,WAAGK,IAAUG,GAAER,SAAEyF,KAAAA;QAAUjF;AAAAA,eAAMiF;MAAAA;AAAAA,eAAa,EAAApH,IAAAC,IAAAC,IAAA;AAAUiC,YAAEgB;AAAEiE,wBAAY,OAACpH,KAAQA,GAACC,EAAA,IAAAD,GAAA,UAAaI;QAAEI,SAAOR,IAAA;AAAA,YAAA,IAAAA,IAAAE,EAAA;QAAA;MAAA;AAAA,eAAuBE,EAAGH,IAAEoH,IAAAA,IAAAA;AAAAA,YAA6B1G,IAAnBD;AAAA,YAAMT,EAAAA,WAAWO,EAAE,QAAER,EAAA,IAAS8D,KAAE7D,GAAEG,SAAKO,GAAIX,WAASsH,GAAAA,YAAWA,GAAAA,OAAQrH,EAAAA,IAAID,MAAIyD,EAAAA,IAAAA,SAAS4D,KAAAA,GAAAA,MAAWA;AAAAA,cAAAA,GAAAA,qBAA0BjH,KAAI;AAAA,YAAAO,GAAA,qBAAsB4G;UAAAA,SAAAA,IAAAA;AAAAA,cAAAA,IAAqBvH,IAAAC,EAAA;UAAID;AAAAA,UAAAA,GAAEuH,OAAAA,GAAAA,MAAAA,MAAAA,GAAAA,MAAuB;QAAMtH;AAAAA,YAAGE,KAAE+B,GAAAA,IAAM9B,MAAKgC,KAAAA,GAAAA,KAAKpC,GAAE6C,QAAInC,KAAOc,CAAAA,GAAAA,EAAAA,KAAAA,EAAIb,GAAOD,EAAA,GAAGV,IAAEC,MAAEoB,cAAYX,OAAII,GAAAA,IAAOJ;AAAIV,QAAAA,MAAEU,QAAQA,GAAAA,OAAKF,EAAGR,GAAA,GAAA,GAAAA,GAAA,KAAAA,GAAA,MAAmBC,GAAEiB,MAAAA;MAAS;AAAA,eAAQgB,EAAK7B,IAAEJ,IAAEiC,IAAAA;AAAAA,eAAUjC,KAAEiC,YAAUlC,IAAOE,EAAA;MAAA;AAAA,eAAWD,EAAEE,IAAEC,IAAGF,IAAA;AAAA,YAAO2B,IAAAA,IAAAA;AAAKH,UAAAA,MAAAA,EAAAA,GAAYzB,IAAEG,EAAAA,GAAGM,MAAAC,KAAA,cAAeX,OAASW,MAAET,OAAI6B,MAAI5B,GAAE4B,OAAKvB,GAAGG,KAAGD,KAAE,CAAA,GAAA,EAAAT,IAAAD,MAAA,CAAAW,MAAAT,MAAAD,IAAmBD,MAAG,EAAKA,GAAAA,MAAKqB,CAAAA,EAAAA,CAAKb,GAAEa,MAAAA,GAAInB,GAAE,WAAOE,GAAIM,iBAAiB,CAAAC,MAAAT,KAAME,CAAAA,EAAAA,IAAIO,KAAAA,OAAKC,GAAAA,aAAaoC,EAAAA,KAAAA,GAAAA,UAAoBhD,IAAGA,MAAKQ,IAAA,CAAAG,MAAKH,KAAEgH,KAAAA,KAAAA,GAAAA,MAAWvH,GAAEqG,YAAOQ,EAAAA,GAAAA,EAAAA,IAAAA,EAAY;MAAA;AAAA,eAAW9G,IAAEA;AAAEW,eAAIuB,uCCGpyQ,QAAO,SAAA,SAAAlC,IAAA;AAAA,cAAAC,KAAA,KAAA,KAAA,OAAuCsE,IAAAA;AAAQ,kBAAS,OAAAvE,KAAAC,KAAU2D,IAAAA,KACvE,GAAMjD,SAAK8G,EAAKC;QAAAA,CAAAA;MAAAA;AAAAA,UAAAA,EAAiB,OAEjC,IAAA,EADW,KAAA,SAAsB1H,IAAAC,IACxB0H,IAAAA,IAAAA;AAAAA,iBAEbjH,IDRkhST,IAAEC,IAAEuE,KAAAA,GAAAA,KAASvC,MAAIxB,KAAAT,GAAA,QAASA,CAAEE,GAAEC,GAAEI,KAAG;AAAA,eAAIA,KAAIR,GAAEU,gBAAY,QAAQc,GAAAA,6BAAwBE,GAAAA,SAAclB,GAAA,yBAAQoH,EAAAA,CAAAA,GAAAA,KAA2B5H,GAAE6H,MAAAA,QAAWD,GAAAA,sBAAAA,GAAAA,kBAAsC5H,IAAMA,MAAE8H,CAAAA,CAAAA,GAAAA,KAAAA,GAAAA,MAAAA,GAAAA,QAAsBA,GAAAA,MAAAA;QAAAA,SAAAA,IAAAA;AAAkB7H,UAAAA,KAAEO;QAAAA;AAAAA,cAAOG;MAAEX,EAAAA,GAAEuB,IAAAA,GAAKZ,IAAE,SAASuE,IAAAA;AAAAA,eAAM,QAASjF,MAAI,WAAOD,GAAGI;MAAM,GAAA,EAASH,UAAU,WAAMA,SAAYA,IAAEyB,IAAAA;AAAAA,YAAAA;AAAAA,QAAAA,KAAW,QAAI0D,KAAAA,OAAUyC,KAAAA,QAAS,KAAS5H,QAAK,KAAMG,MAAE,KAAMyB,MAAK6D,EAAAA,CAAAA,GAAK7D,KAAK6D,KAAM7D,GAAAA,cAAWA,OAASA,OAAK6D,KAAAA,GAAI5C,EAAE,CAAE,GAACjB,EAAAA,GAAAA,KAAK0D,KAAO,IAAAvF,MAAA,EAAAE,IAAAF,EAAA,GAAA,QAAmBC,MAAIA,KAAI6C,QAAK1C,MAAGyB,KAAKV,IAAAA,KAAW2B,EAAAA,GAAE1C,EAAEH,IAAG;MAAA,GAAMA,EAAAA,UAAQ0C,cAAc6C,SAASrF,IAAGiD;AAAEvB,aAAAA,QAAUuD,KAAAA,MAAU2C,MAAAA,MAAAA,KAAAA,IAAY,KAAA/H,EAASC,GAAAA,EAAG4B,IAAKc;MAAAA,GAAAA,EAAMd,UAAS,SAAMA,GAAAA,IAAKJ,CAAAA,GAAIY,EAAAA,MAAKpC,GAAGmD,IAAEvB;AAAAA,UAAM,IAAcwD,WAAW;AAAA,iBAASrF,GAAEW,IAAE;AEAnqT,eAEnCqH,MAAAA,QAAAA,KAAA,MAAAhI,MAAA,EAGR;QAAA;AAAA,eAAYiI,EAAAA,IAAAA,CAAOpG,EAAAA,KAFFqG,MAAAA,KAAG,WAGbA;AAAMD,iBAKZ,KAAA;QAJAE,EAAAA,CAAAA,CAAAA,GAAAA;MAAAA,EAAAA;AAAAA,eAED,EAAAnI,IAAA;AAAA,eACE,EAAAA,GAAA,iBACD,QCJG,EAAA,yBACWoI,EAAAA,QAAAA,GAAAA,QAAiB,EAAA,CAAQ;MACtCrB;AAAAA,eAAAA,EAAAA,IAAAA,IAAAA;AAAAA,eAAyB,EAAEG,GAAAA,EAAAA,SAAcmB,IAAAA,eCD7BC,GAAAA,CAAAA;MAAKD;AAAAA,UACnB,GAAA,IAAwBA,SAAkBD,IAAAA;AAAAA,iBAAeA,GAC3DnI,IAAA;AAAA,cCMCsI;AAAAA,kBAAAA,KAAAA,GAAAA,KCPC,IAAA,KAAAC,MAAA,OAAAC,QAAY5B,GAAAA,OAGQ5G,EAFlByI,GAAOF;QAAAA;AAAAlC,UAAAA,IAAAA,EAAAzE;AAAAA,YAAAA,KAAAA,GAAAA;AAHFgF,eAKA8B,GAAAA,OAAO9B,SAHd2B,IAAAA;AAIC,iBAAAC,cAAArD,cAEO,EAAApF,GAAA,SACN,IAAAA;QAAA,GAAAE,GAAI2G,SAAAA,SAA2B+B,IAAAA;AAAAA,iBACjB/B,KAAKgC,OAAAA,KAIrB,KAOOF,EAAAA,GAAAA;QAAA,GAAA1I;MAAA,EAAA,CAAA,GAAO4G,IACPA,SAAYiC,IAAAA;AAAAA,iBAEnB7I,GAAAA,IAtBA;AAJiB+H,cCDTe;AAAAA,kBAAAA,KAAAA,GAAAA,KAAA,IAAA,KAAAP,MAGR,SAAYQ,QAAcN,GAGC,QAFzBA,MAAOF,CAAAlC,GAAAA;QAAAA;AAAAA,UAAAzE,IAAAA,EAAAA;AAAAA,YAAAA,KAAAA,GAHDoH;AAAAA,eAKDD,GAAAA,OAAiB,SANhBR,IAAAA;AAOP,iBAEMU,KAAAA,OA6BNlJ,EAAA;QAAA,GAAAW,GA7BMuI,UAAA,WAAKC;AACV,iBAAWtH,KAACoH,MAAAA,IACd,SAUOG,IAAA;AAAA,mBAAApJ,GAAA;UACL,CAAA;QAAA,GAAO6B,GAAAA,YAAWwH,SAAIrJ,IAAA;AAACkJ,iBAAI,IAAAjJ,GAAU4G,GAAAA,IACvC,SASOyC,IAAAA;AAAAA,mBAAP,IAAiBN,EACfhJ,GAAA,IAAA;UAAW+I,CAAAA,CAAAA;QAAAA,GAAAA,EAAIC,IAAMK,CAAAA,EAAAA,KAAI,SAACH,KAAI,WAAcA;AAAAA,iBAAU,KApBxDf;QAAA/G,GAAAA,KAAA,SAAApB,IAAA;AAAA,eAAA,SACEA;QAAA,EAAA,GAAW6B,EAAAA,KAACoH,UAGdM,KAAA,WACE1H;AAAAA,iBAAKoH,KACP,MAAC7H;QAAA,EAAA,CAAA,CAAA,GAAAoI;MAAAA,EAAAA,CAiBD,GAAA,IACE,SAAYR,IAAAA;AAAMlI,iBACpBb,GAAC8I,IAtCO;AAAQf,cCEJyB;AAAAA,kBAAAA,KAAAA,GAAAA,KAAA,IAAA,KAAAjB,MAIZ,QAAYkB,QACVhB,GAQC,UARDA,QAAApC,GAAAzE,OAAAA,cAJM8H,QAAAA,KAAAA,cACAC,IAAO,CAMXlB,EAAAA,IAAKgB,CAAAA,GAAAA;QADHA;AAAAA,eAAAA,EAAAA,IAAAA,EAAgBnG,GAAAA,GAAAA,UAETmG,UAAgBX,WATTf;AAAAA,iBAAR6B,KAAArB,KAiCLY,IAAAA,SAAAA,IAAAA;AAAA,mBAAApJ,GAAA,QACL;UAAO6B,CAAAA;QAAAA,GAAAA,GAAK6H,WAAS,SAACI,IAAAA;AAAAA,iBAAWA,IAACV,GAAAA,GAAAA,IACpC,SASOW,IAAAA;AAAAA,mBAAP,EAAA,UACE/J,GAAWyJ,KAAQC;UAAAA,CAAKL,CAAAA;QAAAA,GAAIpJ,GAAA,YAAC6J,SAAYR,IAAAA;AAAAA,iBAAUQ,IAAId,IAAAA,KAAM,SAUxDgB,IAAAA;AAAAA,mBAAP,CAAAhK,GAAA,CAAA,KACE6G,GAAAA,CAIA,aAAW4C,QChETzJ,KAAA,CAAAA,EAAA;UAAA,EAAwB6G,EAAAA,GAC5B,IAAA,SAAiBA,IAAK;AAAA,mBAAA,IAActD,EAAAA,GAAAA,IAC3B,SD+DA8F,IAAAA;AAAAA,qBAAI,IAACS,EAAG9J,EAAA;YAAA,CAAA,CAAA;UAAA,CAAA,CAAS+I;QAAAA,GAAAA,EAAAA,IAAIe,CAAIT,EAAAA,KAAI,QAAA,KAACH,WAAaT;AAAAA,iBAAY,KA7ChEN;QAAA,GAAA/G,KAAA,SAAAoI,IAAA;AAAA,eAAA,QACExJ;QAAA,EAAA,GAAA,EAAO6B,KAAAA,UACR0H,KAED,WAASG;AACP7H,iBAAK8H,KACP,WAEA,KAAA,KAAAH;QAAA,GAAA,KAAA,SACExJ,IAAA;AAAA,eAAY4J,UAAW/H;QAAAA,EAAK6H,CAAAA,CAAAA,GAAAA;MAAK5I,EAAAA,CAAAA,GAAAA,IAInC,WACO8I;AAAAA,iBACP5J,KA/BoBgI;AAAAA,eE8BTiC,YAAAA;QAAAA;AAAAA,YAAAA,KAAAA,GAAAA;AAAAA,eAAAA,GACHC,OAAAA,SAAAA,IAAS;AAAA,eAAAC,cAAA/E,KA8DhB,YAzDO,CAAA,IAAApF,MAAA,CAAA,KACD6B,UAAKqI,EAAAA,MAAAA,KACRrI,UAAKqI,EAAY,IAClB,CAAA;QAEGnF,GAAAA,GAAUlD,YAAKqI,WACjBrI;AAAAA,iBAAKqI,KAAAA;QAERC,GAEDC,GAAAA,KAAAA,SAAApK,IAAAC,IAAA;AAAA,iBACE,KAAW4B,KAACqI,EAAAA,GAAAA,KACbC,UAEDnK,EAAA,EAAA,KAEEqK,EAIA,GAAA;QAAA,GAFAxI,GAAAA,MAAKyI,SACLzI,IAAKqI,IAAAA;AAAAA,cAAAA,KAAAA;AAAUnF,iBAAsBsF,KAEvCxI,KAEA0I,GAAAA,KAAA,UAEEF,EAAAA,KAEA,MAAkBtF,KAIlB,UAFKuF,EAAAA,EAAAA,UAEKJ,KAAAA,UAA6DhK,EAAA,IAArC2B,KAAKqI,UAAUM,EAAAA,EAAW1J,OAAAA,SAKvDoJ,IAAAA;AAAAA,mBAAuBrI,MAAAA;UAAAA,CAAKqI,GAAAA,QAAAA;QAAUM,GAAWC,GAAAA,OACpD,SAACxF,IAAK;AAAA,cAAAhF,KAAUgF,WAGXpD,KAAAA;AAPEA,iBAUX6I,KAAA,KAAAxK,EAAA,GAAA,KAE2C,UAAAW,EAAAA,EAAAA,SAMzC,MAAA,KAFAgB,UAEIA,EAAAA,EAAAA,QAAKqI,SAAqBpJ,IAAAA;AAAAA,mBAC5Be,GAAAA,MAAKqI,QAAUM,CAAAA,EAAWzE,MAAAA,KAAQ9F,IAAA,CAAA,CAAA;UAACgF,CAAAA,GAAK;QAAA,GAAAjF;MAAA,EAAUiF;AAAA0F,eAAAA,EAAA3K,IAAAC,IAAAwE;AAAAA,YAAAA,OAAAmG,MAAA,OAEnD3K,GAGH,QC7Fc4K;AAAAA,YAAAA,SAAyBC,MAEvC,SAAA7K,GAAA,QAAe8K;AAAAA,YAAYD,YAI3B,OAAa9K,GAAA,QAAiBA,OAAT8K;AACnB,YAAA,MAGF,QAAoB9K,EAAA,KAAA,MAAA,QAGlBC,EAAA,GAAO8K;AAAAA,cAASD,GAGlB,WAAUtH,GAAAA,OAAQuH,QAASxH;AAAMC,mBAAQsH,KAAAA,GACvC5K,KAAAF,GAAI+K,QAAKjK,KAAWgK,KAAKhK,CAAAA,EAAAA,GACvBZ,EAAA,GAAAD,GAAAC,EAAA,CACD,EACD,QAAK;AAAKM,iBAAUuK;QAAKjK;AAAAA,YAAAA,GAAQN,eACPsK,aACf,KAGX7K,GAAA,eAKK+K,aAAe,KAAAhL,GAAA,eAEfgL,OAAAA,KAAAA,GAAe,eAEpBD,OAAKC,KAAAA,GAAAA,eAELF,KAAKE,KAAAA,GAAAA,eAAe,KAEfA,KAAAA,GAAAA,eAAe,KAEfA,KAAAA,GAAAA,eAAe,KAEfA,KAAAA,GAAAA,eAAe,MAEfA,KAAAA,GAAAA,eAAe,MAEfA,EAAAA,QAAAA,EAAAA,GAAe,OAAA/K,GAEpB6K,KAAKE;AAAAA,YAAAA,KAAAA,OAAe,KAEpBhL,EAAA,GAAAU,KAAA,OAA6B,KAAGoK,EAAAA;AAAY,YAAAnK,GAAA,WAGhCsK,GAAAA,OAAOC,QACPD;AAAAA,iBAAOC,KAAKJ,GAC1B1K,KAAAO,IAAIwK,KAAMrK,GAAAA,QAAWsK,MAAMtK;AAAAA,cACzBgC,KAAA1C,GAAAI,EAAA;AAAO,cAET,CAAAP,GAAA,eAAyBa,EAAAA,KAAAA,CAAAA,EAAAuK,GAAAA,EAAAA,GAApBpL,GAAA6C,EAAA,CAAM1B,EAETkK,QAAA;QAAA;AAAKR,eAAKE;MAAAA;AAAAA,OAAAA,SAAe5J,IAAAA;AAASyJ,QAAAA,GAAUE,GAAK3J,YAC/C,CAAA,IAAA,aAINpB,GAAAA,GNjEA,eACEuI,CAAAA,IAAA,gBAAAvI,GAAAA,GAAA,aACA,CAAA,IAAA,cAAAA,GAAAA,GAAA,cACAuI,CAAA,IAAA,eAAAvI,GAAAA,GAAA,YACAuI,CAAA,IAAA,aAAAvI,GAAAA,GAAA,cACAuI,CAAAA,IAAA,eAAAvI,GAAAA,GAAA,SACAuI,CAAAA,IAAAA,UAAAvI,GAAAA,GAAA,OAAA,CAAA,IAAA,QAAAA,GACAuI,GAAAA,QAAA,CAAA,IAAA;MAAA,EAAA,MACAA,IAAAA,CAAA,EAAA;AAAA,UAAA,KACA,SAAAvI,IACD;AAVD,iBAUCC,GAAAA,IAWD;AAAA,cAGEsL;AAAAA,kBAAAA,KAAAA,GAAAA,KAAA,IAAA,KAAAC,MAQA,KAAA,QACEtL,GAAA,SAKgC,QALhCoG,GAAAA,SAAAzE,CAAAA,GAAQA,GAAAA,KAAAA,EARMoG,GAAAA,MAAAA,GAAE,SACVwD,EAAAA,GAAAA;QAAAA;AAAAA,UASNxL,IAAAyI,EAAAA;AAAK+C,YAAAA,KAASxL,GAAO;AAGjBkB,eAAYuK,GAAAA,UAASvK,WAC1B;AAAA,cAAAoK,KAAAnG,CAAAA,EAAAA,MAAAA,KAAAA,SAQDuG;AAAAA,eAAA,yBACErF,YAAAzF,KAAIgB,cAAK+J,MAAAA,MAAAA,EAAAA,GAAAA,KAAAA,KAAAA,MACFA,MAAAA,CAAAA,eAAL/J,EAAAA,OAGFA,EAAAA,CAAAA;AAAK6I,cAALC,KAAAA,KAAA9I,SAAU,MAAA,MAAA7B,EAAA;AAAA,iBAAoB6L,KAC9B,KAAehK,MAAKiK,MAAAA,CAAAA,cAAYD,EAEhC,OADAhK,EAAAA,CAAAA,GAAK6I;QAAAA,GAAAA,GAAAA,WAAL7I,SAAU7B,IAAA;AAAA,cAAAC,KAAA,EAAc8L,CAAAA,GAAAA,KAAKF,QAI/BH,EAAAA;AAAAA,iBAAA,EAAAzL,IAAA,KAASkB,MACW6K,MAAA,KACbnK,SAAK4J,IAAAA,KASV,KAAA,gBALkCA,IAAAA,IAChC5J;QAAK4J,GAAAA,EAAAA,IAASO,CAAAA,EACdnK,KAAAA,SAAU,KAAA,WAAgBA;AAAAA,iBAAAA,KAI7BsG;QAAA/G,EAAAA,CAAAA,CAAA,GAAAnB;MAAA,EAAA,CAAA,GAAAuJ,KAGC,SAAW3H,IAAC4J;AAAAA,iBACdxL,KAlDA;AAAQgK,iBOdJgC,GAAAA,MAAAA,MAQJH,SAAAA,KAAAA;QAAAA;AAAAA,eAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,UAAAA,WAAAA,SAAAA,IAAAA;AAAAA,iBAAAA,KAAAA,MAAAA,WAAAA,KAAAA,OAAA,KAASjF,MACP,OAAIhF,EAAKV,KAAAA,GAAM+K,KAAAA,KAAAA,MAEXC,SAAOtK,KAAKV,KAAM+K,MAAAA,qBACb/K,KAAAA,IAAMiL,KAAAA,KCpBjBC,MDqBMxK,UAAWwK,KAAAA,GAAAA,QAAAA,4BAEAC,MClBjBJ,GAAUA,IAAQ3H,EAAAA,GAAAA,KAAQ,OAAA,SAAAvE,IAAAU,IAAA;AAAA,mBAA4BV,GAAA,MAE3CyJ,KACDC,SAAKe,IAAOrK,IAAA;AAAA,kBAAA,CAAAJ,GAAC8J,QAAa;AAAA,kBAC7BA,MAACd,MAAAA,GAAMpG,EAAAA,KAAK,YAACsG,OACdhJ,GAAKgJ,EACH,KAAAhJ,GAAAE,EAAA,EAAO,OAKLgM,QACQG;AACsB,kBAAAzJ,KAAA;AAAA,kBAAA,cAEVsJ,OACJI,GAAAA,CAAAA,KACdhM,GAAAR,GAAA,MAKNU,IAAAN,EAAA;uBAEwB,YAAA,OAAAJ,GAALsM,MACDpD;AAAAA,oBAAKrC,KAAM4F,GAAUF;AAAAA,gBAAAA,MAC5BlM,GAAA,SAAqBA,GAAA,MAAA,YAAUyC,KAExCzC,GAAA,MAAqBwG;cACN6F,MAAQvL,CAAAA,KAASuL,OAAQvL,GAAMkH,IAAAA;AAAAA,qBAE7BlH,IAAAA,OAAMkH,IAAAA,IAExB,EAAA,KAEQ8D,EAAAA;YAAAA,CAAAA;UAAAA,CAAOjD,CAAAA,KAAKrC;AAAAA,cAGrB5G,IAAAC,IAAAS,IAAOD,IAAAF;QAAA,GAAA,EAAAP,IAAA,CAAWiM,EAAAA,KAAS,QAAM9H,KACnC,WA9CJ8H;AAAAA,iBAGAS,EACAL;QD0BA,EAAA,CAAA,CAAA,GAAArM;MAAA,EAAA,EAAA;AAAA,eAhBA,KAAA;AAAA,YACED,KAAA;AAAqB4M,eACvB,KAAA5M,KAN+BuL,CAAAA,EAAAA,MAAAA,KEdRsB,SACvB,EAAe,OAAA,SAEf7M,IAAU8M,IAAS;AAAA,iBAAAxG,KAAAA,MAAAzF;QAAAA,GAAAA,EAAAA;MAAAA;AAAAA,eAAKkM,KACtB;AAAA,eAACC,CAAcC,EAAAA,MAAW,KAAgBA,SAG9C,EAEgB,IAAA,SAGdjN,IAAA;AAAA,iBAAOyE,KAAAA,GAAAA,SAAA5D,IAAAA;QAAAA,CAAAA,EAAAA,OACA,SAACyC,IAAC;AAAA,iBAAUA;QAAAA,CAAEqE,EAAAA,OAAAA,SAClB8C,IAAAA,IAAAA;AAAO,kBAAAzK,MAACsD,MAAAA,MAAAA;QAAOA,GAAA,EACfyJ,EAAAA,KAAO;MAAA;AAAA,UAAA,IAACF,IAAWG,IAAAA,IAAAA,KAAmC,SACtDE,IACL;ACfsB,iBCJiBvM,KAAEP;AAAEI,iBDarC2M,GAAAA,MAAAA,MAQJrB,SAAAA,KAAAA;QAAAA;AAAAA,eAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,UAAAA,WAAAA,SARqCP,IAAAA;AAAAA,cAAAA,CAQrCO,KAAAA,MAAAA,QAAAA,QAAAA;AAAA,cAAA7L,KAAA,CAAA;AAASmN,iBACFvL,KAAKV,MAAM+K,QAAAA,GAAS,MAAA,KAEzB,MAAgB,IAUhBlM,GAAA,KARI6B,KAAKV,MAAMkM,OACbC,IAAa,KAAIzL,MAAKV,SAAUiM,GAAQC,OAAKxL,KAAKV,MAAM+K,KAAAA,GAAAA,MAGtDrK,KAAKV,MAAMoM,OACC,IAAI1L,EAAAA,CAAAA,GAAKV,IAAAA,EAAAA;QAAAA,GAAMoM,EAAAA,IAAAA,CAAKH,EAAAA,KAAQG,QAAWpM,KAAAA,WAAM+K;AAAAA,iBAIxDkB,EACAE;QAnBPlM,EAAA,CAAA,CAAA,GAAAnB;MAAA,EAAAuJ,EAAAA,GAAA,KAAA,GAAA,KAAA,CAAA,GACE,KAAA,CAAA,GAAA,KAAqBgE,EAAAA,KAAAA,KAAAA,EAAAA,KACvB,KANqCjC,EAAAA,QCbQ,KAAE3K,EAAE,KAAGgD,KAAE,EAAG1D;AAAIoB,eAAQmB,GAAIxB,IAAEhB,IAAEoG;AAAAA,UAAAA,OAAOlG,EAAEF,IAAEuB,IAAI0B,IAAEjD,MAAEqH,EAAAA,GAAAA,KAAQ;AAAA,YAAApH,KAAS0B,GAAE5B,QAAKC,GAAEwB,MAAKxB,EAAEwB,IAAAA,CAAId,GAAAA,KAAID,CAAAA,EAAAA;AAAGN,eAAOJ,MAAIQ,GAAEG,GAAE8M,UAAM9M,GAAE8M,GAAI,KAAI,EAAA,KAAGhM,GAAI,CAAA,GAAAvB,GAAK,GAAAF,EAAA;MAAA;AAAOA,eAAQc,GAAAA,IAAAA;AAAAA,eAAauB,KAAAA,GAAMqL,SAAQlN,IAAEuB,IAAAA,IAAG/B;AAAE,cAACW,KAAA,GAAA,MAAWV,CAAAA;AAAG,cAAAU,GAAA,IAAOD,IAAE,CAAAC,GAAS,QAAAA,GAAWV,KAAEG,CAAEI,GAAG,QAAMoB,EAAAA,GAAE5B,SAAOA,IAAGU;AAAEV,gBAAEC,KAAGS,GAAEc,MAAAA,GAAMd,IAAK,CAAQiN,IAAAA,GAAAA,GAAAA,CAAE,GAAOvN,KAAAA,GAAG,EAAAH,IAAAD,EAAA;AAAA,YAAAC,OAAYC,OAAIF,GAAEU,MAAEkN,CAAAA,IAAIlN,GAAEkN,GAAI,CAAA,CAAA,GAAGlN,GAAEqB,IAAG,SAAW9B,CAAAA,CAAAA;UAAGD,CAAAA,GAAIW,GAAAA,MAAMiN,IAAAA,CAAI,GAAGlN,IAAEqB;AAAAA,eAAG,IAAIrB;AAAEc,gBAAIqG,KAAAA,GAAAA;AAAyBlH,eAAEP,wBAAmB0F,SAAAA,IAAAA,IAAAA,IAAAA;AAAAA,kBAAsBnF,CAAAA,GAAEmF,IAAAA,IAAAA,QAAAA;AAAAA,kBAAAA,KAAsBnF,GAAA,IAAA,IAAWX,GAAEW,OAAOD,SAAUV,IAAA;AAAA,uBAASA,GAAA;cAAMU,CAAAA;AAAEc,kBAAIiM,GAAAA,MAAOhD,SAAOzK,IAAA;AAAA,uBAAY,CAAAA,GAAA;cAAA,CAAOC,EAAEuB,QAAM,CAAAd,MAAGN,GAAEyN,KAAM,MAAA7N,IAAAC,IAASA,EAAAA;AAAG,kBAAAG,KAAA;AAASwN,qBAAMpN,GAAA,QAAUI,SAAOiB,IAAK5B;AAAAA,oBAAIU,GAAAA,KAAG;AAAIH,sBAAEP,KAAGD,GAAA,GAAA,CAAOI;AAAE2F,kBAAAA,GAAAA,KAAAA,GAAAA,KAAQ/F,GAAA,MAASC,QAAMA,OAAE2N,GAAK,GAAA,CAAI5N,MAAI+B,KAAAA;gBAAG;cAAG9B,CAAAA,GAAE8B,EAAG9B,CAAAA,MAAE2N,GAAI3N,IAAE2N,UAAI5N,QAAWC,CAAAA,MAAE8B,GAAG,KAAKvB,MAAMR,IAAAC,IAAAC,EAAA;YAAMM;UAAAA;AAAGE,iBAAMS,GAAAA,OAAQlB,GAAAA;QAAAA,EAAMW,IAAGA,EAAAA;MAAE0F;AAAAA,eAAUrG,GAAED,IAAEW,IAAG;AAAC,YAACT,KAAA,GAAOQ,MAAEkN,CAAKlN;AAAEqB,SAAAA,EAAjlBoB,OAAIlD,GAAglBC,GAAA,KAAAD,EAAA,MAAWG,GAAEI,KAAGR,IAAAE,GAAIQ,IAAEkB,IAAAA,GAAE5B,IAAI,IAAIC,KAAEyF,EAAKzC;MAAAA;AAAEvC,eAAMF,GAAKE,IAAEqB;AAAAA,eAASvB,KAAEG,GAAE8M,GAAAA,WAAa/M;AAAAA,iBAAoF,EAAA,SAAWT,GAAAA;QAAAA,GAAG,CAAA,CAAA;MAAA;AAAA,eAAW6N,GAAE9N,IAAAC,IAAA;AAAA,YAAWC,KAAA,GAAA,MAAOmH,CAAAA;AAAAA,eAAY,GAAyLnH,GAAA,KAAAD,EAAA,KAAS6N,GAAE7N,MAAEU,GAAG,GAAAT,GAAIE,IAAEwB,IAAE5B,GAAAA,MAAIA,IAAGE,GAAA,OAAO+C,GAAAA;MAAE7C;AAAEqN,eAAQrN,KAAEsN;AAAIzN,iBAAQU,IAAEP,KAAEqB,GAAAA,MAAQiM,IAAAA,KAAO3L,GAAE,OAAqiB/B,GAAA,IAASoD,KAAAA;AAAI,UAAApD,GAAA,IAAI,IAAMA,QAAI+N,EAAAA,GAAAA,GAAS,IAAG/N,IAAE6C,QAAW,EAAA,GAAI7C,GAAEyN,IAAIhM,MAAIsE,CAAAA;QAAAA,SAAQ5D,IAAAA;AAAGnC,UAAAA,GAAEyN,IAAIhM,MAAIsE,CAAAA,GAAAA,EAAAA,IAAQ1C,IAAAA,GAAGrD,GAAEyN;QAAAA;MAAIhM;AAAAA,QAAAA,MAAO,SAASzB,IAAEyN;AAAAA,aAAIhM,MAAI,MAAKS,GAAAA,EAAIvB;MAAAA,GAAEX,EAAE2C,MAAK,SAAO3C,IAAA;AAAA,cAASC,GAAGU,EAAAA,GAAE,KAAA;AAAKT,YAAGA,MAAED,KAAED,GAAEC,KAAM;AAAA,QAAAA,OAAA,OAAYI,MAAGA,GAAEJ,MAAGD,CAAAA,GAAE,GAAE,MAAIQ,CAAGG,GAAAA,GAAEV,GAAEuB,QAAShB,SAAQG,IAAAA;AAAGH,UAAAA,GAAEiB,QAAIzB,GAAGW,KAAEc,GAAAA,MAAOjB,GAAEuB,MAAGgE,IAAAA,GAAAA,MAAQ/F,GAAA,IAAA;QAAYC,CAAE2N,MAAAA,GAAM3N,IAAE8B,QAAU9B,EAAEyN,GAAAA,GAAI9J,IAAE3D,QAAQO,EAAAA,GAAAA,GAAE,MAAM,CAAA,KAAOiB,KAAIsE;MAAAA,GAAAA,EAAAA,SAAWvF,SAAMuF,IAAAA;AAAAA,cAAQ1C,GAAK5B,EAAAA;AAAAA,YAAIxB,KAAKG,GAAAA;AAAG,QAAAH,MAAIoG,GAAAA,QAAOpG,GAAA,IAAA,IAASD,WAAQA,MAAG,GAAIU,KAAIc,EAAAA,KAAId,OAAK+M,EAAAA,2BAA6B7M,KAAEyB,EAAAA,0BAAe2L,IAAAA,EAAAA,IAAAA,GAAAA,IAAyBxN,GAAEP,QAAE+N,SAAAA,IAAAA;AAAAA,UAAAA,GAAAA,MAAwBrK,GAAAA,MAAGP,GAAAA,IAAMqK,GAAAA,QAAO1H,OAAAA,GAAQ,KAAA/F,GAAA,MAASC,GAAGA,IAAEO,QAAMiN,GAAAA,MAAMjN;QAAGP,CAAAA,IAAEyN,KAAAA,KAAM9J;MAAI3D,GAAE8B,EAAG9B,MAAEyN,SAAOlN,IAAAA,IAAE;AAAOP,QAAAA,GAAEyN,KAAI9J,SAAOjD,IAAE;AAAA,cAAI;AAAA,YAAAX,GAAEC,IAAEuB,QAAI,EAASxB,GAAEW,GAAAA,MAAKiC,GAAAA,IAAK,OAAS5C,SAASyB,IAAAA;AAAAA,qBAAIsE,CAAAA,GAAQ5D,MAAGnC,GAAEyB,EAAAA;YAAAA,CAAIzB;UAAAA,SAAMyK,IAAAA;AAAAA,YAAAA,GAAO,KAAA,SAAYzK,IAAA;AAAA,cAAAA,GAAOC,QAAMoD,GAAAA,MAAI,CAAsE;YAAnE,CAAA,GAAApD,KAAMG,CAAAA,GAAGO,EAAEiC,IAAAA,IAAK5C,GAAA,GAAA;UAAA;QAAA,CAASC,GAAAA,MAAKwB,GAAAA,IAAMxB,EAAAA;MAAEwB,GAAAA,EAAI,UAAQ,SAASrB,IAAEJ;AAAAA,cAAE2C,GAAK3C,EAAA;AAAGG,YAAGA,IAAEH,KAAEW,GAAE;AAAI2G,QAAAA,MAAAA,GAAAA,QAAQpH,GAAA,IAASF,GAAGkD,QAAKlD,SAASI,IAAEJ;AAAEwB,cAAAA;AAAIpB,eAAGA,EAAAA;UAAEqN,SAAMrN,IAAEqN;AAAAA,YAAAA,KAAI1L;UAAAA;QAAAA,CAAGgE,GAAAA,GAAAA,MAAQ,QAAA9F,MAASA,EAAG,IAAIkC,IAAAA,GAAElC,GAAG;MAAA;AAAA,UAASU,KAAG,cAAM8M,OAAW9M;AAAwB6B,eAAE,GAAAxC,IAAA;AAAA,YAAAC,IAAAC,KAAmB8N,WAAAA;AAAAA,uBAAsBrN,EAAA,GAAA,MAASgD,qBAAa1D,EAAA,GAAWgO,WAAAA,EAAAA;QAAa7N,GAAAA,KAAGoC,WAAG0L,IAAAA,GAAAA;AAAAA,eAAAA,KAAqBlO,sBAAoBuC,EAAAA;MAAAA;AAAAA,eAAa,GAAKC,IAAAA;AAAAA,YAAMwL,KAAAA,IAAAA,KAAAA,GAAAA;AAAAA,sBAA0B,OAAA9N,OAASiC,GAAElC,MAAG,QAAQG,GAAEH,IAAEuB,KAAIvB;MAAA;AAAA,eAAA,GAAAD,IAAA;AAAA,YAAmBI,KAAIH;AAAEuB,QAAAA,GAAAA,MAAAA,GAAI,GAAOpB,GAAAA,KAAKO;MAAAA;AAAEX,eAAE,GAASqD,IAAEpD,IAAAA;AAAG,eAAMU,CAAAA,MAAEV,GAAEuB,WAAMO,GAAKpB,UAAIV,GAAA,KAASgD,SAAOhD,IAAAC,IAAOD;AAAAA,iBAAKa,OAAAA,GAASd,EAAAA;QAAEc,CAAAA;MAAAA;AAAAA,eAAU8B,GAAK5C,IAAAC,IAAA;AAAA,eAAWU,cAAUX,OAAQC,KAAGA,GAAAD,EAAA,IAAAC;MAAA;AAAA,eAAaD,KAAG;AAAA,eAAM,SAAAA,IAAA;AAAA,cAAqBA,KAAEC,GAAGD,QAACA,GAAA,GAAA,GAAAE,KCI5uG,GAAA,MDJu3C,CAAA;AAAA,iBAAcA,GAAA,IAAIE,IAAEO,MAAEmB,QAAAA,GAAQ7B,OAAEuB,GAAKhB,KAAEoB,MAAE5B,GAAAA,IAAI,EAAG,IAAAC,GAAA,MAAWA,SAAKD,GAAA;QAAMQ,EAAEuB,EAAAA;MAAAA;AAAKvB,UAAEuB,KAAG,EAAG3B,QAAMO,EAAAA,aAAYsE,oBEAj9C,GAAAkJ,MACbC,EAAAA,SACEC,yBAAa,UAEf3L,yBACW,GAAA,YACT4L,EAAAA,UAAU,YAAA,MAAA,QAEZC,UAAAA,SACEC,IAAAA,IAAU;AAAA,eAAA,UACJxO,KAAA,SACNyO;MAAAA,GAAAA,MAAU,SAACC,IAAMC;AAAAA,eAAkBD,UAAAA;MAAAA,GAAWC,SAAK,WAC7C,IAAA,MAACD,IAAiBA,MAAAA,SAAI,UAC5BE,GAAS,SAAA,cAEL,gBACK,6BAEF,OACTC,4CACAC,GAAO,KAAA,WAAA;AAAA,iBAAA9O,GAAAA,IAAA;AAAA,eCdI+O,YAAAA,QAAAA,KAAAA,mBAIoBlN,QAHdmN,KAAAA,YAASnN,IAAAA,KACToN,mBAAAA;QAAAA;AAGf,YAAApN,KAAAA,GAAKmN;AAAYE,eACZD,GAAAA,YAAAA,SACNjP,IAAAC,IAAA;AAAA,cAAA,CAAAA,MAAA,CAAAD,GAAA,QA6CA;AApCDmP,cAAAA,KAAAA,GAAA,MAAA,GAAUC,GAAiBC,KAAAA,GACzB,CAAA;AAAKA,cAAAA,GAASD,EAAS,GAAA;AAAA,gBAAW1O,KAAAT,GAAAU,EAElC;AAAA,mBAAyB2O,YAAM,OACV5O,KAErB,WACE;AAAA,qBAAiBU;YAEjB,IAAA,cAAmB,OAAAV,KAAL6O,KACL,KAAA,UAAArP,GAAA,MACiB,CAAA,EAAA,KAAA,GAAA,GAAAQ,EAAA;UAAA;AAAA,iBAGbmB;QAACsN,GAAAA,GAAAA,YAAmB1K,SAAS+K,IAAK;AAAA,cAAMD,IAEtDrP,KAED,KAAA,UAGFuP,IAAAA,KAAAA,SAAA;AAAUL,kBAESM,KADDC,MAAG9N,KAAKsN,UAAUC,IAASvN,KAAKmN,gBAShD,KANIW,GAAAA,MAGmBR,QAAAA,CAAAA,EAAUC,MAASvN,KAAKoN,WAAAA,CAAAA,CAAAA,IAAAA;QAAAA,GAK9CtE;MAAAA,EAAAA;AAAAA,eAAA,KAAAlG;AAAAA,YAAA6B,KAAAA,GAAAzF;AAAAA,eAAA,SAGFZ,IAAA;AAGa2P,cAAAA;AAAAA,kBAAAA,KACd5P,GAAA,YAEA,UAAiBoP,MACflP,IAAA,CAAA2P,EAAAA,EAAA,OAAOC,CAAAA,EAAOC,MAAAA,KAAAA,WAAWN,CAAS9E,CAAAA,CAAAA;QAAAA;MAAAA;AAAAA,UAACyE,KAAOrD,SAAA/L,IAAAyE;AAAAA,eAAA6B,SAAAzF,IAAAA;AAAA,iBCjEvC,EAAA,CAAA,GAAAZ,IAAsB,EAAA,QAAC+P,EAAAA,SAAYhQ,GAAA,EAAA,CAAA;QAAA;MAAA;AAAA,eACxC,KACKuF;AAAAA,eACH6I,GAAAA,EAAAA;MACElC;AAAAA,eAGN,GAAClM,IAAA;AAAA,YAAAC,KAAA,GAAA,GCHCC,KAAA,GAAAF,GADeiQ,GAAAA,SCAOC,CAAAA,CAAAA,GAAAA,KAAAA,GAAAA,CAAAA,GAAAA,KAAe5D,GACrC,CAAA;AAAA,eAAc6D,GACgBC,WAAwBC;AAAAA,iBAAAA,GAA/ChJ,UAAmBiJ,WAc1B;AAZAC,gBAAUrQ,KAAAF,GAAAC,GAAA,SASR,CAAA;AARoBuQ,YAAAA,OAAMC,MAAAA,GAAAA,EAAAA;UAAU,CAAA;QAAA,GAAA,CAAA,CAAA,GAAA9P;MAAA;AAAA,eACT6P,KAAMH;AAAAA,YAAAA,IAAAA,KAAAA,GAE3BhJ,MACFqJ,GAAWC,KAEf1Q,GAGF,CAAG,GAAAU,KAGL0G,GCIgBuJ,CAAAA,GAAAA,KAAAA,GAAAA,GAAAA,KAAAA,GACd,QAAAN,KAAkCF,GAAAA,GAAAA,KAEhCS,GAFKC,EAAWC,UAGlB1Q,KAAA,GAAe4P,SACM7B,IAAAA;AAAAA,iBACXwB,GAAAA;QACWO,CAAAA;AAAba,WAAAA,WACMd;AAAY,UAAAhQ,MAAAA,GAAA,SAACqF,EAAAA,SAAgB6I,QAAM/N,KAEjDkQ,SAAUlQ,GAAA,QAGRyQ,CAAAA;QAAUpF,GAAAA,CAAAA,IAAAA,EAAAA,CAAAA,GAAS,GACjBQ,WAAAA;AAAAA,UAAAA,GAAS3G,GAAAA,SAAAA,IAAO2G,GAAAA,EAAAA,SAET4E,GAAAA,SAED,KAAAtQ,GAAA,OACEyQ,KAAAA,MAEsB9D,GAAAA,OAC1BjB,KAAS/K,CAAM+K,IAAAA,IAAAA,GACfmB,EAAAA,SAAW4D,GAAAA,SACX1D,SAAY0D,GAAAA,UAKdvQ,GAAA,OACEwL,SAAS/K,qBACO+P,GAAAA,uBAAwB9E,WACxCC,GAAAA,qBACQA,UAAAA,GAAAA,SACwBwE,CAAAA,CAAAA,GAA9B1P,GAAMkL,WAAAA,GAAAA,GAAAA,GAAAA,OACRC,CAAAA;QAAAA,GAAAA,CAAUnL,EAAAA,CAAMmL,GAAAA,GAAAA,WAMZJ;AAAAA,cAAAA,GAAAA,QAAwC/K,GAAM+K,SAC1D,SAEAqE,EAAU,GAAA,WACR;AAAA,mBAIA7P,GAAA,SAFOyQ,WAASC,EAAyBN;UAAAA;QAAAA,GAE5BhB,CAAAA,IAAAA,EAAAA,CAAAA;AAAAA,YAAAA,IAAAA,IAAAA,IAAAA,KAAOqB,SAASE,IAAAA,IAAAA;AAAAA,iBAA2BP,KAC1D,GAAIhB,GAAQgB,WCxEZQ;AAEWC,mBRJuzCvR;UAAA,GAAAC,EAAA;QAAA,GAAaD,KAAAA,SAAUU,IAAE;AAAA,UAAAV,GAAE8N,kBAAa,oBO8Et2ChL,GAAA,GAACiC,GACKA,OAAMyM,KAAAA,CAAAA;QAAAA,GAAAA,KAAAA,cAAkBC,KAAAA,GAAAA,mBACkBxM,MAAAA,GAEhD,WACA6L;AAAAA,cAAAA,KAAqB3D;AACXuE,iBAAAA,IAAmB,QC7E/B,SAAAzR,IAAA;AAAA,YAAAW,MAAAC,aAAAD,EAAA,GAAAA,KAAA,WAAY,WAAC+Q;AAAAA,qBAET1D,GAAAA,GAAAA,MAAasD,QAGLhP,CAAAA,EAAAA,MAAW,KAAAvC,EAAA,CAAA,CAAA;YAAA,GAAA4D,EAAA;UAAA,CAAA;QAAA,IAAA,CAAApD,IAAcoR,EAAAA,CAAAA;AAAAA,eAAAA,EAAAA,OAAAA,EAAAA,WAAAA,GAAc,GACnD,UD0EQd,SAGV9Q,KAAAU,GACOD,aAAAoM,SAAWA,GAAAA,MAAoB,CAAA,EAAA,GAAA,EAAA,SAAQgF,EAAAA,MAAShF,UAAAA,aAAWuB,GAAAA,oBAE5DlN,GAAK,cACLmN,GAAAA,oBAAe,GAAA,SACf1M,IAAA,WAAYK,GAAE,GAAA,OAAA,GAAA,GAAA,UACd8P,OACAjF,CAAAA,GAAAA,eAA+B,QAAAxM,KAAUwM,SAAUxM,GAAA,YAAU,GAAA,CAC7D0R,CAAAA;MAAAA;AAAAA,UAAAA,KAAcxM,SAAO2G,IAAAA;AAAAA,iBAAWjM,KE7FlB;AAAA,iBAOhB+R,GAAAA,MAAAA,MACMpG,SAAAA,KAAAA;QAAAA;AAAAA,UAAAA,IAAAA,EAAAA;AAAAA,YAAAA,KAAAA,GAAAA;AAAAA,eAAAA,GAAAA,gBAAAA,WAAAA;AAAAA,cAAAA,MAAAA,OADkBL,KAClBK,MAAAA,KAAAA,CAAA,KAAA,MAAA,OACJqG,KAAMC,MAAOrQ,IAAAA,CAAKV,EAAAA,OAAMgR,MAAAA,2BAAmCzD;QAAAA,GAAAA,GAC7D,WAAM0D,SAAMpS,IAAA;AAAA,cAAAC,KAAA,KAAA,MAAA;AAEfkK,iBAMS2B,IAAA,EAAA9L,GAAA,KAAS6G,MACX6H,KAAO7M,KAAKV,MAAMuN,QAIxBzO,KAAA,KAAO,KAAWwJ,MAAMC,KAAKjF,CAAAA;QAAAA,GAHfiK,EAAO7M,IAAAA,CAAAA,EAAKV,KAAAA,QAAMgR,KACZ,WAAUhR;AAAAA,iBAAMgR,EAAAA;QAPtCH,EAAAA,CAAA,CAAA,GAAA5Q;MAAAA,EAAA,EAAA,GAAA,KAAA,SACsBmH,IAAC8J;AAAAA,iBARK9G,KAAAA;AAAAA,iBCExB+G,GAAAA,MAAAA,MAQJxG,SAAAA,KAAAA;QAAAA;AAAAA,eAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,UAAAA,WAAAA,SARkCP,IAAAA;AAAAA,cAQlCO,KAAAA,CAAAA;AAAAA,iBAAAA,KAAAA,MAAAA,QAAA7L,GAAA,MAAA,KACE,MAAgB,IAkBhBD,GAAA,KAhBI6B,KAAKV,MAAMkM,MAAAA,KACA,MAAIxL,KAAKV,IAAMkM,KAClBA,MACRxL,SAAKV,GAAMuN,OACX7M,KAAKV,MAAMgR,KAAAA,GAAAA,MAIXtQ,KAAKV,MAAMoM,MACC,KAAI1L,MAAKV,KAAMoM,IAAAA,EAC3BH,CAAAA,GAAQG,IAAAA,EAAAA;QACR1L,GAAAA,EAAAA,IAAKV,CAAAA,EAAAA,KAAMuN,QACX7M,KAAKV,WAAMgR;AAAAA,iBAKV/E,EACAE;QAzBPlM,EAAAA,CAAA,CAAA,GAAAnB;MAAA,EAAA,EAAAuJ;AAAAA,eAAA,KACE;AAAA,YAAAxJ,KAAoBuI,GAACgK,GAAAA,KAAAA,GAAAA,YALWhH,KAAAA,GCQpBiH,QAAAA,KAAAA,GAAAA,SACF1C,KAAGG,WAUJ1B,MAAAA,IAAAA,KAAAA,GAAAA,YART0C,KACAwB,WAAAA,MAAAA,IAAAA,KAAAA,GAAAA,YAAcC,KACdC,WAAAA,MAAAA,IAAAA,KAAAA,GAAU,cACVC,KAAAA,WAAAA,KAAAA,IAAAA,IAAAA,KAAU3S,GAAA,OAAO4S,KAAAH,WACjBI,KAAAA,KAAAA,IAAAA,KAAAA,GAAAA,MAAerS,KAAAoS,WACfV,KAAAA,IAAAA,IAAAA,KAAAA,GAAAA,mBACAzD,KAAAA,WAAAA,MAAI1M,IAAA+Q,KAAG,GAACA,IAAAL,GACRM,KAAAA,GAAAA,EAAAA,GAAAA,KAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GAAAA,CAAAA,GAAAA,KAAoB,GAAA,CAAAC,GAAAA,KAGtBA,GAAenC,CAAGoC,GAAAA,KAAgD7P,GAAA,CAAA,GAClEiN,KAAsCF,GAAS1B;AAAAA,WAA7B4B,WAAgB;AAAA,iBACCpQ,MAA5BiT,GAAOC,UACd,IAAOpR,GAAG4N,EAAAA,OAEAjO,IAAA,MAAAwB,IAAA,KAuCRjD,GAAA,KAtCI+Q,MACQ5J,GAAAA,KAAU,CAAA,GAAArH,GAAIsS,SACfH,SAEP9E,GAAAA,OAAYA,MACZE,GAAM0D,UAAO1D,IAGR4D,GAAAA,EAAAA,OAASC,IAAAA,MAASN,GAAAA,CAAUzJ,GAAAA,GAAAA,SAEzBA,SAAUpG,GAAA,OAClBkR,IAAAA,GAAOA,mBAIFhB,KAASC,GAAAA,SAAmB/J,GAAAA,gBAGvBA,SAAAA,IAAAA;AAAwCiL,mBAC7CnB,GAAAA,GAAAA,MAAY;UAAA,CAAA,IAAAlQ,GAAA,mBAAiB0L,MAAYyG,GAAAA,QAAiBtS,GAAAA,iBAC9CuG,SAAAA,IAAkC2K;AAAAA,mBAI3C3K,GAAAA,GAAAA,MAAW;UAAA,CAAA,GAAArH,GAAA,SAAiB,GAAA,WACpCoT,EAAAA,GAAAA,GAAAA,SAAiBtS,GAAO,SAIrBqQ,WAAY;AAAA,YAAAkC,GAAA,CAAA,GAAAjQ,GAAA,CAAWkQ;UAAAA,CAAAA,GAI9BxD,WAAgByD;AAAAA,YAAAA,GAAG,SAAS,WAC1BH,GAAS,OAEX,GAEOpT,GAAA,SACL8P,IAAOqB,WAASE,EAAAA;UAAAA;QAAAA,GAAAA,CAAAA,CAAAA;AAA2BP,YAAUzJ,KAAAA,SAC9C8J,IAAAA;AAAAA,UAAAA,MAAS5G,OAAItJ,GAAA,YACtBmC,GACF,CAAG,GAAA,MAEHnC,GAAcqS,QAAG,MAGXN,QAAqBQ,GAAqB1C,QAAUzJ,SAGjB,EAAA,MAAvBA,EAAAA,CAAAA;QAAAA,GAAAA,KAAQlG,WAAMuN;AAC1BoC,iBAAUzJ,KAAQqE,KAAAA,KAAS/J,EACzB+M;QAAAA,GAAAA,KAAM,SAMA1O,IAAA;AAAA,cAAAA,MAAAmF,GAAMsC,KAAAA,KAAAA,KAAAA,OAAKgM,GAAAA,QAAmB;AAE5B,UAAArQ,GAAApD,EAAA,GAAAiB,GAACyN,QACXA,SAA0B,EAAA,MAAcgF,GAAAA,CAC1C;QAAA;AAAA,eACD,EAEDC,OAEA7C,EAAUzJ,WAAQqE,GAAAA,GAAAA,YAsHpB,GAAA1L,GAAA,UAEI,UAAA6M,EAAAA,GAAW+G,EACT/G,GAAAA,MAAUnM,MAAAyB,KAAA,KAAA,EACV2N,OAAOjD,EAAAA,MAAU0B,UAAAA,aAzBhBkE,UACChS,WACEoT,GAAAA,GAAK,SACL,GAAA7T,GAAA,UAAU,iBACC4T,GACT/G,OAAU/I,GAAA,uBACOgQ,KAAAA,GAAAA,GAAAA,CAAAA,EAAAA,GAAAA,GAAAA,oBAEV,GAAA,KAAA,EAAA,KAAuBJ,MAAiB/E,GAAAA,MAEhD3M,KAAEL,KAAA,EAAA,CAAA,GAAA,KAAAmC,GAAA,eAAuB,GAAA,KAAA,EAAI9B,KAAC,MAAkBmQ,GAAQ,KAAA,KACxDnQ,KAAEmB,KAAA,KAAAxB,IAAAQ,EAAA,CAAA,CAAA,GAAA,KAAkB2B,GACrBrD,eAASgH,GAAAA,KAAKsM,EAAAA,KAAKL,MAAmBvB,GAAOgB,KAAAA,EAAe,CAAA,GAAA,KACzDrP,GAAA,oBAAkB,CAAA,CAAA,GAAA,EAAA,OAAK,EAAA,WACzB9B,GAAE,OAAA,EAAA,GAAA3B,MAAA,EAAA,UAgBJ,EAAA,UAAAwM,GAAAA,MAAWA,UAAU,UAEtB,MAAA1J,IAAA,SACE6Q,WACAH;AAAAA,iBAAKjP,GAAAzB,KACL8Q,CAAAA;QAAAA,GAAAA,OAA0BnQ,GAAhB4P,qBACD,GAAA,cACTQ,GAAAA,qBAAS,GAAA,WACT,GAAAlU,GAAA,UAAc,kBAAAA,GACd6M,UAAW+G,oBACQO,EAAAA,GAAAA,GAAAA,qBACAC,CAAAA,GAAAA,WAAAA;AAAAA,cAAAA,MAAAA,EAGlBpS,QAAE;AAAA,cAAA/B,KAAA,KAAA,IAxIOkF,GAAA,GAAAvB,EAAA,GAAA1D,KAClB,KAAI4S,IACF3P,IAAA,KACD,MAGDlD,KAAMoU,CAAAA,CAAmB5M;AAAAA,iBAASkH,KAAAA,KAErB2F,MAAG7M,KAAKsM,CAAAA,KAAIL,GAAajM,MAAK8M,KAAAA,MAAAA,GAAMF,IAAWlR,MAK5D,EAAA,GAAA,MAJkBsE,GAAAA,IAAK8M,MAAAA,KAAAA,KAAMF,KAAW,EAAM1F,GAAAA,MAC5C2F,EAAYD,UAAsBX,EAIlCjT,UACGkO,GAAAA,MAAsB+E,UACpBc,SACC/T,WAAA;AACEuT,mBAAAA,GAAU,CAAA;UACVH,GAAAA,OAAK/P,GAAA,sBACI,GAAA,cACToQ,GAAAA,sBAAS,GAAA,WACTlU,GAAA,UAAc,iBAAA,GAAA8D,GAAA,GACd+I,CAAAA,GAAAA,EAAAA,UAAkBA,EAAAA,UAAUsH,IAAAA,WAAAA,GAE3BnS,GAAE,QAGH,GAAAhC,GAAA,UAAAgU,gBACWJ,EAAAA,GACT/G,KAAU,CAAA,GAAA,MACViD,KAAOjD,MAAUsH,EAAAA,EAAAA,KAAAA,CAAAA,EAAAA,IAAAA,SAGnBnU,IAAA;AAKLuD,mBAAMkR,MAAAA,KAAKlR;UAAAA,CAAAA,EAAM8Q,IAAUnJ,SACzB7B,IAAI;AAAA,mBAAA,EAAC7I,UAAiBkT,EAAAA,UACtBrK,GAAAA,MAAI,UAAC7I,SAEFC,WAAA;AAAAuT,qBAAAA,GAAU/T,EAAA;YACV4T,GAAAA,WAAK,GACLa,OAAAA,KAAAA,GAAS,GAAA,aAAMC,GAAQnU,GAAE,UACzBqM,uBAGkB,IAAA,MAAA7M,GACV8P,UAAOjD,gBAAU+H,GAAAA,OAAAA,GAAAA,mBAGNT,KAAAA,CAAAA,GAAAA,cAEnBD,GAAAA,mBAASjU,KAAA,CAAA,EAAA,GAAmBO,GAAI,MAChCP,KAAA,EAAA,CAAA;UAAA,CAAA,GAAAkF,GAAA,IAAYnD,MAAEmD,GAAA,IAAAhC,KAAAjD,KAAA,KAAA,EAAA,GAAA,MAAuB,EAEpC8B,UAAS,EAAA,UAILqS,IAAY1F,WAAoC,GACxD6F,GACC,QAAA,GAAAxU,GAAA,UACEgU,gBACWJ,EAAAA,GACT/G,KAAU,GAAA,EAAA,UACHA,EAAAA,UAAUsH,GAAAA,MAAAA,UAGnB,SAEF1T,WAAAA;AACEuT,mBAAAA,GAAU7O,GACV0O,IAAAA,CAAAA;UAAAA,GAAK,OAAA/P,GACL4Q,mBAASvP,GAAMwP,CAAAA,GAAAA,cACfT,GAAAA,mBAAS/O,GAAA,CAAA,GAAA,WACTnF,GAAA,UAAc,iBAAA,GAAmB2O,GAAAA,KACjC9B,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;QAAAA,EAAWiD,GAAOjD,MAAAA,EAAAA,UAAUsH,EAAAA,UAAAA,GAAAA,MAE1B,UAMd,UAyDUhP,GAAA,MAAAhC,KAAA,KAAA6Q,MAAAA,GAAAA,GAAU,SACL,WACLC;AAAAA,iBAAUtF,GAAAA,KAAAA,CAAY+E;QAAAA,GAAc,OAAK/E,GAAAA,iBAChC,GAAA,cAA4B7K,GAAE,iBAC9B,GAAA,WACT,GAAA9D,GAAA,UAAc,kBAAAA,GACd6M,UAAW+G,oBACQO,EAAAA,GAAAA,GAAAA,iBACVtH,CAAAA,CAAUgI,CAAAA;MAAAA;AAAAA,eAAAA,GAAAA,IAAAA,IAAAA;AAAAA,eAGhB,YAAA,OAAA7U,KAAAA,GC5QC8U,QAAAA,GAAAA,IAAMA,KAAwBC,KAC5C,MAAA,SAAoB/U,IAAA,EAAA,IAAA,SACRiC,IAAAA,EAAAA,IAAQjC;MAAA;AAAA,eACS,GAAOgV,IAAAA;AAAAA,eAASF,KAAO,KAEzCE,MAAAA,EAASF,IAAO,OAK7B;MAEgBG;AAAAA,eAAAA,GAAGH,IACjB;AAAA,YAAA7U,KAAK6U,GAAAA,SACUP,UADI,ICNLW;AAAAA,eAAAA,GAAAA,MACd,WAA0BC,YAASC,GAAAA,MAAU,QAO7C,QALY/Q,GAAAA,MAAMgR,SAAW,eACjBhR,GAAMyQ,MAAQ,aACdzQ,UAAMiR,EAAS,OAAA,EAAA,KAAA,SACfjR,IAAMkR;AAAAA,UAAAA,MAAAA,GAAAA,YAAatV,EAAA;QAI3BQ,EAAAA,CAAA;MAAA;AAAA,eAAK,GAAAT,IAAA;AAAA,YAACwV,CAAAA,GACJA,QAA2BzR;AAAAA,YAAAA,KAAAA,GAAY0R,MAI/C,GAAA;AAAA,eCtB0BC,MACxBzV,GAAA,UAAU,iBAEQqP,KAAMtP,EAGxB,IAAAA,KAAAC,GAAA,IAAqB,SAAXa,IAAgBb,IAAA;AAAA,iBAAA,KAAAA,KAAAD,GAAiBoE,YAKxCiF,IAAAA,GAAI,OAAA,CAAA,EAAUsM,YAEA,IAATxM,GAAAA,MACU3E,CAAAA,EAAAA,YAIFoR;QAAAA,CAAAA,EAAO,KAAGC,EAAAA;MAAAA;AAAAA,UAAAA,IAAAA,KAAqBpR,KAASD,WAErDgL;AAAAA,iBACLxP,KCjBY8V;QCyBZC;AAAAA,YAAe9V,KAAAD,GAAA;AAAA,eAxBHC,GAAA,SAAA,SAAAD,IAAAC,IAAA;AAAAkK,iBAAA/E,gBAqBTnF,GArBSkK,YACF,IAAA,QAAwBjJ;QAAAA,GAC9BjB,GAAA,QAAA,SAAAD,IAAqBkB,IAAK2U;AAAAA,qBAAAA,OAAa5V,KAAA;AAAMmP,cAG/CN,KAAAA,KAAA,OAAA9O,IAAMoP,OAAiB4G;AAAAA,cAAAA,GAAAA,OAAAA,MACrB9V,EAAA;AAAA,kBAAiB+V,MAAO7G,EAAS;QAAA,GAAAnP,GAAA,OAEjC,SACED,IAAMoS;AAAAA,kBAEN8D,KAAAA,KAAQpH,OAIZqH,IAAAA,MAAA,CAAA;QAAA,GAAAlW,GAAA,OACEiW,SAAQC,IAAAA;AAAAA,kBAAUF,KAAO7G,KAAS,OAGpCgH,IAAAA,MAAA,CAAA;QAAA,GAAApW;MAAA,EAAA;AAAKoP,QACH8G,iBAAarU,SAAKoU,KAAgB,EAAA,mBDrBtCH,EAAAA,iBAAAA,CAAAA,IAAYA,GAAAA,SAAcA,CAAAA,IAAAA,UAAdA,GAAcA,GAAAA,SAAAA,CAAAA,IAAAA,UACxB,GAAA,GAAA,OAAA,CAAA,IAAA;AACAA,UAAA,KAAA,WACA;AAAA,iBAAA9V,KAAA;AAUF,eAA0BqW,UAAAA,QAAA,KAAA,UAGxB,CAAA;QAAA;AAAA,YAAApW,KAAAD,GAFiBsW;AAAAA,eAAAA,GAAAA,MAGfzU,SAAKyU,IAAU;AACjB,iBAACD,KAAAjR,QAAAA,KAAAA,SAEDnF,IAAA;AAAA,mBACEA,GAAA,OAAO4B;UAAAA,CAAAA;QAAAA,GAAKyU,GAAAA,MAAAA,SAAatW,IAAA;AAAA,iBAAC2B,GAAAA,KAAAA,KAAQsG,IAAOA,GAAE,EAC7C,KAEAsO,GAAAA,MAAA,0BAMW/M,GAAAA,EAAIgN,GAAOvO,SAClB8N,KAAIjH,QAAK,KAAA9O,EAAA,GAAA,SAAA,GAAyBwW,MAC3B3U,2BAGS2U,GAEpB3U;QAAAA,GAXIkU,GAAIjH,SAAM,SAAA9O,IAAA;AAAA,cAAAC,KAAA,KAAA,IAAAD,EACH6B;AAAAA,iBAYX4U,MAAAA,KAAA,QAAOxO,OACOuO,KAAG3U,QAASoG,QAEpBuO,EAAAA,GACF3U,CAAAA,GAAAA;QAAKyU,GAAAA,GAAAA,OAAQI,SAAYJ,IAAAA;AAAAA,cAAAA;AAAQrU,iBAAQuU,KAAAA,QAI7C3U,MAAA,QAEA8U,KAAA,KAAA,QACE,OAQA,SANgB1W,IAAA;AAAA,mBAAoB4Q,GAAAA,aACnByF;UAAAA,CAAAA,IAAAA,KAAQ7L,SAAOxK,GAAA,KAAO0B,SAAE0T,IAAAA,IAAAA;AAAAA,mBAAqBrV,GAAA,SAE7CsW,GAAAA,QAGVA,GAAQ5T,QAAKzC,GAAA,QAACI;UAAG+C,CAAAA;QAAAA,GAAO/C;MAAAA,EAAAA;AAAAA,eAAEuW,GAAWA,IAAAA;AAAAA,YAAQvW,KAAEuW,MAAQxT,KAAEwT,GAAAA;AAAAA,YAAS5W,GAC3E,UAGI;AAAA,cAAAU,KAAwBmW,GAAC1V,OAAAA,IAAAA,GAAAA,QAS7B;AAAA,iBAAU2V,KAAAA,EAAAA,GAER,CAAA,GAAA,EAAYN,GAAG1G,WAActG,EAAIrI,EAAAA,QAAM2V,GAAAA,GAAAA,GAEvC,KAAA,CAAKN,CAAAA,IAEE/V;QAEL;AAAA,eACSsW,WACPP,GAAAA,WAAQA,EACLrV,GAAMA,CAAAA,GAAAA,GAAAA,OAGd,KAAMnB,GAAA,QAAuB6Q,EAAnB1P,IAAMkU,SAGbb,IACA;AAAE,iBACKgC,EAAAA,GAAOG,WAAWtB,EAAAA,EAAAA,QAAUhM,GAAI,GAAApJ,GAAA,MAAC0B,KACtC,CAAA;QAAA,CAAA,CAAA,IAASA;MAAEoV;AAAAA,UAAAA,KAA2BrO,SAAWvH,IAAAA;AAAAA,iBAMzDX,KE5FyD;AAAA,cAGnDwW;AAAAA,kBAAAA,KAAAA,GAAAA,KAAAA,IAAAA,KAAAA,MAGJ,WAAA,QAGqBhX,GAAA,WAFZsG,CAAAA,GAAAA;QAAAzE;AAAAA,UAAAA,IAAAA,EAAAA;AAAAA,YAAAA,KAHDoV,GAAAA;AAAAA,eAKDA,GAAAA,cACP,SAAC9M,IAAA6M,IAAA5R,IAAAA;AAAAA,cAAAA,KAAAA,GAYA,WAUD8R,KAAAA,GAAAA;AAAA,cAAA,CAAAxW,GACEoP,QAIA;AAA2BA,cAAOqH,KAAAA,GAAAA,aACTC,KAAAA,CAAAA;AAAAA,UAAAA,GAEzB,WAGEhX,OACDyB,EAAAA,EAGD,IAAA,EAAMkT,UAA2BsC,GAAAA,QAEpB,CAAA,GAETlC,GAAS9N,OAAAA,GAAW+P,KAAAA,SAOLpX,IACbmV;AAAAA,gBAAAA,KAAAA,GAAUA,cAEJ9N,OAAAA;AAGViQ,gBJjDUC,CAAAA,GAAAA,QAAqBC,CAGnC;AAAA,gBAAuCA,KAAQC,GAAAA,WAAAA,KAC7CxX,GAAA,MAAA;AAIA,YAAAA,GAAA,YAGIyX,KAAiBC,MAAa9K,GAAAA,aACJxI,GAAMC,GAAAA,MACtCqT,cAA4BD,QAAkB7K,GAAU,MAAA,QAAA,QAE3CxI,GAAAA,MAAMuT,UAAc,KAAA3X,GAAA,MACpBoE,SAAMyQ,KAAQ7U,GAAA,MACdoE,SAAMwT,QAAU5X,GAAA,MAChBoE,UAAMyT;AACnBH,gBAAatT,KAAAA,MAAM0T,KAAS9X,GAAA,WACT+X,iBAEnB,UAAgBvD,CAAAA,EAAAA,OACDnU,SAAW2X,IAAAA,IAAAA;AAAAA,kBAAAA;AAAAA,qBAA8BhY,GAAA,MAAA,QACtD8M,GAAAA,cAAc1F,MACdA,IAEAnH,KAAA,CAAA,GAAAD,GAFAoH,aAAyBA,gBAAuB,CAAA,IAAA,EAAA,UAG7CA,GAAQ6Q,YAAAA,GAAahY,KAAAF,EAAA;YAAA,GAAA,CAAA,CAAA;AAAA,mBAAAC,GACpBkY,YAAU9Q,IAAQgQ,GAAAA,MAAAA,UAEjBrK,IAEP/M,GAAG,MAcH,cAZa4M,QACb8K,MAAatT,KAAMC,GAAAA,WACND,iBAAoB,UAErBoQ,CAAAA,EAAAA,OACGnU,SAAW2X,IAAAA,IAAAA;AAAAA,qBAAAA,GAAAA,GAA8B,aACtDlL,gBAAQC,CAAM3F,EAAAA,QAGdpH,GAFA+M,aAAakL;YAAAA,GAAAA,EAAAA;UAAa,EAAAhY,GAAA,OAAA;AAAA,mBAA0B0D,IAAAhD,KAAIyG,EAAQgQ,GAAAA,cAMpE,KIC4ChQ,OAAAA,EAGxC,OAAA,SAAoC+Q,IAAAA,IAAAA;AAAAA,mBAAAA,GAAcvW,OAAKuK,EAAAA;UAAAA,GAAAA,CAAAA,CAAAA,CxBjE3CW,GAAAA,EAAAA,KAAAA,GAAO,GAAA,QAACC;AAAM1J,gBAAC3B,KAAAiC,GAAA;AAAUmI,YAAAA,GAAAA,WAAWpK,GAAA,QwBiEgB0W,SAAAC,MAArDC,CAAAA,GAAAA,SAETtT,KAAIsT,GAAOnM,MAAAA,OAAWmM,GAAOnM,QAAAA,GAAQtL,GAAAA,GAAAA,EAAS,EAAA,KAIlCgU,GAAAA,GAAAA,WAIC7M,GAAAA,GAAAA,GAETsQ,EAAOzD,EAAAA,QAAWwC,KAAcrP,GAAAA,QAAW,GAC3CsQ,GAAOJ,GAAAA,OAAWlD,EAAAA,CAAAA;UAAGqC;AAAOiB,iBAAqBtY,GAAA,WAKnDsY,MAAOzD,EAAAA,MAAWA,GAAAA,OAAaA,GAAOC;QAEzC,GAOD3U,GAAA,UALaiH,SAAW+P,IAEtB/R,IAAO;AAAA,mBAAcgC,IAAAA,KAAAA,EAIzBxF,MAAAA,KAEQ2W,WAAA,CAAA,CAAA,GAAA,EAAAtY,KACNuY,GACArM,GAIA,QAFA;AAAA,gBAEqBsM,KAAAA,GAFRtM;AAAWvK,YAAAA,GAAKuK,WAAW5L,GAAA,QAAA,SAAA,IAE7B+X,GAAAA,OAETI,SAAIJ,WAAOnM,GAAWmM,QAAOnM,KAAAA,GAAQtL,OAAAA,CAAAA,IAASN,GAC5C+X,OAAO7V,YAAOmO,OACL0H,GAAO7V,SAAsB+V,GACtCF,OAAO7V,EAAO,CAAA,GACJ6V,GAAO7V,IAGe,KAAAlC,GAAA,OAAA,QAAV+X,GAAC7V,WAChBA,KAAIkW,QACClW,IAAAA,GAAAA,OAHLA;UAAAA;QAAAA,GAAAA,GAAAA,eAOE0J,SACJoM,IAAAA,IAAAA;AAAQC,mBAAmBrM,IAAAA,KAEnC,EACHnM,MAEQ4Y,KAAAA,WAAA,CAAA,CAAA,GAAA,EAAA3Y,KAAa4Y,GAAoB1M,GAGvC,QAFA;AAAA,gBAEA2M,KAAAC,GAFa5M;AAAWvK,uBAAKuK,GAAW,cAEfkM,GAAAA,YAARC,KAAAtT,GAAAA,WACU4L,KAArB0H,aACFA,IAAOO,GAAAA,OAAAA;UAAYA;QAAAA,GAGjBP,GAAOnM,QAAAA,SACJyM,IAAAA;AAAAA,mBAAAA,IAAaC,KAAWP,EAAOnM,MAAAA,KAG1C,WAEQ6M,CAAA,CAAA,GAAA,EAAAhZ,KAAAC,GAAMkM,GAGZ,QAFA;AAAA,gBAEyB8M,KAAAA,GAFZ9M;AAAWvK,YAAAA,GAAKuK,MAAAA,YAEJ8M,OAAAZ,GAAAA,SAAdC,GAAAA,KACTW,GAAAjU,GAAAA,IAAYgD,IAAAA,GAA6B,MAAA,GAAA,MAAA,kGASxC,GAAAtH,GAAA,WAAA,KAAA,MAAAA,GAAA,OAAA;UAAA;QAAA,GAAAP,GAAA,kBAGUgM,SACJ6M,IAAAA,IAAMV;AAAAA,mBAAOnM,IAGxB5L,KAAC2J,EAEOgP,EAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAAA,QAAA;AAAA,gBAAA/Y,KACNgZ,GACAhN;AAGA,uBAAA4M,GAAqB5M,UAAOiN,GAAAA,IAAAf,EAAAA,EAAAA,IAAElY,GAAA,GAAbmY,GAAAe,GAAArU,QAAAA,EAAAA,UACJuR,EAAAA,eAEPvO,KAAWA,CAAAA,CAAAA;UAAAA;QACRsQ,GAAO/B,GAAAA,cACVnB,SAAUS,IAAAA;AAAAA,mBAAerN,IAAAA,KAAAA,IAIjCjI,MAACwW,KAEMuC,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAP,QAAA;AACEnN,gBAIA1L,KAAAT,GAFA;AAAYiR,gBAAG,YAEM9E,OAASoN,MAAAlB,EAAAA,EAAAA,EAAAA,CAAAA,GAAA,QAAbrT,KAAAA,EACf,MAAsBvE,GAAA,CAAA;qBAAA,YAA2B6X,OACxCnM,IAAAA;AAAAA,kBAAQ/J,KAAK3B;AAClBuG,cAAAA,GAAAA,YAAMsR,GAEH,UAAsB/X,GAAA,YAC3BJ,GAAA,OAEIqZ,EAAYrN,UACdqN,YAAsBzC,OAAOuC,GAAAA,UAAwBnN,WAASA,GAAAA,SAK9BhM,GAAA,OAAA,OAAAF,GAAA,QAAXsW,KAAAA,EAAAA;YAAAA;UACI3F;AAAAA,iBAAThK;QAAAA,GAAAA,GACd4S,mBAKGrN,SAAQ/J,IAAKkW;AAAAA,cAIxBtY,KAAA,IAAOiR;AACT,iBAEOwI,GAAAA,OAAAA,GAAAA,UAAPlZ,GAAA,cACiBR,GAAIgX,IAmBnB,EAAA,UAhBWvC,GACTvD,UAAO9E,GAAU4K,UAAO2C,GAAAA,YAAqBlF,GAAMrI,OAAAA,EAC1C0D,UAAO1D,CAChB8E,GAAO9E,QAAAA,YAAiBmN,OAAYzJ,GAAO1D,KAAAA,CAAAA,KAASA,GAAAA,KAAAA,CAEpD0D,aAC0B,UAAA7P,GAAA,UAAZ4G,OACZiJ,KAAOjJ,GAAK,KAAA,CAAA,CAAA,EAAA,IAAmBtD,SAI1B6I,IAAAA;AAAAA,mBAAUnB,EAAAA,MAAOC,GAAAA;UAAAA,CAAAA,IAAK4E,GAAOjJ,QAASwC,UAAIpJ,GAAA,MAC/C,GAAAA,GAAA,QAAegH,GACjB,IAGEiK,GAAO9E,GAAAA,aAAQtL,GACjBoQ,SACAA,GAAOsH,GAAAA,gBACAK,GAAAA,QAAAA,GAAAA,OAAoBC,GAAAA,MAAAA;QAC3B5H,GAAOiI,GAAAA,gBAAgBrJ,SAAeoB,IAAO9E;AAAAA,mBACtC8E,IAIXhR,KAAA,IAEOyZ,MAAAA,KAAAA,EAAAA,GAAAA,cAAP,OAKE,EAAA,iBAAAX,IAHsBvB,CAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAAA,QAAc;AAAA,gBAClBQ,KAAAA,GAAAA;AAAAA,YAAAA,GAAAA,QAAiB,KAAA,EAER2B,MAAAC,GAAAvB,WAAhBwB,OAAAA,GAAAA,MACF1N,CAAAA;UAAAA;AAAAA,iBAAQ/J;QAAAA,GAAK7B,GAClByG,gBAASE,SACF2S,IAAGhF;AAAAA,cAAAA,KAId,CAAA,GAAA5U,KAAAF,MACF,CAAA,GAqBOoY,KAAAA,CAAAA;AAAAA,cAAAA,MAAAA,GAAAA,QAAP;AAAA,YAAAnY,GAAA,KACEC,EAAA;AAAI6Z,qBACS3N,IAAW5L,KAAA,EAAAN,EACV,GAAA,EAEdQ,KAAIgY,GAAAA,GAAa5X,QAAAA;AAAQ,kBAChBuB,KAAAA,GAAKqW;AAEZ,cAAAtY,GAAkBsY,WAAAA,GAAAA,QAAMsB,WAAArZ,KAAAA,GAAVsZ,OAAAhV,GAAAA,OACJmH;YAAAA;AAAAA,YAAAA,GAAW6N,WAAI7N,KAAQtL,GAAAA,OAC7BoZ,KAAkBnO,cAAWK,EAAAA,CAEhC;UAEG8N;AAAQpZ,iBAAAA;QAAAA,GACViZ,GAASA,cAAclY,SAAKuW,IAAAA;AAAAA,cAAc8B,KAAAA,CAE7C,GAEDha,KAAAF,MAAA,CAAO+Z;AACT,cAOOI,MAAAA,GAAAA,OAAP,UAAAxZ,IAAmByL,KACjB,EAAAlM,EAAA,GAAA,EAAiCS,KACvB+X,GAAGtM,GAAW,QAEpBsM;AAAAA,gBAAa5X,KAAAA,GAAAA;AACf,YAAAN,GAAkBkY,WAAAA,MAAAA,GAAM0B,QAAA9B,UAAArY,GAAVga,KAAAhV,EAAAA,GAAAA,GACPgV,YAAsCha,KAAAA,GAAvBga,OAAI7N,KAAQtL,YACvBuB,GAAK4X,OAGN7N,CAAAA;UAAAA;AAAAA,iBACUL;QAAAA,GAAAA,GAAAA,eAAYoO,SAAgB/N,IAAAA;AAAAA,iBAKlD,KAAA,cAOKiO,CAAAA,EAAAA,CAAAA,EAAAA,SAAP;QAAA,GAAoB9B,EAAAA,IAClB,CAAA,EAAA,KAAW1W,WAACuW,KAAAA,WAAwBtX;AAAAA,iBACtC,KA1TAkW;QAAA,GAAA,KAAA,SAAAhX,IAAA;AAAA,eAAA,WACEA;QAAA,EAAA,GAAYiX,EAAAA,KAAAA,kBAGd,KACEpV,WAAKoV;AAAAA,iBACN,KAAA,SAAA,OAAA,SAEDjX,IAAA;AAAA,mBACE,CAAAA,GAAA;UAAW6B,CAACoV;QAAAA,EAAAA,CAAAA,CAAAA,GAAAA;MAAAA,EAASxM,CAAAA,GAAAA,KAAAA,WAAQ7G;MAAAA,GAAAA,KAAe,SAlB3BoE,IAAAA;ACPCsS,iBAAAra,GAAAA,IAAA;AAAA,cCFhBsa;AAAAA,kBAAAA,KAAAA,GAAAA,KAAAA,IAAAA,KAAAA,MAGJ,OAAY1T,QACV3G,GAAAwI,IACezI,EAAA,GAAAC;QADfwI;AAAAA,UAAA8R,IAAAlU,EAAAA;AAAAA,YAAAzE,KAAAA,GAAAA;AAHMgF,eAAAA,GAIN6B,MAAKa,WACP;AAAA,cAAC;AAAA,mBAAA,QAAA,QAAA,KAEYC,KAAG,CAAA,EAAA,KAAA,SACSxJ,IAAAya;AAAAA,qBAAA9I,EAAAA,MAAAA,IAAJ9P,OAAKgF,GAAAA,OAAAA;YAAAA,CAAAA;UAAAA,SAAAA,IAAAA;AAAlBA,mBAEN,QACQA,OACNsM,EAAOtM;UAAAA;QAAK/F,GAAAA,GAAAA,MACZ,SACHZ,IAAA;AAAA,iBAAAua,cAAAC,QAAAvQ,KAEMZ,OAAA,WAOL;AAAA,mBANI1C;UAAAA,IAAAA,cACFhF,aAAY,KAAA,OAAagF,KAAAA;QAAAA,GAAI5G;MACpB4G,EAAAA,EAAAA,GAAAA,KAAAA,SACJA,IAAAA;AAAOA,iBAIhB5G,GAAAA,IAzB0Bqa;AAAAA,cCgBRK;AAAAA,kBAAAA,KAAAA,GAAAA,KAAA,IAAA,KAAAH,MAGlB,UAAYpN,QAEalN,GAAA,UADhBsa,IAAAlU;QAAAA;AAAAA,UAAAzE,IAAAA,EAAAA;AAAAA,YAAAA,KAAAA,GAHQuL;AAAAA,eAIVA,GAAAA,UAAkB1E,SACxB1I,IAAA;AAAA,iBAEO4a,cAAAA,OAAAA,KAAAA,QAAA,SACN,KAAmC,QAAA,OAAA5a,EAAA,IAAAA,GAApB6B,KAAAA,GAACuL,KAAAA,KAAQyN,GAAAA,MACfhZ,2BAGIiZ,GACKC,SAAAA,QAEZjM,GAAAA,YACuBkM,IAAAA,GAAAA;QAAAA,GAAAA,GAAAA,MAAAA,SAAehb,IAAA;AAAA,cAAeib,KAAAA,EAAAA,CAAAA,GAAAA,KACvD,SAINjb,EAAA;AAACmK,iBAEM,cAGL,OAAUlK,GAAA,OACL4B,GAAKuL,KAAAA,EAAAA,IACLA,MAOLnN,GAAyB,KAAAA,EAAA,EAAA,KAAA,KAAA,QAAT4G,KACFA,IAAKqU,CAAAA,EAGPC,KAACD,SACVE,IAAAA;AAAAA,mBAAKvZ,EAAK+Y,MAAAA,GAAAA,KAAQS,EAAKxZ,GAAAA,OACvBuZ,cAAK,OACJnb,GAAA,QACE4G,GAAMqU,MAAUI,EAAAA,IAChBnI,OAA6B;UAAA,CAAA;QAAA,GAAAlT;MAAA,EAAA,EAAA,GAAA,KAAaib,WAAWI;AAAAA,iBAG7Dtb,KAhDkB;QAAQsa;AAAAA,eCZViB,GAAAA,mBAAA,SAAAvb,IAAA;AAAA,cAAAub,KAiElB;AAAA,iBA3DgB7B,GAAAA,SAAAA,KAAAA,IAAP,GAAA1Z,GAAA,IAAwB8P,IAC7B9P,GAAA,SAAcC,KAoBd,IAAA,GAlBI6P,KAAOjJ,oBAC0BA,GAGjCiJ,IAAO2E,CAAAA,GAAAA,GACT+G,KAAcjB,MAAc1Y,UAAK4Z,SAAAA,GAAAA,WAA2BhH,KAAAA,IAErDA,GAAAA,GAAKpQ,MAAMqX,IAAAA,MAAAA,GAAU,MAAA,wCAQxB5M,IAAAA,GAAAA;QAAM,GAAA9O,GAAA,sBAAA,SAAAA,IAAA;AAAA,mBAIdC,IAACsb,IASME,KAAAA,CAAAA,GAAAA,KAAAA,EAAAA,GAAAA,cAAP,OAKE,EAAA,iBAAAzC,IAHsBvB,CAAAA,GAAAA,EAAAA,KAAAA,GAAAA,GAAAA,QAAc;AAAA,qBACjBQ,IAAAA,KAAAA,CAAAA,GAAAA,KAAAA,EAAAA,GAAiB,MAAA,iBAMlC,IAJ6B,CAAA,GAAA,EAIHU,KAFXgD,GAAG,GAEC3S,QAJP/D;AAAAA,kBACqBgT,KAAAA,GAAAA;AAAAA,oBAAAA,GAAAA,WAGPU,UAAAL,GAAAA,WAAXrT,CAAAA,EAAAA,aAGN6B,KAAAA,YAAWhG,GAChBoI,MAAKpC,KAAAA,GAAAA,WAAcN,IAAAA,YAAkBoV,gBAEf1S,IAAK/B,WjCvDrB,EAAA,gBAAgB0U,YAAAA,IAAgBxT,GAAS,KAAA,EAAAlI,GAAA,SAC1C2b,CAAAA;YAAAA;AAAAA,YAAAA,GAAAA,KAAgBC,EAAAA;UAAAA;AAAAA,iBAAAA;QAAAA,GAAAA;MiCwDrBJ,EAAUtZ,GAAAA,KAAKiG,eAAUnB,OAIzB9E,SAGN,OACF,aA9DgB,OAAA,WAAA,OAAA,iBAAA,KAAA;AAAA,eAAA,GAAArC,IAAAC,IAAAC,IAAA;AAAA,YAAA,CAAAF,GAAA,GAAA;AAAA,cAAAE,cC2Gf,IAAA;AAAA,gBAAA,CAAAA,GAAA,EAAA8b,QAOD,MAAAA,GAAAlZ,IACE,GAAAmC,KAAAA,MAAAA,IAAAA,EAAAA;AAAc,gBAAAhF,OAAAA,KAAS6C,GAWtB,IAAA5C,KAAAA,GAAA;UAAA;AAAA,cADC+E,MAAAgX,GAAAA,KAAUZ,QAAWW,KATf9b,GAARqF,KAAAA,GAA6DzC,KAIzDmC,MAmBJjF,IAAAiF,EAAAA,GAAYA,GAAAmW,KAAAA,MAAAA,IAAAA,CAAAA,CAAAA;AAAAA,UAAAA,GAERA,IAAAA,IAAAA,GAAAA,IAAWC;AAAAA,cAAA1a,KAAAX,GAAAgc;AAAAzW,UAAAA,MAAA0W,GAAAA,EAAAZ;QAAAA;MAAAA;AAAAA,UAAA,KAIdW,WAED;AAAA,iBAECA,KAGG;QAAA;AAAA,eA7JQE,GAAAA,UAAc,OAAA,SAC9Bjc,IAAAC,IAAA;AAAA,cAAAS,KA0GK,IAAAX,MAAAU,KAvECwb,KAAA9W;AAAAA,cAAAA,IAAAA;AAAAA,gBAAmD5E,KAAA,IAAAE,KAAAT,KAAAkc;AAAAC,gBAEtC5b,IAAA;AAAA,kBAGT;AAAA,mBAA4D0b,IAE9B3W,GAAI1D,GAAAA,KAAsBiB,CAAAA,CAAAA;cAI/ByC,SAEjC8W,IAAyD;AAAA,mBAAAF,IAAAC,GACvDpc,EAAA;cAAA;AAAAqc,qBAGEJ;YAAAA;AAAAA,mBAAqBpa;UAAAA;AAAGZ,iBACzB,KAAAf,IACF+b,SAMCjc,IAAA;AAAA,gBAAA;AACA+Z,kBACFrZ,KAAAV,GAAA;AAQA6B,kBAAAA,GAAAA,IAAAA,GAAAA,IAKIA,GAAAA,KAAAA,GAAAnB,EAAA,IAAAA,EAAA,IAAAR,KAAA,GAAWwI,IACZ,GAAAxI,GAEDQ,EAAA,CAAA,IAAA,GAAagI,IAAKzH,GACVP,EAANgI;YAAAA,SACDqR,IAAA;AAAAoC,iBAAAA,IAAAlX,GAAAA,EAAAA;YAAAA;UAEGmX,GAAAA;QAAAA,GACIrC;MAAAA,EAAA;AAAMqC,eAIdrC,GAAa9U,IAAAA;AAGb,eAAI/E,cAUN,MAIM6Z,IAzGsB/Z,GAAA;MA8JjB;AAAA,UAAA,KAEL,SAAAsc,IAAAA;AAAAA,iBAAsBA,GAAQxZ,IAAAA;AAAAA,cAAAA;AAAAA,kBAAAA,KAAAA,GAAAA,KA/GpC,IAAA,KAAA0I,MAAA,SAAY+Q,oBAA6C,OAKtDrc,GAAA,QAJDwI,oBAAAA,OAAAA,GAAAA,4BAPM8T,IAAAA,MAAAA,GAA8B,QAA0B9T,SAIxD+T,IAAAA;AAAAA,mBAAAA,GAAAA,SAA6Bzc,EAK/Buc;UAAAA,CAAAA,GACFA;QAAMxW;AAAAA,UAAAA,IAAAA,EAAAA;AAAQ,YAAApF,KAAAV,GAAA;AAAK,eAAUmR,GAAAA,aAJjCvH,WAMCM;AAAAA,eAAA/E,QAAAA,oBAiIA,OAAA,KA5HDsX,4BACOF;QAAAA,GAAAA,GAAQ,WACb3a,SAAK4a,IAAAA,IAAAA;AAAAA,cAAAA,WAAAA,OAA6Bxc,KACpC,OAQAmR,CAAAA,GAAAA,OAAA,MACEN,0BACmB;AAAA,cAEdA,SACH9Q,GAAA,KAAY,OAAA,MAAA,+BAGAkB;AACZ,cAAA,KAAWkR,uBAACpS,GAAA,EAAA,IAAA,GAAA,OAGd,MAAS2c,kBAAAA,GAAAA,KAAAA,qBACIvK;AAAA,iBAAApS,GAAA,GAAA,gBACZ,KAAA,sBAGSuT,KAAG,IAAA,CAAA,GAAA,KAAgB1R,uBAAK+a,IAAAA,EAAAA,GAAsBvB,KAAKxZ,gBAExDgb,EAAAA,GAAAA;QAAAA,GAAAA,GAAAA,cAAkCC,SAClCC,IAAAA,IAAAA;AAAAA,qBAAAA,OAEEjM,KACT;AAOAkM,cAAAA;AAAAA,mBAAA,KAAA,SAEEF,IAAAA,EAAAA;UAAAA,SAAAA,IAAmB;UAAA;QAAA,GAAAnc,GAEnB,aACakB,SAACuP,IAAAA;AAAAA,cAASN,MAAWgM,OAChC,KAAO9a,uBAYXhC,GAAiB8Q,EAAAA,GACf;AAAA,gBAAKA,KAC8C,KAA/CjP,OAAK8a,IAAAA,GAAAA,IAAAA;AAAAA,YAAAA,MAAAA,GAAAA,WAET,KAAMM,OAAgBC,IAAAA,GAAO1T,MAAIsH,GAAU5P,OAEvC+b,SAAqBnc,IAAAA;AACvBe,qBAAKqb,MAAAA;YAAAA,CAAO3T,CAAAA,GAAAA,KACArI,KACDuJ,WAAOzK,EAAA;UAAA;QAAA,GAACmd,GAAAA,yBAEdzS,SAAK1K,IAAAC,IAAW6Q;AAAAA,cAEzB5Q,KAACiK,KAQO0S,OAAAA,IAAAA,GAAAA,IAAAA;AAAA,cAAA,CAAA3c,IAAA;AAAA,gBAEN4c,KAAAA,CAEA;AAAA,iBAAejb,OAAKqb,IAAO1T,GAAAA,MAActI,EAAAA,GAAAA,KAEzCP;UAAA;AAAA,cAAKsc,SACGG,MAAand,KACnB4B,EAAAA,CAAAA,GAAKqb,KAAAA,EAAAA;mBAAqBhc,GAAMkc,EAAAA,GAChCH;AAAAA,gBAGFvc,KAAiBR,GAAA,MAAb4c,GAAqBA,KAAW,CAAA,GAClCG,KAAS5a,GAAAA,MAAKyO,KAAAA,CAAAA;AAEd,iBAAcgM,OAKZ,IAAuBrY,GAAAA,MAAM/D,GAAGoc,OACjBG,EAASxY,EAAAA,OAAiBjE,EAAA,CAEzCqB;UAAAA,MAAKqb,CAAAA,GAAAA,EAAAA,IAAO3T;QAAAA,GAAAA,GAAIuH,iBAA6BA,SAAW/E,IAAOsR;AAAAA,iBAN/DJ,KAAqBnM,MAmC3BwM,OAAAA,SAAArd,IAAA;AAAA,mBACEA,GAAA,SAAW4B;UAAAA,CAAAA;QAAC0a,GAAAA,GAAAA,0BAAqB,WAAarb;AAAAA,iBAMxCqc,OAAAA,KAAAA,CAAAA,EAAAA,OAAAA,SAAAvd,IAAA;AAAA,mBACN,CAAA,MAAA,OAAckL,EAAAA,CAAK3C;UAAAA,CAAAA,EAChBkC,IAAAA,SAAOzK,IAACoB;AAAAA,mBAAQ,OAAC6Q,EAAMC;UAAAA,CAAAA;QAAAA,GAAAA,GAAO9Q,UAC9BiI,SAAIrJ,IAACoB;AAAAA,cAAAA;AAAAA,gBAAAA,KAAc8Q,SAAKlS,IAC7B;AAQM2L,qBAAAA,GAAAA,4BAAgBjL,GAAA,QAqCpBR,GAAA,KALAsd,gBAAKf,EAAAA,GAAAA;YAAAA,GAAAA,KAAAA,MAA4BF,KAAMzb,GAAAA,2BAG7BJ,KAAgBsM,GAAAA,OAlCQnL,KAAAA,IAA5B4a,KAA4Be,SAAKf,IAAAA,IAAAA;AAAAA,kBAAAA;AAAAA,oBAAAA,KAAAA,SACpBF,IAAAA,IAAAA,IAEXvP;AAAGnG,sBAAK4W,cAAAA,OAAAA,GAAAA,EAAAA,GAAAA;AAAAA,wBAAAA,IAAAA,IAAAA,IAAAA,KAAAA,GAAAA,EAAAA,EAAAA;AAAAA,wBAAAA,SAAAA,GAAAA,IAAAA;AAAAA,0BAAAA;AAAAA,+BAAAA,EAAAA,KAAAA,GAAAA,KAAAA,GAAAA,OAAAA,MAAAA,KAAAA,GAAAA,GAAAA,KAAAA,MAAAA,GAAAA,MAAAA;AAAAA,8BAAAA,CAAAA,GAAAA,EAAAA,EAAAA,QAAAA,KAAAA,GAAAA,KAAAA,IAAAA,OAAAA,KAAAA,GAAAA,KAAAA,MAAAA,KAAAA,IAAAA,MAAAA,CAAAA,EAAAA;AAAAA,0BAAAA,KAAAA,GAAAA;wBAAAA;AAAAA,wBAAAA,KAAAA,GAAAA,IAAAA,GAAAA,EAAAA,IAAAA,KAAAA;sBAAAA,SAAAA,IAAAA;AAAAA,2BAAAA,OAAAA,KAAAA,IAAAA,OAAAA,GAAAA,EAAAA;sBAAAA;oBAAAA,EAAAA,GAAAA,GAAAA,QAAAA;AAAAA,0BAAAA,KAAAA,SAAAA,IAAAA;AAAAA,4BAAAA;AAAAA,0BAAAA,GAAAA,QAAAA,GAAAA,OAAAA;wBAAAA,SAAAA,IAAAA;wBAAAA;AAAAA,+BAAAA;sBAAAA;AAAAA,0BAAAA,MAAAA,GAAAA,KAAAA,QAAAA,GAAAA,KAAAA,IAAAA,SAAAA,IAAAA;AAAAA,8BAAAA,GAAAA,EAAAA;sBAAAA,CAAAA;AAAAA,sBAAAA,GAAAA;oBAAAA;AAAAA,2BAAAA;kBAAAA;AAAAA,sBAAAA,EAAAA,YAAAA,IAAAA,OAAAA,IAAAA,UAAAA,wBAAAA;AAAAA,2BAAAA,KAAAA,CAAAA,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,QAAAA,KAAAA,CAAAA,GAAAA,KAAAA,GAAAA,EAAAA,CAAAA;AAAAA,yBAAAA,SAAAA,IAAAA,IAAAA,IAAAA;AAAAA,wBAAAA,IAAAA,IAAAA,KAAAA;AAAAA,2BAAAA,SAkCjBvd,GAAAE,IAAA;AAAA,0BAAAsd;AAAAA,+BAAAC,EAOOnd,KAAAR,GAAAgc,SAAA,MAAA5b,KAAAH,GACNO,EAAA,MAAAJ,GAAA,MAAA;AAAA,8BAAA,CAQM,GAAAA,EAAA,EAAA,QAAAU,KAAAA,GAKN,KAFMyM,IAAA/M,OAAAA,KAE4BuZ,GAAAqB,KAChC,MAAAwC,KAAK7D,IAKP,MAAA,CAAA,EAAA;AAAA,0BAAA3Z,KADM2Z,GAAAqB;wBAAAA;AAAAA,wBAAAA,KAAAA,GAAsBV,IAAAA,GAASA,EAAAA,IAAAuB,KAAAZ;sBAAAA,SAAArb,IAAAgc;AAAAA,2BAAArb,OAAAub,KAAA,IAHpCnC,OAAA9Y,GASK+a,EAAAA;sBACNC;oBAAAA,EAAID,GAACrb;kBAAA,EAAAoZ,IAELiC,SAEHhc,IAAAE;AAAAA,2BAED8b,GAAAA,GAAwBhc,EAAA,CAAA;kBAAA,CAAA;gBAAA,EAAAU,IAAAR,SAAAA,IAAAA;AAAAA,sBAAAA,KAAAA,GAAAA,uBAtEMqc,GAAK,EAAA,GAAA7b,KAAA,WACPmd;AAAGL,wBAAKb,MAAAA,GAAAA,QAAAA,QAAAA,QAExBkB,GAAAA,QAAAA,EAAAA,CAAAA,EAAAA,KAAkBpB,SAAyBhC,IAAAA;AAAAA,sBAAAA,GAAAA,MAAA9I,IAAAA,GAK/Bb,IAAUnF,KAAAA,EAAAA;oBAAAA,CAAAA;AAAQqB,oBAAAA,KAAAA,GAAKoO,MAAA,IAAApb,GAAA,EAAA8d;kBAAAA,EACrCN;AAAKhB,sBAAAA,MAAMjT,GAAAA,KAActB,QAAUvH,GAGnCsM,KAAYwP,WAAoBvU;kBAAAA,CAAAA;gBAAAA,CAT9B4V;cAAAA,SAAAA,IAAAA;AAAAA,uBAAAA,GAAAA,EAAAA;cAAAA;AAAAA,qBAAAA,MAAAA,GAAAA,OAAAA,GAAAA,KAWL,QAAA5d,EAAA,IAAAG;YAAA,EAAA,GAAA,SAAAJ,IAAA;AAAA,oBAAA,GAAA,MAAAA,EAAA,GAAAE,GAAA,KAAA,SACMA,EAAAA,GAAAA;YAAAA,CAAAA;AAAAA,mBAMP,QALI4O,QAEJ0O,MAAK9S,GAAAA,OAAKtK,GAAA,KAIXF,EAAA,IAAAD,GAAA,CAAA;UAAA,SAAAD,IAAA;AAAA,mBAAA,QAAA,OAAAA,EAAA;UAAA;QAAA,GAAAW,GAAA,yBASF8Z,SAAAC,IAAAA;AAAAA,iBAAAvQ,KAOOwS,MAAAA,UAAAA,SAAA1c,IAAA;AAAA,mBACNA,GAAA,MAAAD;UAAA,CAAA;QAAYuc,GAAAA,GAAAA,wBAAiB5a,SAAC3B,IAAOiI;AAAAA,cAAiBhI,KACxD,KAOQ8d,uBAAA/d,GAAA,EAAA;AAAA,eAGN,4BAA4B2c,OAAAA,KAAiC1U,4BAEpDwU;QAAAA,GAAAA,GAAAA,wBACFA,SAAAA,IAAAA;AAAAA,eAA4BoB,sBAI7BjB,EAAAA,GAAAA,KAAA,KAAA,cACDmB,GAAAA,KAAAA,KAAAA,WACLlc,EAAAA;QAAAA,GAAK6I,GAAAA,kBAAK,SACLA,IAAAA;AAAK,eAAA,sBAGJqS,EAAAA,GAAAA,KAAA,KAAA,eACDgB,GAAAA,KAAAA,KAAAA,WACLlc,EAAAA;QAAK6I,GAAAA,EAAAA,IAAK,CAAA,EAAA,KAAA,SAAA,KACV7I,WAAU;AAAA,mBAAWiP,IACvB7Q,KAlHAkI,CAAA6V,GAAA9d,KAAAkB,EAAAA,KAAA,wBACE,CAAA,GAAA,EAEiD6c,KAF7C1B,GAA+C,GAAA,QAEhC1a;AAAAA,gBAAK0b,KAAAA,KAAAA,OAAAA,IAAAA,GAAAA,KAAAA;AAAyBU,YAAAA,MAAA5F,GAAAA,WAAtCnX,KAAAA,GAAAA,OACagc,EAAAA;UAAAA;AAAAA,iBAAtBe,GAAAhZ,OAEIgY,SAAqBnc,IAAAA;AAAAA,mBACTiL;UAAAA,CAAAA;QAAAA,EAAAA,CAAOkR,CAAAA,GAExBhd;MAGD,EAAA,CAAA,GAAA,KAAoB,SAAO6C,IAAAA;AAAAA,iBAC7B7C,KAvIA;AAbwBgK,iBC3BpBiU,GAAAA,MAAAA,MAQEpS,SAAAA,KAAAA;QAAAA;AAAAA,eAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,UAAAA,WAAAA,SAAAA,IAAAA;AAAAA,cAAAA;AAAAA,mBAAAA,QAAAA,QAAAA,KAAAA,MAAAA,QAAkB,IACL9L,EAAA,CAAA;UAAA,SAAAya,IAAAA;AAAA9I,mBAAAA,QAACxQ,OAAMqa,EAAAA;UAAAA;QAAAA,GAAQhS,EAAAA,IAAI0R,CAAAA,EAAAA,KACrC,QAAA,KAAA,WAAA;AAAA,iBAAA,EAAA;QAAA,EAAA,CAAA,CAAA,GAAAjb;MAAA,EAAA,EAAA,GAAA,KALC,SAAqBke,IAAAA;AAAAA,iBACvBle,KAN6BsL;AAAAA,iBAAAA,GAAAA,MAAAA,MCC7BO,SAAAA,KAAAA;QAAAA;AAAAA,eAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,UAAAA,WAAAA,SARsCP,IAAAA;AAAAA,cAQtCO,KAAAA,EAAAA,UAAAA,GAAAA,IAAAA;AAAAA,iBAAA7L,GAAA,SAASme,GACP,OAAgB3U;QAAAA,GAAQO,EAAAA,IAAAA,CAAAA,EAAAA,KAAUoU,QAKlC,KAAA,WAFQtd;AAAAA,iBAAuBqS,EAExBxG;QAVTvL,EAAAA,CAAA,CAAA,GAAAnB;MAAA,EAAA,EAAAuJ,GAAAA,KACE,SAAqB6U,IAAAA;AAAAA,iBALe9S,KAAAA;AAAAA,iBCOlB+S,GAAAA,MAAAA,MAAA,SAAAC,KAAA;QAAA;AAAA,eAAA,EAAAte,IAAAD,EAAA,GAAAue,GAAA5T,UAAA9I,WAAAhB,WAMnB;AAAA,iBANmByd,OAAAlZ,QAAAA,KAQpB0G,MAAA,oBACeb,EAAAA,OAACuT,SAAard,IAAAA;AAAAA,mBAAMsd,cAAAA,OAC9BhU,GAAAA,CAAAA;UAAAA,CAAAA,EAAO,OAAA,SAAQzK,IAAqBC,IAAA;AAAA,gBAAAC;AAAA,mBAAA,EAAA,CAArBwe,GAAA1e,MAA+BE,KAC9C6M,CAAAA,GAAAA,GACC,CAAA,CAAA,IAAA9M,GAAA,CAAA,GAAC0e,GAAMxc;UAAAA,GAAAA,CAAAA,CAAAA;QAAAA,GAAAA,EAAgBwc,IAAAA,CAAAA,EAAAA,KAAAA,QAAMxc,KAAAA,WAANwc;AAAAA,iBACvB,EAAE;QAEPvd,EAAAA,CAAAA,CAAAA,GAAAnB;MAAA,EAAA,EAAA,GAAAuJ,KAVC,SAAqBoV,IAAAA;AAAAA,iBACtBN,KAN2B/S;AAAAA,iBCSUsT,GAAAA,MAAAA,MAAA,SAAAN,KAAA;QAAA;AAAA,UAAAte,IAAA4e,EAAAA;AAAA,YAAAle,KAAAV,GAAAse;AAAA1c,eAAAhB,GAAAA,WAAA,SAAAb,IAAA;AAAAmK,cAAA0U,CAAAzZ,MAAAA,CAAAA,GAAAA,OAMrC,QAEO0Z,CAAAA;AAAAA,cAAAA,CAAAA,KAAA,MAASjY,UACVA,CAAAA,KAAc/F,MACjB,OAAO,QAGJe,QAAKV;AAAM+P,cAAAA,KAAAA,GAAWrP,YAAWqP,KAAAA,MAAO9E,OAC3C,OAGF;AAAMA,iBAAiB+N,GAAAA,CAAAA,aAAiBhZ,QAAM+P,GAAAA,IAAAA,SAAO9E,IAGrD;AAAA,gBAAAlM,KAAI2G;AAAK,mBAAA5G,GAAA,IAAmBsD,SACE8F,IAAI1I,IAAA;AAAA,qBAACmJ,WACrB7J,GAEV,QAAAC,MAAemJ,cAAKkP,OAElBtY,GAAA,OAAAA,GAAoB4Q,KAAhB0H,EAAO1R,IAAAA,GAAAA,QAGkB7G,GAAAW,KAAAT,EAAA;YAAA,CAAA;UAAA,CAAA,IAAA,YAAT2G,OACFA,GAAAA,CAAAA,KAAKiD,GAENyO,CAAAA,aAIFwG,QAME,CAAA,IAAA/e,GAAA,IAAA,SAAR6G,IAAC;AAAA,mBAA0B5G,GAAA,IAAA,SAAcsD,IAoBjDrD,IAnBG2G;AAAAA,qBAAyB,WAACiD,GAChCsC,OAAAA,cAAY,OAAS5L,GACnB,OAAAP,GAAA,KAAoB4Q,EAAAA,IAAAA,GAAhB0H,OAAO1R,GACkB,KAAA7G,GAAAC,GAAA,EAAA,KAAA,GAAA,MAAT4G,4DAQqDrG,KAAAA,8FACQ,GAAA;YAAA,CAAA;UAAA,CAAA;QAAA,GAAAG,GAAA,WAAA,SAAAX,IAAA;AAAA,iBAAA,EAAA,MAEhF,KACD,SAOR8L,GAAAA,IAAA,GAAA,OAAA9L,GAASgf,MACP;QAAA,GAAO,EACLnY,IAAAA,CAAAA,EAAMhF,KAAAA,QAAKid,KAASE,WACpB7L;AAAAA,iBAAuBA,EAAAA;QAE1B/R,EAAAA,CAAA,CAAA,GAAAnB;MAAA,EAAA,EAAAuJ,GAAAA,KAjEC,WAAqB6U;AAAAA,iBACvBre,KANsC;QAAQuL;AAAAA,eCX1C0T,GAAAA,mBACGvF,SAAAA,IAAAA;AAAAA,cAAAA,KAqBT,IAAA;AArBSA,iBAAAA,GAAAA,mBAAiB5J,MACtB7P,GAAA,SAAqB+d,IAgBrB,GAAA,EAdIlO,sBAA0B6K,GAAAA,OACnBvJ,CAAAA,CAAAA,GAAAA,GAAAA,SAELqN,IAAAA,GAAAA,EAAAA,SAAAA,GAAAA,QAA6BxN,CAAAA,CAAAA,GAAAA,GAAAA,SAK1BG,IAAS,GAAA,EAAoB8M,QAAG1C,GAAAA,OAAgBA,CAAAA,CAAAA,GAAAA,GAAAA,SAChDpK,IAAAA,IACP,GAAAnR;QAAA,GAAqC4e;MAAAA,EAAG3N,GAAAA,KAAAA,SAAeA,IAAAA;AAAAA,YAEhDE,KAAAA;AAAAA,aAAS,QAGpB,QAlBOsI,KCLP,YAA2B,CAAA,GAAA,KAAA7X,gBAJnB0D,OAAAA,KACA6E,WAAAA,WAAiD;AAAA,iBACjD8U,GAAAA;QAAAA,GAAAA,KAMR7O,eAAW,WAAM;AAAA,iBAAA3H,GAAKnD;QAAK,GAC3B4Z,KAAAA,WAAe,SAAAnf,IAAA;AAAA,cAAA,cAAWoK,OAE1B4G,GAAAA,OAAAA,IAAW,MAAA,2BACEoO;AACT,cAAAnf,GAAM,cAAU,OAAA,IAAA,MAAA,mCAEhB;AAAA,UAAAA,GAAemS,gBAAC;AAAA,cAAAlS,KAAAD,GAAA;AAAA,cAAA;AAAA,YAAAA,GAAA,QAElByI,GAAKwW,GAAAA,KAAAA;UAAAA,UAAAA;AAEL,YAAAjf,GAAA,gBACA;UACEyI;AAAKnD,mBAAgBmD,IAAKnD,KAAAA,EAAAA,GAG3B,SADCmD,GAAKwW,EAAAA,KAAAA,GAAAA,GAAAA,OAAgB,EACtB,GAEDve,GAAA,OAAqCsd,GAAAA,OAAT7T,EAAAA;AAAAA,iBAAAA,GAAS6T;QAAA5F,GAAAC,KAAAA,YAAlBrT,SACHM,IAAO8Z;AAAAA,cAGvB,cACF,OAEA5O,GAAAA,OAAAA,IAAY,MAAA,4BAER;AAAA,iBAAMxQ,GAASmS,YAAC,CAAA,EAAA,OAAAnS,GAAA,WAAA,CAAAD,EAAA,CAGlB,GAAA,WADKoK;AAAAA,mBAAAA,GAAAA,YAAqBA,GAAAA,UAAWC,OAElC,SAAApK,IAAA;AAAA,qBAAKmK,OAAAA;YAAAA,CAAY1B;UAAAA;QAAK0B,GAAAA,KAAAA,QAAUK;MAAAA,GAAAA,KAAO,SAAC6U,IAAAA,IAAAA;AAAAA,YAAWA,KAAAA,EAAKjV,KAC7DpK,KAnCE4B,SAAK0D,KAAQga,ICaSC,M7CnBqhR,UAAarf,SAASH,IAACwB,IAAAA;AAAIrB,iBAAEH,GAAOW,S6CmBxiRV,EAAA;QAAA,G7CnBijRwf,UAAS,SAASxf,IAAEE;AAAAA,cAAGD,IAAAS;AAAOV,iBAAEc,KAASZ,oBAAaD,KAAA,CAASD,IAAGU,KAAA,CAAA,GAAMH,EAAAA,IAAE,MAAA,KAAOqB,kBAAKsE,WAAwB3F;AAAE,mBAAOqB;UAAAA,GAAAA,KAAKA,wBAAqB,SAAW7B,IAAA;AAAA,iBAAU6B,MAAKiE,UAAAA,GAAAA,SAAAA,GAAAA,KAAsB,CAAA;UAAA,GAAA,KAAYjE,MAAAA,SAAWoD,IAAAA;AAAAA,YAAAA,GAAAA,KAAUA,EAAAA;AAAAA,gBAASrC,KAAAA,GAAAA;AAAkB,YAAA5C,GAASC,uBAAqBsH,WAAAA;AAAAA,cAAAA,GAAAA,OAAAA,GAAqBtH,QAAEsH,EAAAA,GAAAA,CAAAA,GAAAA,MAAAA,GAAAA,KAAqBvH,EAAA;YAAA;UAAA,IAAAA,GAAA;QAAa0W,EAAAA;AAAOtW,eAAE6B,GAAQhC,SAASE,KAAEmG,GAAAA,SAAWrG,cAAaC;MAAA,EAAA,GAAA,KAAqBE,WAAEqf;AAASza,iBAAAA,KAAY5E;AAAC,iB6CmBp/Rsf,OAAAA,MAAAA,GAwE3B,cAAA,CAAA;QAAA;AAAA,YAAAC,KACE1U,GAAAA;AAAO2U,eAAaD,GAAOE,SAAAA,SAC7B7f,IAAC;AAAA,iBAAA,OAAA,OAuGA,MAjGD4f,EAAAA;QAAAA,GAAAA,GAAA,SAAA,SACE5f,IAAA;AAAOiL,iBAAO2U,MAAAA,KAAO/d,OACvB5B,GAOA0I,kBAAOmX,EACL,CAAA,GAAA,MAAKA,EAAAA,CAELje,CAAAA,GAAAA,QAAK+d;QACHD,GAAOI,GAAAA,gBAAAA,WACFle;AACAie,iBAIAje,EAAAA,OATwBA,IAY1Bge,GAAAA,EAAAA,QAAAA,EAAAA,MAAP,QAAA,QACE,MACErP,KAAO,CAAA,GAAIwP,QACTC,IAAQlgB,MAAOmgB,UACfhP,EAAAA,SACArK,KAAAA,GAAM,OAER2P,QAAQ,QACRrB,QAAAA,sBACAL,KAAO,WACPqL,MAAQ,OACRC,CAAAA,GAAAA,WAAAA,CAAAA,EAAAA;QAAAA,GAAAA,GAAAA,oBAEA/b,SACAwI,IAAAA;AAAAA,cAAAA,KAAW,IAEf5M,KAEO8f,OAAAA,EAAAA;AAAAA,iBAAAA,aAAkBD,OACvB5f,GAAA,QAAeA,GAAa0f,QAAAA,GAAOE,OAuDnC,EApDkC,MAAA,EAAA,aAAVA,KAACpd,EAAAA,CAAAA,GAAAA,GAAsBod,OAAcpd,EAC3DoN,QAAO8P,GACLld,iBACE2d,EAAAA,EAAa,CAAA,GAAA1f,GAMnBmP,OAAO8P,EAAAA,SACL1O,GAAQ8F,iBAAO0C,EAAiB5J,EAAAA,CAAAA,GAAAA,GAGlCA,OAAO8P,EAAO,UACHrE,GAAa7B,iBAAiB5J,EAAAA,EAAAA,CAAAA,GAGzCA,GAAO8P,OAAO,EACZzO,YAAU8N,IAAcvF,GAAAA,GAAAA,QAAAA,EAAiB5J,CAAAA,GAAAA,GAI3CA,SAAO8P,IACL7P,MAAAA,GAAAA,UAAYpP,GAAcoO,OAAQG,IAAAA,EAAAA,IAAAA,UAI7BsH,UAEH1G,EAAO1B,eAEFoI,QACLvO,WAAI,GACJoN,CAAAA,GAAAA,GAAAA,cAAUS,GAAAA,OAAekB,IAAAA,EAAAA,IACzBD,cAIAjH,UAAOvB,EAAAA,eAEKgI,QACR,WAAA,GACJlB,CAAAA,GAAAA,GAAAA,WAAUS,GAAAA,QAAAA,QACViB,SAAAA,IAAWvE;AAAAA,mBAKJ8D,GAAAA,OACFA,IAAAA,EAAAA;UAAAA,CAAAA,GAAQvQ;QAAAA,GAAAA;MAAAA,EAAAA;AAAQ,eAACpE,GAAMmO,IAAAA;AAAAA,YAAAA,IAAO0G,KAAAA,GAAAA;AAAOD,eAAM,EAItD,MAzGA,EAAA,EAAA,MAAAvW,GAAA,MChFAmB,SAQM2O,GAASG,SAiDf,kBAEI4D,GAAM1S,UACNmf,GAAAA,OAAeA,IAAAA,WACf,GAAA,GAAA,IAAA,GAAgBnf,GAAMoX,WAAgBA,GAAAA,UACtC1L,EAAAA,GAAAA,OAAW+G,EACT/G,CAAAA,GAAU7M,GAAA,OACJ6M,GAAAA,MAAAA,EACNiD,GAAOjD,SAAAA,SAETxI,IAAAA;AAAAA,UAAAA,GAAAA,eAEYA,GAAAA,aAEZqQ,KAxCgB,aAGR6L,IAAAA,GAAAA,MAAAA,GAAAA,QAEHC,GAAAA,GAAAA;QAAAA,EAAAA,IAAa9V,KAAAA,GAClB,UAAA,cAEMxB,OACAqP,GAAAA,aAMRA,GA0B0BpX,WAtBOnB,GAAA,KAAA,MAAAA,GAAA,KAAtBuY,GAAOvR,MAAAA,IAAAA,GAAAA,aACFA,CAAAA,CAAAA,GAAW7F,GAAM+H,UAAKrC,cAAuB0R,OAE7CvR,GAAAA,OAAAA,YA1CNuR,GAAAA,OAA4C,UAAAvY,GAAA,KAAtBmB,MAACoX,GAAAA,KAAOkI,GAAAA,MAC/Btf,IAAMoX,GAAAA,UAAOkI,GAAAA,OAAgBvX,SAAKrC,EAAM1F,IAAM2I,EAAAA,UAAWyO,GAAAA,OAGxDA,IAAAA,OAAgBA,EAAAA,QAAO/B,GAAAA,QAG3BM,MAAAA,GAAAA,MAAgByB,KAAAA,GAAOtQ,IACvB9G,EAAAA,CAAAA,IAAAA,GAAO,KACLoX,IAAQpX;MAAMoX;AAAAA,eACdrP,GAAM/H,IAAM+H;AAAAA,YACZY,KAAAA,GAAWA,GAAAA,KAAAA,GAMZ3I,SAAW0F,IAAAA;AAiDtB,iBC7EgB6Z,GAAAA;QAAGvf,CAKjB;AAAA,eAAe8O,EACTiB,MAAqB,EAAA,WAAC3L,GAAK,GAAA,IAAW2L,GAAAA,GAAAA,UAmC5C,EAEIzQ,GAAA,SAAAoM,SAAW+G,IAAU/G;AAAAA,UAAAA,GAAU,cAAcA,GAAAA,aAC7C6H,KAxBgB,YAGdvT,IAAMwf,GAAAA,GAAAA;QAAAA,EAAAA,GAAAA,GACV7Q,WAAO0Q,GAAAA,WAAkBxgB,GAAA,IAAA,MAAYE,IAAS4J,SAIpC/I,IAAAA,IAAAA;AAAAA,cACII,KAACJ,SAGHI,IAAC2I;AAAAA,gBAAId,IAAAA;AAAAA,kBAAMK,KAAI,GAAA,YACzBnJ,GAAA,OAzBc;AAAA,kBAACqM,GAAAA,QAEftM,GAAAD,EAAA;YAAU0Y;AAAAA,mBAAUyB;UAAAA,EAAAA,EAAAA;AAAYjJ,iBAAO9E,MAAAA,GAEvC,SACE,OAAOsM,EAAKnM,IAIhB,EAAA,KAAAtM,GACF,IAAA,MAiBIA,IAAA,KAAAD,GAAIuY,KAAiB/L,QAAmB9L,GAAA,CAAA;QAAA,CAAA,CAEjCD;MAAAA;AAACmgB,eAAQ1X,GAAKjB,IAAIiB;AAAAA,eAAYY,EAAK3I,IAAM2I,EAAAA,YAAayO,KAC/D,GAWJ,ECtDgBsI,IAAAA,EAAAA,MAAAA,SAKd,SACGH,GAAGC,SAAAA,aACC,MACD9M,MAAK,IAAA,EACLyM,GAAAA,OAASnf,GAAMmf,WACfC,GAAAA,GAAAA,SACArX,GAAMlJ,GAAA,YAAeoP,GAAAA,YACrBvC,IAAW+G,EAAAA,CACT/G,CAAAA;MAAAA;AAAU,eAAA,KACJA;AAAAA,YAAAA,KAAAA,GAAY1L,GAAM0L,KAAAA,GAAAA,SAAY7M,IAAA;AAAA,iBCV9B8gB,GAAAA;QAAAA,CAAAA,GACd5gB,KAAA,GAAY4P,SACCI,IAAY;AAAA,iBAAAlQ,GAACuF;QAAK,CAAA,GAAA5E,KAAWkG,GAAAA,SACf7G,IAAA;AAAA,iBAACuF,GAAK;QAAA,CAAUA,GAAC0a,KAAAA,GAAAA,GAAMzf,KAAA,WACvB;AAAA,iBAAMG,KAAAA,GAAA,eACvBiP,SAEW;QAAA;AAAA,eAAA,EACnB,SACSsB,EAAAA,WAAO6P,GAAAA,GAAejgB,OAAAA,GAGjCd,GAEA,UACE,KAAA,EAAA,GAAO6M,MAAAA,GAAAA,KAAW+G,IAAU/G,SAAU7M,IAAU8P;AAAOjD,iBAAAA,EAAAA,IAAUmU,EAAAA,KAAAA,GAC9Dna,IACCA,KAAK6C,GAAAA,CAAKL;QAAAA,CAAAA,GAAInJ,OAAA,EAAA,YACZ,CAAAD,MAAQQ,MAAGR,GAAAmB,WAAa0I,EAAAA,IAAKA,EAC/B,SAEU/J,GAAOkhB,SAAAA,GAAapa,SAAa/F,GAAAA,GAAAA,WAChC,GACTsO,GAAAA,SAAW,GAAApP,GAAA,UACXsgB,OACAzT,EAAAA,CAAAA,GAAAA,OAAW+G,EAAAA,YAAoB3T,MAAA,MAAmB4M,GAAAA,UAAUqU,EAAAA,IAAAA,EAAAA,SAI/DjB,GAAWlgB,gBAA2C,GAAhB8G,SAAK/F,GAC1CL,GAACogB,WACCzR,GAASpN,GAAE,UAAA,GAAAhC,GAAA,UACFmhB,QACTtU,EAAAA,CAAAA,GAAAA,OAAW+G,EACT/G,SAAU,EAAA,IAAA,EAAA,SACHA,GAAAA,OAAUuU,GAAAA,SAKtBnB,GAAWlgB,GAAOqS,WAChByO,GACCzR,GAAAA,OAAW,GAAApP,GAAA,UACXsgB,KAASa,EAAAA,CACTtU,CAAAA;MAAAA;AAAAA,UAAAA,KAA+B,SAAiBA,IAAAA;AAAAA,iBAAUiC,KC9CnC;AAAA,iBAWhBuS,GAAAA,MAAAA,MAAA,SAAA9C,KAAA;QAAA;AAAA,UAAAte,IAAAohB,EAAAA;AAAA,YAAA1gB,KAAAV,GAAAse;AAAA1c,eAAAhB,GAAAA,gBAAA0d,WAAA8C;AAAAjc,mBAAAA,IAednF,KAAA,EAAA,KAdS2L,MAAAA,OAAAA,GAAA,EAAA5L,KAAAC,GAAA,GAAA,QACgB;AAAA,gBAAAoY,KAAAW,GAAAnX;AAAKV,uBAAMiL,GAAAA,cAAAA,GAAAA,YAAxBkV,IACTrc,MAAAA,GAAAA,aAAcsc,OAAAA,GAAAA,aACFA,GAAAA,MAGgB,4BAAeA,GAAAA,SACzCxL;UAAIjH;QAAAA,GAAAA,GAAAA,UAAgCwS,SAAAA,IAAAA,IAAAA;AAAAA,iBAAUC,KAAAA,KAAAA,IAAAA,KAAAA,KAEjD,KAOKC;QAAAA,GAAAA,GAAAA,iBAAQC,SACdzhB,IAAIyhB,IAAQC;AAAAA,mBAGFxhB,IAGHS,KACT,GAACwJ,KAEOwX,EAAAA,KAAAA,MAAAA,OAAA,GAAA,EAAethB,KAAQ+C,GAG7B,GAAA,QAFA;AAAIwe,gBAEiBC,KAAA7I,GAAAnX;AAAKV,gBAAAA,MAAMiL,GAAAA;AAAAA,gBAAAA,KAAAA,GAAAA,MAAS5L,GAA9B+X,KACTI,EAAA1T,MAAAA,KAAAhF,GAAY,MAUVO,GAAA,KATA,EAAA;AAAgBwI,YAAAA,MAAAA,cAAoBnC,OACtBzD,GAAE4F,UAAaG,GAAAA,QAAOtC,IAGlC+a,EAAAA,IAD4BphB,GAAA,YAAA,KAAA,QAAZghB,IAAAA,EAAAA,IACTjJ,GAAOiJ;UAAeE;AAAAA,iBAAgBH;QAAAA,GAAAA,GAAAA,WAEjCC,SAAeE,IAASnJ;AAAAA,cAAOgJ,KAAAA,CAAAA,EAAAA,OAOjDvhB,GAAO4hB,IACRzX;AAES2B,UAAAA,GAAAA,KAAAA,KAAA,eACQ,KAAAC,IAAOlF,CAAAA;AAAK6C,cAAAA,KAC5BoY,IAAWpf,EAAKb,EAAAA;AAAAA,iBAAK8f,GAAAA,SAAAA,GAAetG,QAAKxZ;QAAAA,GAAAA,EAEzC5B,IAAA,CAAY8hB,EAAAA,KAAG,QAKf,KAAA,WAFOjhB;AAAS+F,iBAAK/F,EAGvBihB;QA7CA5Z,EAAAkZ,CAAAA,CAAA,GAAAjgB;MAAAA,EAAAA,EAAA,GAAA,KAAA,SAAApB,IAAAC,IAAAC,IAAAQ,IACE;AAAA,eAAqBshB,SACtBX,IAfc;AAAQ9V,cAAAA,IAAAA,KChBvB,SAAAnL,KACE+I,GACAoY,SAEAC,GAAAA,UAEDjc,GAAAA,KAAAA,QACC0c,IAAAA,SAAoBvf,IAAAA;AAAAA,mBAAM0J,EAAAA,CAAAA,GAAAA,EACtB7G;UAAAA,CAAM7C,IAAAA,CAAAA,GAAK0J,KAAAA,GAAAA,QAAQ/C,KAAIvG,GAAA,KAAA,SACrB7C,IAAYqD;AAAAA,mBACdrD,GACA,UACkBa;UAAAA,CAAAA,GAAAA,KACVyX,OAAGnM,KAAQ8V,OAAAA,KAAK,OAAAtgB,KAAA;AAAC0B,cAAAA,WAAQ6F,KAAAA,KAAAA,OAAehJ,GAAA,YAIxCwB,KACF8U,OAAG7U,KACT+G,OAAS,MA8CbtI,KAAAuB,KAAA,OAnD0BiP,KAAX0H,MAwBR4J,KAYuB,MAAtB5J,KAAOgJ,QAAAA,MAAAA,KAGT9K,KAAAA,OAEA9N,KAAAA,KAfY,CAAAzI,MAAVkiB,KACFzZ,MAAS/H,KACAwhB,QAAQ/hB,KAGjBgiB,KAAQniB,OACRqW,KAAM,OAvBI3V,OAEZ2V,KAAAA,CAAM,IACG6L,GAAQ,CAAAtf,GAAA,KAGjByT,EAAAA,OACQvW,IAAA,WAIRuW,IAAAA,SA4BFnK,GAAAA,CAAU;mBAIF/J,IAAAA;AAAK,gBACX8G,KAAAA,GAAOA,QACPoY,EAAAA;AAAWA,YAAAA,GACXC,EAAAA,EAAAA,YAASA;UAAAA,WAGX7f,IAAA;AAAA,gBAAcyK,KAAQnK,GAAAA,QACtBmK,EAAAA;AAAQjD,YAAAA,GAAOoY,OAAAA,IAAAA,CAAYA;UAC5B;AAAA,iBAAM,EAAI9K,CAAQ,GACjBjW,IAAA,EAAW8hB,MAAWrgB,EAAAA,SAAQsW,GAC9BnM,EAAAA,CAAQsK;QAAAA;MAAAA,GAAAA,KAAOvN,SAGjBnJ,IAAAC,IAAAC,IAAA;AAAA,eAEEwC,SACE0J,IAASA;AAAAA,cAGd5L,MAEU+hB,GACX,OAAA,CAAA,EAAA,OAAgCf,GAAAA,KAAAA,OAAiCjc,IAAAA,CAAAA,GAC/D,KACMgT,SAD2BhT,IAAAA;AAAAA,mBAAAA,GAAM7C,UAAK0J;UAAAA,CAAAA;AAAAA,iBACrB8V,EAAAA,CAAAA,GAAKxhB,IAAAF,KAAA,GAAAR,IAACsD,MAAMA,GAAAA,YAAE6F,KAAUA,GAAKlJ,IAEpDC,EAAA,EAAAQ,EAAA,IAAA,GAOAV,IAAA,GACKuF,IARAgT,EASAiK,EAAAA,EACDrZ,CAAAA;QACqB;MAAA,GAAA,KAAS,SAG9B5D,IAXGid;AAAAA,iBAAAA,KAAqCjd;AAa9C,iBAACvF,GAAA,MAAA,MCzFD8L,SAAAA,KAAAA;QAAAA;AAAAA,eAAAA,EAAAA,IAAAA,EAAAA,GAAAA,GAAAA,UAAAA,WAAAA,SARuBP,IAAAA;AAAAA,cAQvBO,KAAAA,CAAAA;AAAAA,iBAAAA,KAAAA,MAAAA,QAAA7L,GAAA,MAAA,KACE,MAAgB,IAUhBD,GAAA,KARI6B,KAAKV,MAAMkM,OACbC,IAAa,KAAIzL,MAAKV,SAAUiM,GAAQC,OAAKxL,KAAKV,MAAMiL,KAAAA,GAAAA,MAGtDvK,KAAKV,MAAMoM,OACC,IAAI1L,EAAAA,CAAAA,GAAKV,IAAAA,EAAAA;QAAAA,GAAMoM,EAAAA,IAAAA,CAAKH,EAAAA,KAAQG,QAAWpM,KAAAA,WAAMiL;AAAAA,iBAIxDgB,EACAE;QAENlM,EAAAA,CAAAA,CAAA,GAAAnB;MAAA,EAAA,EAAAuJ;AAAAA,eAnBD,GAAAxJ,IACE;AAAA,YAAAC,KAAA,GAAqBwiB,GAAAA,KAAAA,GAAAA,EACvB,UANuBlX,KCqBTyW,GAAAA,GAAAA,KAAAA,GAAAA,CAAAA,GACd7gB,KAKAX,GAAA,CAAA,GAAYsP,KAAGG,GAAAA,CAAAA,GACPe,KAAab,GAAAA,MAAba,KAAAA,GAAAA,SAE0BZ,IAAAA;AAAAA,iBAAlBE,GAAA;QAAcA,CAAAA,GAAA1M,KACd6U,YACVlT,QAAoB,QAACA,KAAAA,SAAKlF,GAAUkF,UACpCmd,EAC0B,aAAA,EAAA,MAAb9hB,KAAA,WAAA;AAAA,cAAEqQ,KAAAA,GAAAA,SACDwR,eAGEE,EAAG;AAAA,cAAA3iB,GAAA,OACvB,QAA0BmR,GAAAA,CAAAA;QAAAA;AAAAA,eAASmM,GAAAA,WACnC;AAAA,cAAexc,KAAAA,GAAAA,MACb8C,OAAA,EAAOgf,aAwFX,IA7DU,GAAA,EAAA,EAAA,SACRziB,KAAe2Q,GATe6R,UAb1BD,CAAkBna,EAAAA,GAAcka,GAAAA,MAAAA,CAAAA,IACvBA,IAAAA,GACTrW,EAAAA,SAAAA,KAAS7G,GAAQA,UAAM6G,CAAU,EAAA,CAAA;AAC9BqM,iBAAWxH,GAAAA,SAKhB7E,YAAuBA,EAAAA,GAAAA,WAAU;AAiBnC,mBAFA0D,GAAOqB,SAAS6L,WAAAA,EAAYlM;UAAAA;QAAAA,GAEfhB,CAAAA,EAAAA,CAAAA,GAAAA,GAAAA,WAAAA;AAAOqB,cAAAA,IAAAA;AAAAA,gBAASE,IAAAA,KAAAA,GAAAA,QAC/B,KAAIvB,SAKM7P,IAAA;AAAA,qBACHsF,GAEL,UAAsBA,GAAM6G;YAAAA,CAAAA;AAAQ8V,YAAAA,MAAAA,MAAK9hB,OAAAF,GAAA,YAAOoD,SAAE6F,KAAAA,GAAUhI,aAEvD0hB,KAKe,IAAA/f,GAAdye,GAAAA,SACYA,KAAAA,GAA2B,CAAA;UAAA;QAAA,GAAA,CAAlBuB,EAAAA,CAAG3hB,GAAMogB,GAAAA,WAAa;AAAA,cAElCsB,KAActB,GAAAA;AAAAA,UAAAA,MAAAA,MAAAA,GAP3BwB,SASAxd,EAAAA,SAEMpF,GAAA,QACR,CAAA;QAAA,GAAe2Q,CAAG6R,EAAAA,CAAAA,GAEb7R,EAAAA,UAGKpF,EAAAA,UACRU,IAAAA,cAEJ1L,GAAG,eA4BC,MAAAsT,KAAAA,SAAAA,MACA,GAAA,OAAAtT,GAAYsB,eAAAA,MAA4B5B,KAAdmhB,SAAkB,MAAS,GAAA,WAChCA,GAAAA,GAAAA,MAAAA,GAAc,GAAdA,QAAkB,yBAASvhB,IAChD6M;AAAAA,iBAAAA,MACEA,KAAAA,QAAU,OACVA,KAAU,SAlBS;QAAC0U,EACxBnhB,EAAA,CAAA,GAAAH,GAAA,UACS,IACiB,GAAA,SACjB,SAGFA,IAAA;AACT,UAAAA,GAUyCshB,eAC5B1U,GAAUnK,GAAAA,gBAhCC,GAAAxC,GAACA,GACvBA,GAAE8iB,OAAAA,SAAAA,GAAAA,YACAC,GAAAA,aAEFjS,GACEkS,OACQ/Z,CAAAA;QAAAA,EAAAA,CAAAA;MACS;AAAA,UAAfjJ,KAAEijB,SAAqB1K,IAAW4H,IAAAA;AAAAA,YAAAA;AAAAA,mBAC5BmB,OAGZvhB,KAAA;AC7HK,YAAiBU,KAAA,KAAA,IAAwByiB,GAAAA,KAC9C,WAAIC;AAAAA,UAAAA,KAAAA,KAD0CD,IAAO,GAAApjB,GAErD,MAAesjB,QAAKC,CAAAA,EAEPC,MAAG,KAAA,SACED,CAAAA;QAAAA;AAAAA,eAElB5Y,WAAA;AAAA,cAAAlG,KAAAA,CAAAA,EAAA6B,MAAAzF,KAAAA,SAEA,GAAAL,KAAmB,KAAA,IAAA,GAAAJ,KAAAI,KAAJqL;AAAA,UAAAzL,MAAAqE,KAAAA,GAAAA,MAAA6B,QAAAzF,EAAAA,KAAAA,MACOyiB,aACJG,EAAAA,GAAcC,KAE1BC,WAEKhZ,WAAIkB;AAAAA,YAAAA,GAGPwX,MACFpV,QAAAA,EAAAA,GAAaoV,KAGfA;UAAY9gB,GAAAA,KAAAA,EAAAA;QAAAA;MAAAA;AAAW,eAAA,GACVsJ,IAAAA;AAAAA,YAAAA,IAAAA,KAAAA,SACC7L,IACd;AAAA,iBAGNA,cC7BgB4jB,aAMAC,KAAG,MAAC3jB,GAChB,KAAA,IAAIA,KAAAA,MAAAA,GAAa4jB,eACJrc,CAAC8M,EAAAA,KAAMrU;QAAE6jB,GAAAA,KAAAA,SAERxP,IAAAA;AAAAA,UAAAA,GAAMrU,gBAAE8jB;AAAe,cAAGD,KAAAA,SAI5B/jB,GAAA,MAACE,QACX+iB,MAAAA,OAAAA,EAEF,IAAA/iB,GAEiB+jB,EAAGjP;AAAAA,UAAAA,KAAAA,GAAAA,SAFIkP,IAAM7c;AAAAA,mBAEShD,GAAAA,IAAAA,EAAMyQ;UAAAA,GAAAA,EAAAA,GAAO,SAEpDqP,iBAAmBjkB,WAAc+jB,EAAAA,GAAY,SAE7Ctd,iBAASjC,YAAiBlE,EAAA,GAAA,SAC1BmG,iBAASjC,aAAiBzE,EAAA,GAAYmkB,SACtCzd,iBAASjC,aAAiBzE,EAAA;QAAA,GAAakkB,KACvCxd,SAASjC,IAAAA,IAAAA;AAAAA,UAAAA,GAAAA,gBAAiB;AAAA,cAAayf,KACzCnkB,GAAA,MAEa;AAA6BikB,UAAAA,KACxC/jB,GAAE+iB,EAAAA,KAAAA,SAAAA,GAAAA,MAEF,UAAwBiB,EAAM7c,MAAAA,GAAAA,MAEHnH,QAAM8U,KAAAA,GAAAA,EAAAA,IAASqP;QAAUhgB,GAAAA,KAAM8T,SAAUnY,GAAAE,IAAA;AAClEmkB,UAAAA,GAAUhgB,gBAAwCnE,GAAAA,SAI7CkkB,oBACLnB,WAAAA,EAAAA,GAAAA,SAEFtc,oBAAS2d,aAA+BF,EAAAA,GACxCzd,SAAS2d,oBAAoB,aAAaH,EAAAA,GAC1Cxd,SAAS2d,oBAAoB,YAAAtkB,EAAamkB;QAAAA;AAC1Cxd,eAAAA,EAAS2d,OAAAA,EAAAA,WAAAA,GAAoB,GAAA,IAAA,GAAA,GAAYF,WAIzC3jB,CAAA,GAAA,aACEoM,IAAAA,cAAsCA,IAAAA,SAAU,SAChD0X,IAAAA;AAAAA,iBAAaC,GACbC,gBACA/P;QAAAA,EAAAA,CAAAA;MAAAA;AAAAA,eAAS,GAACxU,IAAAA;AAAAA,YAAAA,KAAOA,GAAC+iB,GAAAA,KAAAA,GAAAA,IAAAA,GAAAA,KAAAA,GAAiB,CAGzC,CCjDM,GAAAziB,KAAAE,GAAA,CAAA,GAAYgkB,KAAAA,GAChBvjB,CAAAA,GAMA2B,KAAA,GAAemN,EAAAA;AACM,WAAA,WACgB;AAA9B5L,cAAOsgB,GAAAA,eACOxU,GAAAA,SAAba;AAAAA,gBAEEhR,KAAAE,GAAA,QAER;AAAW0kB,wBAAqBvd,OAASrH,MACvCI,GAAMykB,EAAAA,KAAkBxd,GAAAA,CAAAA;UAAAA;QAAAA,GAAAA,CAAQwd,EAAAA,CAAAA;AAAAA,YAAAA,IAEP1kB,KAAA,WAAA;AAAA,iBACvBwkB,QACEG,GAAKD,OAITX;QAEJ,GAAAtgB,KAiDQ2U,SAjDWrY,IAAA;AAAA,UAAAA,GAAeiB,gBAAMoX,GAAAA,GAAAA,KAAO7V,GAAAA,GAAiB1C,GAEhD,OAAA,SACdE,GAIAA,YAAE+iB,GAAAA,KAAAA,aAOI9hB,GAAMgI,OACS,KAAfjJ,OAAEijB,CAAAA;QAAAA;AALarT,eAKmBuQ,EAAAA,MAAAA,EAAAA,EAAAA,KAC5B9H,IAAAA,kBAAYiJ,GAI1B,UAwCAxhB,GACES,OAAAmY,IACEnV,WACA,GAAA,GAAA,IAAA,GAAgBtC,GAAMoX,IAAAA,GAAAA,MAAgBA,MAAAA,IAAOtQ,MAC7C4E,GAAAA,cACY,GAAA,MACVkY,OAAyB,IAAM,MAAA9kB,GAAA,UACxB2kB,EAAAA,GAAAA,SAAc/X,IAAU,OAAM,EAAA,CAAA,GAAA5M,GAAW,MAChD6P,IAAOjD,EAAAA,UAAUiN,GAEnBpF,OAAAA,UAEK5E,OAAAA,GAAOzL,OAAMyV,MAEd3B,GAAAA,IAAAA,GAAUhX,KAAMoX,GAAAA,WAAOJ,SACVI,IAAAA;AAAAA,UAAAA,GAAAA,KAAOzD,OAAAA,GAEnBzQ,SACMA,GAAAA,EAEX2gB;QAAAA,GAAAA,SA1DYhlB,GAAA,UAACE,IAEX6kB,GAAAA,UAAgB7kB,QAAE+kB,SAyDpBC,GAAAA,UAAeA,IAAAA,GAAAA,UAAoBA,OAAAA,IAAAA,KAAAA,GAAUrU,UAC7CyP,cAAyB,OAAUA,GAAAA,aAjC/B/H,GAASpX,WAIkB,MAAA,MAAAnB,GAAA,MAAA,IAAfgH,GAAAA,aACFA,CAAAA,GAAAA,GAAAA,IAAAA,EAAAA,UAAiB,EAAA,IAAA,CAAM7F,CAAAA,GAAMoX,EAAAA,OAEpCA,EAAOvR,WAAAA,GALI,MAiCE,SAAEgN,EAAU,GAAA,WAE3BhU,GAAA,OAAA6M,OAAAA,GAAWA,OAAgB,OAAA,WAAA7M,GAAA,OAxDxBuY,SAAOtR,EAAAA,IACH9F,EAAAA,UAAQ8F,GAAAA,OAGM4J,OAAlB0H,IAAAA,OAAO/B,EAAAA,QAEZK,GACCC,OAAAA,EAAAA,CAAAA,IAAU3V,IAAMoX,GAAAA,GAAO/B,KAAAA,EAAAA,IAAOvO,EAC9B9G,EAAAA,OACEoX,GAAAA,MAAQpX,GAAMoX,GAAAA,OAAAA,IAAAA,CAAAA,GAgDnBwM,GAAAA,OAAiB/C,aAAY7gB,GAAMgI,QAAWhI,GAAMoX,OAAO7V,eAtFvB6V,SAAOO,KAAAA,EAwF1C3X,IAAMgI,EAAAA,QAAe+H,GAAAA,QAAO6P,OAAAA,GAAAA,CAAAA,CAAAA;MAAAA;AAAAA,eAAwB,KACjD6C;AAAAA,YAAOrL,IAAAA,KAAAA,GAAQpX,GAAMoX,KAAAA,GAAAA,SAAe2L,IAI/C;AAAA,iBAAAlkB,GCzHqBmlB;QACnB,CAAA;AA8CYzb,eA9CGuG,KACHiB,EAAGhB,SAAY,EAAA,KAAC3K,GAAUA,IAAAA,WAAM2L,GAAM,GAkDlD,OAAIA,GAGEzQ,GAAA,UAAAW,KAAY6G,EAAAA,IACZ4E,KAAAA,GAAAA,cAA+B3M,GAAA,OAAiB2M,GAAAA,IAAUuY,SATpD1b,IAAGsN,IAAAA;AAAOoB,iBAAAA,SAAqBhM,IAAAA,IAAAA,IAAAA;AAAAA,gBAE7B/C,KAAAA,GAAI,YAAmBgc,GAAAA,OAvBnB;AAAA,mBAAiB5Y,EAAkB6Y,IAEnD,MAAiBnL,GAAGnD,IAAOmD,SAAAA,IAAYjJ;AAAO9E,qBAAAA,GAE9C,SACG3L,OACEqJ,SAAIT,IAAIpJ,IAAAC,IAAAS,IAAA;AAAA,oBAACsZ,KACR,SAAQzN,IAAAA,IAAAA,IAAmB;AAAA,sBA7Bd7L,KAAA,GAAA,aAMnBX,EAAA,GAAAU,KAA6B6kB,KCjBjBA;AAAAA,yBACdhN,EAAAA,SAIA,KAAcvB,MAAOqD,KAAAA,KAAAA,KAAAA,EAAAA,GAAa9B,SACA9L,GAIlC,WACEyY,GAAAA,QAJmB3Q,UAAsBiR,EAAAA;gBAAQA,EAAQC,IAAAA,IAKzDnF,EAAAA;AAAAA,uBAJsBlU,EAAAA,IAAAA,EAAAA,QAAkBA,IAAAA,OAAQtL,IAAAA,SDU9CyX,GACA9L,SAIF,SAEI/L,GAAA6X,QAAQA,CACRpP;cAAAA,EAAAA,IAAAA,IAAOuc,GACPpF,QAVaA,EAAAA,GAAAA,EAAAA;YAAAA,CAAAA,CAAAA;UAAAA,EAWb4E,IAAAA,IAAAA,GAAAA,MAXIA;QAAAA,CAAAA,CAAAA,IAAAA;MA0BAjL;AACAxN,UACYxK,KAAAA,SACZqjB,IAEJ;AAAA,eAQwD5b,SAAYzJ,IAAA;AAAA,iBAe5E,EAAA,CElCsB0lB,GAAAA,IAAG,EAAA,QAACzU,GAAAA,CAAAA;QAAc;MAAA;AAAA,eAAA,KAAM3L;AAAAA,YAC5CvF,KAAA,GAAA4Y,GAAA3Y,KAAA,GAEEiR,IAAAA,GAAAA,KAAQA,GAEZ,EAAC;AAAA,eCnCC,GAAA,WACiBgC;AAAAA,UAAAA,MAAOhT,GAAA,yBAChB8Q,IAAAA;AAAAA,mBAMR,SAJU/Q,IAAA;AAAA,qBAAA,EACJkV,CAAAA,GAAUnE,IDgCS,EAAA,UAACmE,GAAAA,CAAAA;YAAAA;UAAAA,EAAAA,EAAAA,CAAc5P;QAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,SACxC,EAAA,KAAAtF,IACKsF,MACH4P,QAAUA,WClCT,GAACA,GAGF1U,OAAA,GAAAT,GACEyD,UACK,KAAA,GACLoJ,OAAAA,EAAAA,CAAAA,GAAW+G,GAAU/G,MAAU,OAAUiD,EAAAA,QAAOjD,GAAAA,OAAU+Y,CAAAA,EAAAA,GAC1DvhB,EAAAA,IAAKuU,IAAA,GACA9I,EAAOzL,IAAAA,IAAMuhB,CAAAA;MAAAA;AAAAA,eAEN9V,KAAOqQ;AAAAA,YAAAA,KAAAA,GAIlBgF,IAAAA,GACDjlB,KAAAD,GAAA,CAAAQ,GAACqgB,KAAAA,GAAAA,CAAAA,GAAAA,KAGP,GC5BgB+E,IAAAA,GAAAA,KAAAA,GAAAA;AACd,eAAgCzV,GAAS,WAAxB0V;AAAWxV,gBAAA9P,GACbulB,QAAU,SASzB,UANAxV,GAAU,KAAA;QAAA,GAAA,CAAA/P,EAAA,CAAA,GAAAN,KACkC,EAAA,OAA5BmH,EAAAA,KAAQtG,IAAAA,WAASD,GAAAA,GAC7BglB,MAED,GAACC,GAAAA,UAKE,MAAKA,GACLlZ,OAAAA,EAAAA,CAAAA,GAAW+G,GAAU/G,MAAU,MAASiD,EAAOjD,GAAAA,EAAAA,IAAAA,EAAAA,UAAUqE,EACzD7M,eAAmBA,OAAM6M,CAAAA,CAAAA,IAAAA;MAExB2F;AAAAA,eAAexB,KAAUS;AAAAA,YAAAA,KAAAA,GAAAA,IAAAA,GAAekB,KAAAA,GAAAA,IAAAA,GAAAA,KAMjD9W,GAAA,CAAA,GCxBgB8lB,KAAAA,GAAAA,CAAAA,GAAAA,KAAAA,GAAAA;AACd,eAAkB9S,GAAO,WACgB;AAAA,gBAAxB4S,GAAAA,QACjB,SAQA,UANAvV,GAAU,KAAA;QAAA,GAAA,CAAAtQ,EAAA,CAAA,GAAAS,KACkC,EAAA,OAA5B2G,EAAAA,KAAQtG,IAAAA,WAASD,GAAAA,GAC7BglB,QAEAG,GAAAA,GAEAC,UAGEziB,MACAoJ,GAAAA,OAAAA,EAAW+G,CAAAA,GAAU/G,GAAAA,MAAU,MAAWiD,EAAOjD,GAAAA,EAAAA,IAAAA,EAAAA,UAAUsZ,EAC3D9hB,eAAmBA,OAAM8hB,CAAAA,CAAAA,IAAAA;MAExBtP;AAAAA,eAAexB,KAAUS;AAAAA,YAAAA,KAAAA,GAAAA,GAAAA,KAAAA,GAAesQ,EAAAA,UAMjDlmB,KAAA,GChBgBmmB,SAAAA,IAAAA;AACd,iBAAepW,GAAAA;QACME,CAAAA,GAAba,KAAAA,GAAAA,SACmBhR,IAAA;AAAA,iBAACuF,GAAK;QAAA,CAAA,GAAUA,KAAC0a,GAAAA,SAC/B/P,IAAY;AAAA,iBAAAlQ,GAACuF;QAAK,CAAUA,GAACsB,KAAAA,EAAAA,SACzBqJ,KAAY,GAAApN,KAAA,GAACyC,WAAeA;AAAC4P,cAAAA;AAAAA,YAAAA,GAAAA,S/DnBypB9N,IAAAA;AAAAA,qBAAQ,EAAA,C+DsBzsBif,GAAkBC,IAAAA,EAAoB,QAAA,EAAA,QAC1CvV,CJRgC;YAAA,CAAA;AAAA,gBAAA9Q,KAACqF,SAE9BA,IAAAA,IAAAA;AAAAA,kBACH0a;AAAAA,oBAAAA,KAAQlgB,QAAOkhB,QIKoBjhB,GAAA,SAAA,QAAA,CAAA,EAAA,KAAA,SAGd8P,IAAAA;AAAAA,kBAAAA,GAAAA,yBAAOqB,IAAAA;AAAAA,2BAASxF,SAASyP,IAAA;AAAA,6BAAApb,KAAtC6G,EACNmK,CAAAA,GJLiB/Q,IAAA,EAAA,MAAC4G,IAAAA,QAAkB,EAAA,OAAA,CAAA,IAACtB;oBAAAA;kBACzC,EAAAvF,EAAA,CAAA,GAAA,WAIE6G,WACAoZ;AAAAA,oBAAAA,GAAAA,SAAeuG,IAAAA;AAAAA,6BIDY3f,GAGzBtE,WAAAA,EAAW,SAAA,EAAA,CACTyO,GJ3BkCzL,IAAAA,EAAAA,QAAAA,EACxC,SAAIA,CAAM0a,IAAAA;oBAAAA,CAAAA;kBAAAA,GAAAA,CAAAA;gBAAWlgB,CAAAA;cAAOymB,SAC1B5N,IAAA;AAAA,uBAEEqH,GAAAA,EAAAA;cAAAA;AAAQlgB,qBAAO0mB,MAAAA,GAAAA,OIwBfjmB,GAAG,KAAG,QAAAE,EAAA,IAAAF;YAAA,EAAA,GAAA,SAAAR,IAAA;AAAA,iBAAA,MAAAA,EAAA,GAAAC,GAAA,SAAAD,IAAA;AAAA,uBACP,EAAA,CAAA,GAAAA,IAAA,EAAQE,MACP6V,MAAIjH,QJF2BvJ,EAAAA,MAAAA,CAAAA;cAAAA,CAAAA;YAAAA,CACnC;AAAA,mBAAA,QAEEsB,QACAoZ,MAAAA,GAAAA,OAAe7N,GAAAA,KAEnB,WIFK;YAAAqI,CAAAA,IAAAA,MAAA9I;UAAAA,SAAA+U,IAAAA;AAAAA,mBAAAA,QAAA,OAAA1mB,EAAA;UAAA;QAAA,GAAAA,GAAA,oBACF;AAAAya,eAAAA,GAAAC,WAAE5K;AAAAA,iBAAOsQ,GAAAA,GAAAA,GAAAA,MAAAA,CAAAA,GAwBVtd,GAAA,GAAA9C,GAAA,SAtBU,GAAA,WAIRgR,EAAAA,GAASkS,WAAyBhS;AAAAA,mBAGlCpB,GAAOqB,SAASoC,IAAG,WAAW+S,EAEvB;UAAA;QAAA,GAAA,CAAA,CAAA,GAAA,GAAA,WAAanV;AAAAA,UAAAA,GAAAA,UAAS5G,OAAI,EAAA,UACnC,QAEAgG,MAAU7P,GAAA,UAAAT,GACJ6P,GAAOoB,GAAAA,OAAU+O,YAA4BpZ,IAAAA,IAAAA,EAAAA,CAAAA,CAAAA;QAAAA,GAAM/F,CAAAA,IAAAA,IAAAA,EAAAA,CAAAA,GAGrDkQ,EACEkS,OAAyBhS,EAAAA,MAAOgG,iBAA8BM,WAGlDA,GAAAA,UAId,GAAA3D,WAAK,GAAA3T,OAAA,EACL2M,UAAAA,GAAW+G,SACT,IACA/G,MAAU7M,GAAA,UACVigB,SAAkBgB,GAAAA,OAAoB,EAAA,CAAA,GAAAjhB,GAAA,MAAa,WAC5C6M,EAAAA,OAAUsK,GAAAA,MAAAA,CAEnB9S,EAAAA,GAAAA,OAAKuU,EAAA,WACOvU,EAAM8S,OAAAA,EAAAA,WAEPrH,GAAOgF,aAICmM,EAAAA,CAAAA,GAAAA,EAAAA,IACjBxgB,IAAA,GAAA,EAAA,OAAKoM,EAAAA,WAAqB,GAAA,SAAA,GAG5BpM,OAEA,EAAA,QAAAA,GAAAA,OAAKoM,EAAAA,GAAAA,EAAAA,IAAWA,IAAU,CAAA,GAAA,EAAA,IAAA,IAAYxI,GAAAA,EAAO,OAAE8b,EAAAA,KAAeA,IAAAA,IAAAA,eAE9D,WAEgB,GAEhB1f,MAAA,EAAA,CAAKgD,CAAAA;MAAAA;AAAAA,UAAcwE,KAAiB4E,SAAAA,IAAWA;AAAAA,iBAAU5M,GAG/DA,ICnFM0mB;AAAAA,cAAKA;AAAAA,kBAAAA,KAAAA,GAAAA,KAAA,IAAA,KAAAnb,MAIT,SAAYsE,QAAwBpH,GAKD,SAJjCA,QAAOpC,GAAAzE,SAAAA,IAJFiO,KAAAA,OAAAA,EACA0G,UAAAA,EAAAA,EAAAA,GAAAA,cAIA1G,EAAS5P,EAAA,EAAA,CAAUyf,EAAAA,OACrBC,EAAAA,GAASgH,GAAAA,SAAQC,GAAAne,OAAQ8X,QAAAA;QAAAA;AAAkBqG,UAAAne,IAAAA,EAAAA;AAC3CC,YAAAA,KAAAA,GAAOmH;AACL0G,eAAc1G,GAAAA,eATZ6W,SAUR3mB,IAAA;AAAA,iBAAA,KAmEA,OAjEM8mB,OAAAA,EAAAA,GAAAA;QAAA,GAAA5mB,GAAA,gBACL2B,WAAKiO;AAAAA,iBAAOnH,EAAOmH,GAAAA,UAIrBlJ,EAAAA,OAAAA,KAAA,QAAA,UACE,EAAOnG,IAAE+e,CAAAA,CAAcuH,EAAAA,CAAAA;QAAAA,GAAAA,GAAAA,cACdllB,WACPd;AAAAA,iBAAUN,KAAa,UAU3BumB,KAAAA,OAAAA,aAAA,GAaE,MAZKnlB,wEAED,IAAA,GAAA,KAAA,QAAA,GAAA,EAAA,KAAA,cAAA,GAAA,KACA,OAIColB,SAGL5hB,GAAOxD;QAAAA,GAAK+E,GAAAA,UAAAA,WAAsBkJ;AAAAA,eAAAA,OAAOqH,SAG3C,WAKA8P,GAAA,EAAA,MAAA,KACEplB,OAAKiO,SAAOqB;QAAAA,GAASuL,GAAAA,SAAAA,SAEd1c,IAAM6B;AAAAA,iBAAKiO,MAAAA,GAAOqH,MAAAA,oCAWvBpB,IAAAA,GAAIjH,GAAAA,WAAM,SAAA,KAAA,GAAA,MAAA,2BAGahO,KAAAA,yEAEa,GAAA,SAAA,KAAA,OAAA,YAAAd,IAAA,EAAA,KAAA,cAKtC6B,GAAAA,EAAAA,GAAKiO;QAAAA,GAAOqH;MAAAA,EAAAA,CAAAA;AAAAA,QAAAA,OACLtV,GAAAA,EAAAA,YAAK+E,GAAAA,EAAAA,SAEL/E,IAAAA,EACT,OA7EiBoI,IAAAA,EAAAA,MAAAA,GAAAA,EAAAA,YAAAA,IAAAA,EAAAA,gBAAAA,GAAAA,EAAAA,YAAAA,WAAAA;AAAAA,eAAAA,EAAAA,SAAAA,KAAAA;MAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA,OhETkqB,GAAA,EAAA,YAAa,IAAO5C,EAAAA,YAAa,IAAA,EAAA,SAAA,IAAA,EAAA,cAAA,IAAA,EAAA,WAAA,IAAA,EAAA,WAAA,IAAA,EAAA,gBAAA;IAAA,CAAA;;;",
  "names": ["Status", "t", "n", "e", "l", "u", "a", "parentNode", "removeChild", "i", "h", "o", "r", "f", "arguments", "length", "children", "defaultProps", "v", "type", "props", "key", "__k", "__b", "__d", "__c", "__h", "constructor", "p", "d", "this", "context", "__", "_", "indexOf", "__e", "k", "base", "push", "debounceRendering", "setTimeout", "g", "__r", "sort", "__v", "some", "__P", "s", "__n", "ownerSVGElement", "z", "m", "y", "b", "w", "x", "Array", "isArray", "ref", "C", "j", "c", "A", "N", "appendChild", "nextSibling", "insertBefore", "$", "setProperty", "test", "style", "cssText", "replace", "toLowerCase", "slice", "addEventListener", "T", "I", "removeAttribute", "setAttribute", "event", "contextType", "value", "__E", "E", "prototype", "render", "O", "state", "_sb", "getDerivedStateFromProps", "__s", "componentWillMount", "componentDidMount", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "componentWillUpdate", "componentDidUpdate", "H", "getChildContext", "getSnapshotBeforeUpdate", "diffed", "call", "localName", "nodeType", "createTextNode", "createElementNS", "document", "createElement", "data", "childNodes", "dangerouslySetInnerHTML", "attributes", "name", "__html", "innerHTML", "checked", "current", "unmount", "componentWillUnmount", "firstChild", "Math", "random", "toString", "getDerivedStateFromError", "setState", "componentDidCatch", "forceUpdate", "Base", "id", "_id", "_createClass", "parentElement", "content", "html", "ProcessorType", "_Base", "Cell", "_this", "update", "HTMLElement", "outerHTML", "cast", "Row", "cells", "_cells", "cell", "index", "toArray", "map", "fromCells", "set", "get", "Tabular", "rows", "_rows", "_length", "_inheritsLoose", "row", "fromRows", "fromArray", "EventEmitter", "callbacks", "_proto", "listeners", "listener", "init", "off", "eventName", "filter", "emit", "apply", "_arguments", "deepEqual", "obj2", "obj1", "hasOwnProperty", "Object", "keys", "keys1", "keys2", "_i", "_keys", "PipelineProcessor", "_EventEmitter", "_props", "setProps", "process", "validateProps", "args", "_process", "concat", "updatedProps", "GlobalSearchFilter", "keyword", "String", "columns", "ignoreHiddenColumns", "selector", "cellIndex", "hidden", "rowIndex", "element", "tabular", "Filter", "className", "prefix", "reduce", "prev", "cur", "trim", "ServerGlobalSearchFilter", "options", "url", "updates", "body", "ServerFilter", "__H", "__V", "B", "__N", "every", "F", "shift", "requestAnimationFrame", "clearTimeout", "cancelAnimationFrame", "enUS", "search", "placeholder", "sortDesc", "pagination", "previous", "navigate", "page", "pages", "showing", "noRecordsFound", "error", "Translator", "_language", "_defaultLanguage", "language", "getString", "message", "lang", "split", "val", "join", "translate", "messageFormat", "translated", "useTranslator", "_config$translator", "config", "translator", "payload", "useConfig", "useSelector", "useStore", "useState", "getState", "_useState", "useEffect", "store", "subscribe", "setCurrent", "updated", "Search", "undefined", "processor", "setProcessor", "dispatch", "server", "header", "pipeline", "register", "unregister", "waitFor", "timeout", "target", "HTMLInputElement", "debounceTimeout", "resolve", "func", "_config$className", "onInput", "defaultValue", "PaginationLimit", "isNaN", "Number", "limit", "Error", "Limit", "ServerPaginationLimit", "ServerLimit", "Pagination", "summary", "_config$pagination", "nextButton", "prevButton", "_config$pagination$bu", "buttonsCount", "_config$pagination$pa", "resetPageOnUpdate", "_config$pagination$re", "useRef", "total", "setTotal", "S", "onUpdate", "on", "updatedProcessor", "ceil", "currentPage", "setCurrentPage", "classJoin", "role", "paginationSummary", "min", "tabIndex", "disabled", "title", "paginationButton", "paginationButtonPrev", "maxCount", "pagePivot", "floor", "Fragment", "from", "onClick", "setPage", "paginationButtonCurrent", "paginationButtonNext", "width", "containerWidth", "parseInt", "px", "ShadowTable", "tableRef", "cloneNode", "position", "zIndex", "visibility", "nodeElement", "shadowTable", "str", "word", "charAt", "toUpperCase", "PluginPosition", "log", "throwException", "format", "console", "warn", "info", "PluginManager", "plugins", "add", "plugin", "remove", "splice", "list", "order", "PluginRenderer", "pluginId", "component", "Header", "_columns", "adjustWidth", "container", "autoWidth", "clientWidth", "widths", "getShadowTableWidths", "tempRef", "querySelector", "tableClassName", "tableElement", "tableLayout", "padding", "margin", "border", "outline", "querySelectorAll", "getAttribute", "minWidth", "tabularFormat", "_iterator", "done", "column", "setSort", "sortConfig", "cols", "_step2", "_extends", "setResizable", "resizable", "_iterator3", "_createForOfIteratorHelperLoose", "setID", "_step4", "populatePlugins", "pluginManager", "_iterator5", "_step5", "fromColumns", "_iterator6", "typedColumn", "createFromConfig", "fromHTMLTable", "_step7", "_iterator7", "th", "result", "_iterator8", "col", "nextRow", "leafColumns", "_step9", "maximumDepth", "Storage", "MemoryStorage", "_Storage", "Promise", "reject", "ServerStorage", "handler", "handle", "ok", "json", "response", "statusText", "opts", "fetch", "then", "bind", "res", "StorageUtils", "storage", "tableElementToArray", "display", "parsedRow", "TEXT_NODE", "parseFromString", "documentElement", "textContent", "pact", "_settle", "_Pact", "onFulfilled", "onRejected", "callback", "thenable", "steps", "cache", "lastProcessorIndexUpdated", "clearCache", "findProcessorIndexByID", "processorPropsUpdated", "addProcessorByPriority", "priority", "afterRegistered", "tryRegister", "subSteps", "_steps", "proc", "newSubStep", "second", "getStepsByType", "getSortedProcessorTypes", "_this2", "_temp2", "array", "check", "_isSettledPact", "processorIndex", "_processor$process", "setLastProcessorIndex", "Pipeline", "_step", "StorageExtractor", "Extractor", "arrayResponse", "Transformer", "ServerInitiator", "_PipelineProcessor", "entries", "serverStorageOptions", "_ref", "acc", "Initiator", "StorageResponseToArrayTransformer", "castData", "pad", "storageResponse", "PipelineUtils", "isDispatching", "getListeners", "reducer", "prevState", "lis", "initialState", "ConfigContext", "Consumer", "createContext", "Config", "assign", "defaultConfig", "partialConfig", "fromPartialConfig", "Store", "status", "Init", "height", "processingThrottleMs", "multiColumn", "colSpan", "messageCell", "eventEmitter", "formatter", "TR", "messageRow", "TD", "MessageRow", "TBody", "visibleColumns", "tbody", "Loading", "loading", "headerLength", "notfound", "NativeSort", "condition", "direction", "compare", "cellA", "cellB", "compareWrapper", "cmp", "_iterator2", "sortedRows", "sorted", "Sort", "_state$sort", "find", "multi", "count", "reset", "_index2", "SortToggle", "SortColumn", "ServerSort", "processorType", "getSortProcessor", "processors", "currentColumn", "_props$direction", "setDirection", "preventDefault", "stopPropagation", "actions", "shiftKey", "wait", "timeoutId", "Date", "now", "execute", "currentTime", "lastTime", "elapsed", "Resize", "getPageX", "MouseEvent", "pageX", "changedTouches", "offsetStart", "thRef", "moveFn", "end", "thElement", "removeEventListener", "onMouseDown", "start", "onTouchStart", "TH", "setStyle", "fixedHeader", "offsetTop", "top", "isSortable", "onKeyDown", "which", "rowSpan", "THead", "thead", "renderRow", "totalRows", "calculateRowColSpans", "depth", "remainingRows", "columnIndex", "SetHeader", "table", "HeaderContainer", "setIsActive", "headerRef", "FooterContainer", "footerRef", "isActive", "footer", "Footer", "Container", "processPipeline", "throttle", "Loaded", "Rendered", "_temp", "Grid", "instance", "_assertThisInitialized", "updateConfig", "Provider", "forceRender", "destroy"]
}
