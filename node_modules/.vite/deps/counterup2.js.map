{
  "version": 3,
  "sources": ["../../counterup2/index.js"],
  "sourcesContent": ["export const counterUp = ( el, options = {} ) => {\n\tconst {\n\t\taction = 'start',\n\t\tduration = 1000,\n\t\tdelay = 16,\n\t} = options\n\n\t// Allow people to use this as a stop method.\n\tif ( action === 'stop' ) {\n\t\tstopCountUp( el )\n\t\treturn\n\t}\n\n\tstopCountUp( el )\n\n\t// If no number, don't do anything.\n\tif ( ! /[0-9]/.test( el.innerHTML ) ) {\n\t\treturn\n\t}\n\n\tconst nums = divideNumbers( el.innerHTML, {\n\t\tduration: duration || el.getAttribute( 'data-duration' ),\n\t\tdelay: delay || el.getAttribute( 'data-delay' ),\n\t} )\n\n\t// Remember the contents.\n\tel._countUpOrigInnerHTML = el.innerHTML\n\n\t// Start counting.\n\tel.innerHTML = nums[ 0 ] || '&nbsp;' // Use a non-breaking space to prevent layout shift.\n\tel.style.visibility = 'visible'\n\n\t// Function for displaying output with the set time and delay.\n\tconst output = function() {\n\t\tel.innerHTML = nums.shift() || '&nbsp;' // Use a non-breaking space to prevent layout shift.\n\t\tif ( nums.length ) {\n\t\t\tclearTimeout( el.countUpTimeout )\n\t\t\tel.countUpTimeout = setTimeout( output, delay )\n\t\t} else {\n\t\t\tel._countUpOrigInnerHTML = undefined\n\t\t}\n\t}\n\tel.countUpTimeout = setTimeout( output, delay )\n}\n\nexport default counterUp\n\nconst stopCountUp = el => {\n\tclearTimeout( el.countUpTimeout )\n\tif ( el._countUpOrigInnerHTML ) {\n\t\tel.innerHTML = el._countUpOrigInnerHTML\n\t\tel._countUpOrigInnerHTML = undefined\n\t}\n\tel.style.visibility = ''\n}\n\nexport const divideNumbers = ( numToDivide, options = {} ) => {\n\tconst {\n\t\tduration = 1000,\n\t\tdelay = 16,\n\t} = options\n\n\t// Number of times the number will change.\n\tconst divisions = duration / delay\n\n\t// Split numbers and html tags.\n\tconst splitValues = numToDivide.toString().split( /(<[^>]+>|[0-9.][,.0-9]*[0-9]*)/ )\n\n\t// Contains all numbers to be displayed.\n\tconst nums = []\n\n\t// Set blank strings to ready the split values.\n\tfor ( let k = 0; k < divisions; k++ ) {\n\t\tnums.push( '' )\n\t}\n\n\t// Loop through all numbers and html tags.\n\tfor ( let i = 0; i < splitValues.length; i++ ) {\n\t\t// If number split it into smaller numbers and insert it to nums.\n\t\tif ( /([0-9.][,.0-9]*[0-9]*)/.test( splitValues[ i ] ) && ! /<[^>]+>/.test( splitValues[ i ] ) ) {\n\t\t\tlet num = splitValues[ i ]\n\n\t\t\t// Find all the occurances of . and ,\n\t\t\tconst symbols = [ ...num.matchAll( /[.,]/g ) ]\n\t\t\t\t// Get all the locations of the characters so we can re-place them later on.\n\t\t\t\t.map( m => ( { char: m[0], i: num.length - m.index - 1 } ) )\n\t\t\t\t// Make sure we go through the characters from right to left\n\t\t\t\t.sort( ( a, b ) => a.i - b.i )\n\n\t\t\t// Remove commas and dots for computation purposes.\n\t\t\tnum = num.replace( /[.,]/g, '' )\n\n\t\t\t// Start adding numbers from the end.\n\t\t\tlet k = nums.length - 1\n\n\t\t\t// Create small numbers we'll the count over.\n\t\t\tfor ( let val = divisions; val >= 1; val-- ) {\n\t\t\t\tlet newNum = parseInt( num / divisions * val, 10 )\n\n\t\t\t\t// Re-insert the symbols in the indices they were at.\n\t\t\t\tnewNum = symbols.reduce( ( num, { char, i } ) => {\n\t\t\t\t\treturn num.length <= i ? num // If we don't have enough numbers, don't insert the symbol.\n\t\t\t\t\t\t: num.slice( 0, -i ) + char + num.slice( -i )\n\t\t\t\t}, newNum.toString() )\n\n\t\t\t\t// Insert all small numbers.\n\t\t\t\tnums[ k-- ] += newNum\n\t\t\t}\n\t\t} else {\n\t\t\t// Insert all non-numbers in the same place.\n\t\t\tfor ( let k = 0; k < divisions; k++ ) {\n\t\t\t\tnums[ k ] += splitValues[ i ]\n\t\t\t}\n\t\t}\n\t}\n\n\t// The last value of the element should be the original one.\n\tnums[ nums.length ] = numToDivide.toString()\n\n\treturn nums\n}\n"],
  "mappings": ";;;AAAO,IAAM,YAAY,CAAE,IAAI,UAAU,CAAC,MAAO;AAChD,QAAM;AAAA,IACL,SAAS;AAAA,IACT,WAAW;AAAA,IACX,QAAQ;AAAA,EACT,IAAI;AAGJ,MAAK,WAAW,QAAS;AACxB,gBAAa,EAAG;AAChB;AAAA,EACD;AAEA,cAAa,EAAG;AAGhB,MAAK,CAAE,QAAQ,KAAM,GAAG,SAAU,GAAI;AACrC;AAAA,EACD;AAEA,QAAM,OAAO,cAAe,GAAG,WAAW;AAAA,IACzC,UAAU,YAAY,GAAG,aAAc,eAAgB;AAAA,IACvD,OAAO,SAAS,GAAG,aAAc,YAAa;AAAA,EAC/C,CAAE;AAGF,KAAG,wBAAwB,GAAG;AAG9B,KAAG,YAAY,KAAM,CAAE,KAAK;AAC5B,KAAG,MAAM,aAAa;AAGtB,QAAM,SAAS,WAAW;AACzB,OAAG,YAAY,KAAK,MAAM,KAAK;AAC/B,QAAK,KAAK,QAAS;AAClB,mBAAc,GAAG,cAAe;AAChC,SAAG,iBAAiB,WAAY,QAAQ,KAAM;AAAA,IAC/C,OAAO;AACN,SAAG,wBAAwB;AAAA,IAC5B;AAAA,EACD;AACA,KAAG,iBAAiB,WAAY,QAAQ,KAAM;AAC/C;AAEA,IAAO,qBAAQ;AAEf,IAAM,cAAc,QAAM;AACzB,eAAc,GAAG,cAAe;AAChC,MAAK,GAAG,uBAAwB;AAC/B,OAAG,YAAY,GAAG;AAClB,OAAG,wBAAwB;AAAA,EAC5B;AACA,KAAG,MAAM,aAAa;AACvB;AAEO,IAAM,gBAAgB,CAAE,aAAa,UAAU,CAAC,MAAO;AAC7D,QAAM;AAAA,IACL,WAAW;AAAA,IACX,QAAQ;AAAA,EACT,IAAI;AAGJ,QAAM,YAAY,WAAW;AAG7B,QAAM,cAAc,YAAY,SAAS,EAAE,MAAO,gCAAiC;AAGnF,QAAM,OAAO,CAAC;AAGd,WAAU,IAAI,GAAG,IAAI,WAAW,KAAM;AACrC,SAAK,KAAM,EAAG;AAAA,EACf;AAGA,WAAU,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAM;AAE9C,QAAK,yBAAyB,KAAM,YAAa,CAAE,CAAE,KAAK,CAAE,UAAU,KAAM,YAAa,CAAE,CAAE,GAAI;AAChG,UAAI,MAAM,YAAa,CAAE;AAGzB,YAAM,UAAU,CAAE,GAAG,IAAI,SAAU,OAAQ,CAAE,EAE3C,IAAK,QAAO,EAAE,MAAM,EAAE,CAAC,GAAG,GAAG,IAAI,SAAS,EAAE,QAAQ,EAAE,EAAI,EAE1D,KAAM,CAAE,GAAG,MAAO,EAAE,IAAI,EAAE,CAAE;AAG9B,YAAM,IAAI,QAAS,SAAS,EAAG;AAG/B,UAAI,IAAI,KAAK,SAAS;AAGtB,eAAU,MAAM,WAAW,OAAO,GAAG,OAAQ;AAC5C,YAAI,SAAS,SAAU,MAAM,YAAY,KAAK,EAAG;AAGjD,iBAAS,QAAQ,OAAQ,CAAEA,MAAK,EAAE,MAAM,GAAAC,GAAE,MAAO;AAChD,iBAAOD,KAAI,UAAUC,KAAID,OACtBA,KAAI,MAAO,GAAG,CAACC,EAAE,IAAI,OAAOD,KAAI,MAAO,CAACC,EAAE;AAAA,QAC9C,GAAG,OAAO,SAAS,CAAE;AAGrB,aAAM,GAAI,KAAK;AAAA,MAChB;AAAA,IACD,OAAO;AAEN,eAAU,IAAI,GAAG,IAAI,WAAW,KAAM;AACrC,aAAM,CAAE,KAAK,YAAa,CAAE;AAAA,MAC7B;AAAA,IACD;AAAA,EACD;AAGA,OAAM,KAAK,MAAO,IAAI,YAAY,SAAS;AAE3C,SAAO;AACR;",
  "names": ["num", "i"]
}
